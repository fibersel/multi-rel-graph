/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl1.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl1.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getQueryAccess().getAlternatives(), "rule__Query__Alternatives");
			builder.put(grammarAccess.getSingleQueryAccess().getAlternatives(), "rule__SingleQuery__Alternatives");
			builder.put(grammarAccess.getSinglePartQueryAccess().getAlternatives(), "rule__SinglePartQuery__Alternatives");
			builder.put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
			builder.put(grammarAccess.getUpdatingClauseAccess().getAlternatives(), "rule__UpdatingClause__Alternatives");
			builder.put(grammarAccess.getReadingClauseAccess().getAlternatives(), "rule__ReadingClause__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0(), "rule__MergeAction__ActionAlternatives_1_0");
			builder.put(grammarAccess.getSetItemAccess().getAlternatives(), "rule__SetItem__Alternatives");
			builder.put(grammarAccess.getRemoveItemAccess().getAlternatives(), "rule__RemoveItem__Alternatives");
			builder.put(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0(), "rule__StandaloneCall__InvocationAlternatives_1_0");
			builder.put(grammarAccess.getYieldItemsAccess().getAlternatives_1(), "rule__YieldItems__Alternatives_1");
			builder.put(grammarAccess.getReturnItemsAccess().getAlternatives(), "rule__ReturnItems__Alternatives");
			builder.put(grammarAccess.getSortItemAccess().getSortAlternatives_1_0(), "rule__SortItem__SortAlternatives_1_0");
			builder.put(grammarAccess.getHintAccess().getAlternatives(), "rule__Hint__Alternatives");
			builder.put(grammarAccess.getLookupAccess().getAlternatives(), "rule__Lookup__Alternatives");
			builder.put(grammarAccess.getNodeLookupAccess().getAlternatives_1(), "rule__NodeLookup__Alternatives_1");
			builder.put(grammarAccess.getRelationshipLookupAccess().getAlternatives_0(), "rule__RelationshipLookup__Alternatives_0");
			builder.put(grammarAccess.getRelationshipLookupAccess().getAlternatives_1(), "rule__RelationshipLookup__Alternatives_1");
			builder.put(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5(), "rule__IdentifiedIndexLookup__Alternatives_5");
			builder.put(grammarAccess.getIndexQueryAccess().getAlternatives_3(), "rule__IndexQuery__Alternatives_3");
			builder.put(grammarAccess.getIdLookupAccess().getAlternatives_1(), "rule__IdLookup__Alternatives_1");
			builder.put(grammarAccess.getPatternPartAccess().getAlternatives(), "rule__PatternPart__Alternatives");
			builder.put(grammarAccess.getAnonymousPatternPartAccess().getAlternatives(), "rule__AnonymousPatternPart__Alternatives");
			builder.put(grammarAccess.getShortestPathPatternAccess().getAlternatives(), "rule__ShortestPathPattern__Alternatives");
			builder.put(grammarAccess.getPatternElementAccess().getAlternatives(), "rule__PatternElement__Alternatives");
			builder.put(grammarAccess.getPropertiesAccess().getAlternatives(), "rule__Properties__Alternatives");
			builder.put(grammarAccess.getNotExpressionAccess().getAlternatives(), "rule__NotExpression__Alternatives");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__ComparisonExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives(), "rule__UnaryAddOrSubtractExpression__Alternatives");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0(), "rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0");
			builder.put(grammarAccess.getListOperatorExpressionAccess().getAlternatives(), "rule__ListOperatorExpression__Alternatives");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0(), "rule__StringOperatorExpression__Alternatives_0");
			builder.put(grammarAccess.getNullOperatorExpressionAccess().getAlternatives(), "rule__NullOperatorExpression__Alternatives");
			builder.put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0(), "rule__BooleanLiteral__ValueAlternatives_1_0");
			builder.put(grammarAccess.getPropertyLookupAccess().getAlternatives_1(), "rule__PropertyLookup__Alternatives_1");
			builder.put(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0(), "rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0");
			builder.put(grammarAccess.getCaseExpressionAccess().getAlternatives_0(), "rule__CaseExpression__Alternatives_0");
			builder.put(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0(), "rule__LegacyParameter__ParameterAlternatives_1_0");
			builder.put(grammarAccess.getParameterAccess().getParameterAlternatives_1_0(), "rule__Parameter__ParameterAlternatives_1_0");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives_1_0(), "rule__Number__Alternatives_1_0");
			builder.put(grammarAccess.getNumberAccess().getAlternatives_1_1_1(), "rule__Number__Alternatives_1_1_1");
			builder.put(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives(), "rule__SYMBOLIC_NAME_X__Alternatives");
			builder.put(grammarAccess.getCypherAccess().getGroup(), "rule__Cypher__Group__0");
			builder.put(grammarAccess.getQueryOptionsAccess().getGroup(), "rule__QueryOptions__Group__0");
			builder.put(grammarAccess.getCypherOptionAccess().getGroup(), "rule__CypherOption__Group__0");
			builder.put(grammarAccess.getConfigurationOptionAccess().getGroup(), "rule__ConfigurationOption__Group__0");
			builder.put(grammarAccess.getRegularQueryAccess().getGroup(), "rule__RegularQuery__Group__0");
			builder.put(grammarAccess.getRegularQueryAccess().getGroup_1(), "rule__RegularQuery__Group_1__0");
			builder.put(grammarAccess.getBulkImportQueryAccess().getGroup(), "rule__BulkImportQuery__Group__0");
			builder.put(grammarAccess.getPeriodicCommitHintAccess().getGroup(), "rule__PeriodicCommitHint__Group__0");
			builder.put(grammarAccess.getLoadCSVQueryAccess().getGroup(), "rule__LoadCSVQuery__Group__0");
			builder.put(grammarAccess.getUnionAccess().getGroup(), "rule__Union__Group__0");
			builder.put(grammarAccess.getSinglePartQueryAccess().getGroup_0(), "rule__SinglePartQuery__Group_0__0");
			builder.put(grammarAccess.getSinglePartQueryAccess().getGroup_1(), "rule__SinglePartQuery__Group_1__0");
			builder.put(grammarAccess.getMultiPartQueryAccess().getGroup(), "rule__MultiPartQuery__Group__0");
			builder.put(grammarAccess.getMultiPartSubQueryAccess().getGroup(), "rule__MultiPartSubQuery__Group__0");
			builder.put(grammarAccess.getCreateUniqueConstraintAccess().getGroup(), "rule__CreateUniqueConstraint__Group__0");
			builder.put(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup(), "rule__CreateNodePropertyExistenceConstraint__Group__0");
			builder.put(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup(), "rule__CreateRelationshipPropertyExistenceConstraint__Group__0");
			builder.put(grammarAccess.getCreateIndexAccess().getGroup(), "rule__CreateIndex__Group__0");
			builder.put(grammarAccess.getDropUniqueConstraintAccess().getGroup(), "rule__DropUniqueConstraint__Group__0");
			builder.put(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup(), "rule__DropNodePropertyExistenceConstraint__Group__0");
			builder.put(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup(), "rule__DropRelationshipPropertyExistenceConstraint__Group__0");
			builder.put(grammarAccess.getDropIndexAccess().getGroup(), "rule__DropIndex__Group__0");
			builder.put(grammarAccess.getIndexAccess().getGroup(), "rule__Index__Group__0");
			builder.put(grammarAccess.getUniqueConstraintAccess().getGroup(), "rule__UniqueConstraint__Group__0");
			builder.put(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup(), "rule__NodePropertyExistenceConstraint__Group__0");
			builder.put(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup(), "rule__RelationshipPropertyExistenceConstraint__Group__0");
			builder.put(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup(), "rule__RelationshipPatternSyntax__Group__0");
			builder.put(grammarAccess.getLoadCSVAccess().getGroup(), "rule__LoadCSV__Group__0");
			builder.put(grammarAccess.getLoadCSVAccess().getGroup_8(), "rule__LoadCSV__Group_8__0");
			builder.put(grammarAccess.getLoadCSVWithHeadersAccess().getGroup(), "rule__LoadCSVWithHeaders__Group__0");
			builder.put(grammarAccess.getMatchAccess().getGroup(), "rule__Match__Group__0");
			builder.put(grammarAccess.getUnwindAccess().getGroup(), "rule__Unwind__Group__0");
			builder.put(grammarAccess.getMergeAccess().getGroup(), "rule__Merge__Group__0");
			builder.put(grammarAccess.getMergeActionAccess().getGroup(), "rule__MergeAction__Group__0");
			builder.put(grammarAccess.getCreateAccess().getGroup(), "rule__Create__Group__0");
			builder.put(grammarAccess.getSetAccess().getGroup(), "rule__Set__Group__0");
			builder.put(grammarAccess.getSetAccess().getGroup_2(), "rule__Set__Group_2__0");
			builder.put(grammarAccess.getSetItemAccess().getGroup_0(), "rule__SetItem__Group_0__0");
			builder.put(grammarAccess.getSetItemAccess().getGroup_1(), "rule__SetItem__Group_1__0");
			builder.put(grammarAccess.getSetItemAccess().getGroup_2(), "rule__SetItem__Group_2__0");
			builder.put(grammarAccess.getSetItemAccess().getGroup_3(), "rule__SetItem__Group_3__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup(), "rule__Delete__Group__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup_3(), "rule__Delete__Group_3__0");
			builder.put(grammarAccess.getRemoveAccess().getGroup(), "rule__Remove__Group__0");
			builder.put(grammarAccess.getRemoveAccess().getGroup_2(), "rule__Remove__Group_2__0");
			builder.put(grammarAccess.getRemoveItemAccess().getGroup_0(), "rule__RemoveItem__Group_0__0");
			builder.put(grammarAccess.getRemoveItemAccess().getGroup_1(), "rule__RemoveItem__Group_1__0");
			builder.put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
			builder.put(grammarAccess.getInQueryCallAccess().getGroup(), "rule__InQueryCall__Group__0");
			builder.put(grammarAccess.getInQueryCallAccess().getGroup_2(), "rule__InQueryCall__Group_2__0");
			builder.put(grammarAccess.getStandaloneCallAccess().getGroup(), "rule__StandaloneCall__Group__0");
			builder.put(grammarAccess.getStandaloneCallAccess().getGroup_2(), "rule__StandaloneCall__Group_2__0");
			builder.put(grammarAccess.getYieldItemsAccess().getGroup(), "rule__YieldItems__Group__0");
			builder.put(grammarAccess.getYieldItemsAccess().getGroup_1_0(), "rule__YieldItems__Group_1_0__0");
			builder.put(grammarAccess.getYieldItemsAccess().getGroup_1_0_1(), "rule__YieldItems__Group_1_0_1__0");
			builder.put(grammarAccess.getYieldItemAccess().getGroup(), "rule__YieldItem__Group__0");
			builder.put(grammarAccess.getYieldItemAccess().getGroup_0(), "rule__YieldItem__Group_0__0");
			builder.put(grammarAccess.getWithAccess().getGroup(), "rule__With__Group__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getReturnBodyAccess().getGroup(), "rule__ReturnBody__Group__0");
			builder.put(grammarAccess.getReturnItemsAccess().getGroup_0(), "rule__ReturnItems__Group_0__0");
			builder.put(grammarAccess.getReturnItemsAccess().getGroup_0_1(), "rule__ReturnItems__Group_0_1__0");
			builder.put(grammarAccess.getReturnItemsAccess().getGroup_0_1_1(), "rule__ReturnItems__Group_0_1_1__0");
			builder.put(grammarAccess.getReturnItemsAccess().getGroup_1(), "rule__ReturnItems__Group_1__0");
			builder.put(grammarAccess.getReturnItemsAccess().getGroup_1_1(), "rule__ReturnItems__Group_1_1__0");
			builder.put(grammarAccess.getReturnItemAccess().getGroup(), "rule__ReturnItem__Group__0");
			builder.put(grammarAccess.getReturnItemAccess().getGroup_1(), "rule__ReturnItem__Group_1__0");
			builder.put(grammarAccess.getOrderAccess().getGroup(), "rule__Order__Group__0");
			builder.put(grammarAccess.getOrderAccess().getGroup_3(), "rule__Order__Group_3__0");
			builder.put(grammarAccess.getSkipAccess().getGroup(), "rule__Skip__Group__0");
			builder.put(grammarAccess.getLimitAccess().getGroup(), "rule__Limit__Group__0");
			builder.put(grammarAccess.getSortItemAccess().getGroup(), "rule__SortItem__Group__0");
			builder.put(grammarAccess.getHintAccess().getGroup_0(), "rule__Hint__Group_0__0");
			builder.put(grammarAccess.getHintAccess().getGroup_1(), "rule__Hint__Group_1__0");
			builder.put(grammarAccess.getHintAccess().getGroup_1_1(), "rule__Hint__Group_1_1__0");
			builder.put(grammarAccess.getHintAccess().getGroup_1_1_6(), "rule__Hint__Group_1_1_6__0");
			builder.put(grammarAccess.getHintAccess().getGroup_2(), "rule__Hint__Group_2__0");
			builder.put(grammarAccess.getHintAccess().getGroup_2_1(), "rule__Hint__Group_2_1__0");
			builder.put(grammarAccess.getStartAccess().getGroup(), "rule__Start__Group__0");
			builder.put(grammarAccess.getStartAccess().getGroup_2(), "rule__Start__Group_2__0");
			builder.put(grammarAccess.getStartPointAccess().getGroup(), "rule__StartPoint__Group__0");
			builder.put(grammarAccess.getNodeLookupAccess().getGroup(), "rule__NodeLookup__Group__0");
			builder.put(grammarAccess.getRelationshipLookupAccess().getGroup(), "rule__RelationshipLookup__Group__0");
			builder.put(grammarAccess.getIdentifiedIndexLookupAccess().getGroup(), "rule__IdentifiedIndexLookup__Group__0");
			builder.put(grammarAccess.getIndexQueryAccess().getGroup(), "rule__IndexQuery__Group__0");
			builder.put(grammarAccess.getIdLookupAccess().getGroup(), "rule__IdLookup__Group__0");
			builder.put(grammarAccess.getLiteralIdsAccess().getGroup(), "rule__LiteralIds__Group__0");
			builder.put(grammarAccess.getLiteralIdsAccess().getGroup_1(), "rule__LiteralIds__Group_1__0");
			builder.put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_1(), "rule__Pattern__Group_1__0");
			builder.put(grammarAccess.getPatternPartAccess().getGroup_0(), "rule__PatternPart__Group_0__0");
			builder.put(grammarAccess.getShortestPathPatternAccess().getGroup_0(), "rule__ShortestPathPattern__Group_0__0");
			builder.put(grammarAccess.getShortestPathPatternAccess().getGroup_1(), "rule__ShortestPathPattern__Group_1__0");
			builder.put(grammarAccess.getPatternElementAccess().getGroup_0(), "rule__PatternElement__Group_0__0");
			builder.put(grammarAccess.getPatternElementAccess().getGroup_1(), "rule__PatternElement__Group_1__0");
			builder.put(grammarAccess.getNodePatternAccess().getGroup(), "rule__NodePattern__Group__0");
			builder.put(grammarAccess.getPatternElementChainAccess().getGroup(), "rule__PatternElementChain__Group__0");
			builder.put(grammarAccess.getRelationshipPatternAccess().getGroup(), "rule__RelationshipPattern__Group__0");
			builder.put(grammarAccess.getRelationshipPatternAccess().getGroup_1(), "rule__RelationshipPattern__Group_1__0");
			builder.put(grammarAccess.getRelationshipDetailAccess().getGroup(), "rule__RelationshipDetail__Group__0");
			builder.put(grammarAccess.getRelTypeAccess().getGroup(), "rule__RelType__Group__0");
			builder.put(grammarAccess.getRelationshipTypesAccess().getGroup(), "rule__RelationshipTypes__Group__0");
			builder.put(grammarAccess.getRelationshipTypesAccess().getGroup_2(), "rule__RelationshipTypes__Group_2__0");
			builder.put(grammarAccess.getNodeLabelAccess().getGroup(), "rule__NodeLabel__Group__0");
			builder.put(grammarAccess.getRangeLiteralAccess().getGroup(), "rule__RangeLiteral__Group__0");
			builder.put(grammarAccess.getRangeLiteralAccess().getGroup_2(), "rule__RangeLiteral__Group_2__0");
			builder.put(grammarAccess.getRangeLiteralAccess().getGroup_2_1(), "rule__RangeLiteral__Group_2_1__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getXorExpressionAccess().getGroup(), "rule__XorExpression__Group__0");
			builder.put(grammarAccess.getXorExpressionAccess().getGroup_1(), "rule__XorExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getNotExpressionAccess().getGroup_0(), "rule__NotExpression__Group_0__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getGroup(), "rule__AddOrSubtractExpression__Group__0");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1(), "rule__AddOrSubtractExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup(), "rule__MultiplyDivideModuloExpression__Group__0");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1(), "rule__MultiplyDivideModuloExpression__Group_1__0");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getGroup(), "rule__PowerOfExpression__Group__0");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getGroup_1(), "rule__PowerOfExpression__Group_1__0");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1(), "rule__UnaryAddOrSubtractExpression__Group_1__0");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup(), "rule__StringListNullOperatorExpression__Group__0");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1(), "rule__StringListNullOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getListOperatorExpressionAccess().getGroup_0(), "rule__ListOperatorExpression__Group_0__0");
			builder.put(grammarAccess.getListOperatorExpressionAccess().getGroup_1(), "rule__ListOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup(), "rule__StringOperatorExpression__Group__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0(), "rule__StringOperatorExpression__Group_0_0__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1(), "rule__StringOperatorExpression__Group_0_1__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2(), "rule__StringOperatorExpression__Group_0_2__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3(), "rule__StringOperatorExpression__Group_0_3__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4(), "rule__StringOperatorExpression__Group_0_4__0");
			builder.put(grammarAccess.getNullOperatorExpressionAccess().getGroup_0(), "rule__NullOperatorExpression__Group_0__0");
			builder.put(grammarAccess.getNullOperatorExpressionAccess().getGroup_1(), "rule__NullOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup(), "rule__PropertyOrLabelsExpression__Group__0");
			builder.put(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_1(), "rule__PropertyOrLabelsExpression__Group_1__0");
			builder.put(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_2(), "rule__PropertyOrLabelsExpression__Group_2__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_4(), "rule__Atom__Group_4__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_7(), "rule__Atom__Group_7__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_8(), "rule__Atom__Group_8__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_8_4(), "rule__Atom__Group_8_4__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_10(), "rule__Atom__Group_10__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_11(), "rule__Atom__Group_11__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_12(), "rule__Atom__Group_12__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_13(), "rule__Atom__Group_13__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_18(), "rule__Atom__Group_18__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
			builder.put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
			builder.put(grammarAccess.getListLiteralAccess().getGroup(), "rule__ListLiteral__Group__0");
			builder.put(grammarAccess.getListLiteralAccess().getGroup_2(), "rule__ListLiteral__Group_2__0");
			builder.put(grammarAccess.getListLiteralAccess().getGroup_2_1(), "rule__ListLiteral__Group_2_1__0");
			builder.put(grammarAccess.getReduceAccess().getGroup(), "rule__Reduce__Group__0");
			builder.put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
			builder.put(grammarAccess.getRelationshipsPatternAccess().getGroup(), "rule__RelationshipsPattern__Group__0");
			builder.put(grammarAccess.getFilterExpressionAccess().getGroup(), "rule__FilterExpression__Group__0");
			builder.put(grammarAccess.getIdInCollAccess().getGroup(), "rule__IdInColl__Group__0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getGroup(), "rule__FunctionInvocation__Group__0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getGroup_3(), "rule__FunctionInvocation__Group_3__0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getGroup_3_1(), "rule__FunctionInvocation__Group_3_1__0");
			builder.put(grammarAccess.getExplicitProcedureInvocationAccess().getGroup(), "rule__ExplicitProcedureInvocation__Group__0");
			builder.put(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2(), "rule__ExplicitProcedureInvocation__Group_2__0");
			builder.put(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1(), "rule__ExplicitProcedureInvocation__Group_2_1__0");
			builder.put(grammarAccess.getImplicitProcedureInvocationAccess().getGroup(), "rule__ImplicitProcedureInvocation__Group__0");
			builder.put(grammarAccess.getProcedureNameAccess().getGroup(), "rule__ProcedureName__Group__0");
			builder.put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
			builder.put(grammarAccess.getListComprehensionAccess().getGroup(), "rule__ListComprehension__Group__0");
			builder.put(grammarAccess.getListComprehensionAccess().getGroup_2(), "rule__ListComprehension__Group_2__0");
			builder.put(grammarAccess.getPatternComprehensionAccess().getGroup(), "rule__PatternComprehension__Group__0");
			builder.put(grammarAccess.getPatternComprehensionAccess().getGroup_1(), "rule__PatternComprehension__Group_1__0");
			builder.put(grammarAccess.getPropertyLookupAccess().getGroup(), "rule__PropertyLookup__Group__0");
			builder.put(grammarAccess.getPropertyLookupAccess().getGroup_1_0(), "rule__PropertyLookup__Group_1_0__0");
			builder.put(grammarAccess.getCaseExpressionAccess().getGroup(), "rule__CaseExpression__Group__0");
			builder.put(grammarAccess.getCaseExpressionAccess().getGroup_0_0(), "rule__CaseExpression__Group_0_0__0");
			builder.put(grammarAccess.getCaseExpressionAccess().getGroup_0_1(), "rule__CaseExpression__Group_0_1__0");
			builder.put(grammarAccess.getCaseExpressionAccess().getGroup_1(), "rule__CaseExpression__Group_1__0");
			builder.put(grammarAccess.getCaseAlternativesAccess().getGroup(), "rule__CaseAlternatives__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getMapLiteralAccess().getGroup(), "rule__MapLiteral__Group__0");
			builder.put(grammarAccess.getMapLiteralAccess().getGroup_2(), "rule__MapLiteral__Group_2__0");
			builder.put(grammarAccess.getMapLiteralAccess().getGroup_2_1(), "rule__MapLiteral__Group_2_1__0");
			builder.put(grammarAccess.getMapLiteralEntryAccess().getGroup(), "rule__MapLiteralEntry__Group__0");
			builder.put(grammarAccess.getLegacyParameterAccess().getGroup(), "rule__LegacyParameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getPropertyExpressionAccess().getGroup(), "rule__PropertyExpression__Group__0");
			builder.put(grammarAccess.getDecimalIntegerAccess().getGroup(), "rule__DecimalInteger__Group__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1_1(), "rule__Number__Group_1_1__0");
			builder.put(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1(), "rule__Cypher__QueryOptionsAssignment_1");
			builder.put(grammarAccess.getCypherAccess().getStatementsAssignment_2(), "rule__Cypher__StatementsAssignment_2");
			builder.put(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0(), "rule__QueryOptions__ExplainAssignment_1_0");
			builder.put(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1(), "rule__QueryOptions__ProfileAssignment_1_1");
			builder.put(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2(), "rule__QueryOptions__CypherOptionAssignment_1_2");
			builder.put(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2(), "rule__CypherOption__VersionNumberAssignment_2");
			builder.put(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3(), "rule__CypherOption__ConfigurationOptionAssignment_3");
			builder.put(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment(), "rule__VersionNumber__VersionNumberAssignment");
			builder.put(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0(), "rule__ConfigurationOption__KeyAssignment_0");
			builder.put(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2(), "rule__ConfigurationOption__ValueAssignment_2");
			builder.put(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1(), "rule__RegularQuery__UnionAssignment_1_1");
			builder.put(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0(), "rule__BulkImportQuery__PeriodicCommitHintAssignment_0");
			builder.put(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1(), "rule__BulkImportQuery__LoadCSVQueryAssignment_1");
			builder.put(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4(), "rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4");
			builder.put(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0(), "rule__LoadCSVQuery__LoadCSVAssignment_0");
			builder.put(grammarAccess.getLoadCSVQueryAccess().getSingleQueryAssignment_1(), "rule__LoadCSVQuery__SingleQueryAssignment_1");
			builder.put(grammarAccess.getUnionAccess().getAllAssignment_1(), "rule__Union__AllAssignment_1");
			builder.put(grammarAccess.getUnionAccess().getSingleQueryAssignment_2(), "rule__Union__SingleQueryAssignment_2");
			builder.put(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_0_0(), "rule__SinglePartQuery__ReadingClausesAssignment_0_0");
			builder.put(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_0_1(), "rule__SinglePartQuery__ReturnAssignment_0_1");
			builder.put(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_1_0(), "rule__SinglePartQuery__ReadingClausesAssignment_1_0");
			builder.put(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1(), "rule__SinglePartQuery__UpdatingClausesAssignment_1_1");
			builder.put(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_1_2(), "rule__SinglePartQuery__ReturnAssignment_1_2");
			builder.put(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0(), "rule__MultiPartQuery__SubQueriesAssignment_0");
			builder.put(grammarAccess.getMultiPartQueryAccess().getSinglePartQueryAssignment_1(), "rule__MultiPartQuery__SinglePartQueryAssignment_1");
			builder.put(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesAssignment_0(), "rule__MultiPartSubQuery__ReadingClausesAssignment_0");
			builder.put(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesAssignment_1(), "rule__MultiPartSubQuery__UpdatingClausesAssignment_1");
			builder.put(grammarAccess.getMultiPartSubQueryAccess().getWithPartAssignment_2(), "rule__MultiPartSubQuery__WithPartAssignment_2");
			builder.put(grammarAccess.getCreateIndexAccess().getIndexAssignment_1(), "rule__CreateIndex__IndexAssignment_1");
			builder.put(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1(), "rule__DropUniqueConstraint__UniqueConstraintAssignment_1");
			builder.put(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1(), "rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1");
			builder.put(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1(), "rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1");
			builder.put(grammarAccess.getDropIndexAccess().getIndexAssignment_1(), "rule__DropIndex__IndexAssignment_1");
			builder.put(grammarAccess.getIndexAccess().getNodeLabelAssignment_2(), "rule__Index__NodeLabelAssignment_2");
			builder.put(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4(), "rule__Index__PropertyKeyNameAssignment_4");
			builder.put(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3(), "rule__UniqueConstraint__VariableAssignment_3");
			builder.put(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4(), "rule__UniqueConstraint__NodeLabelAssignment_4");
			builder.put(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7(), "rule__UniqueConstraint__PropertyExpressionAssignment_7");
			builder.put(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3(), "rule__NodePropertyExistenceConstraint__VariableAssignment_3");
			builder.put(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4(), "rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4");
			builder.put(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9(), "rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9");
			builder.put(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2(), "rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2");
			builder.put(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6(), "rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6");
			builder.put(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2(), "rule__RelationshipPatternSyntax__IncomingAssignment_2");
			builder.put(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5(), "rule__RelationshipPatternSyntax__VariableAssignment_5");
			builder.put(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6(), "rule__RelationshipPatternSyntax__RelTypeAssignment_6");
			builder.put(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9(), "rule__RelationshipPatternSyntax__OutgoingAssignment_9");
			builder.put(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3(), "rule__LoadCSV__WithHeadersAssignment_3");
			builder.put(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5(), "rule__LoadCSV__ExpressionAssignment_5");
			builder.put(grammarAccess.getLoadCSVAccess().getVariableAssignment_7(), "rule__LoadCSV__VariableAssignment_7");
			builder.put(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1(), "rule__LoadCSV__FieldterminatorAssignment_8_1");
			builder.put(grammarAccess.getMatchAccess().getOptionalAssignment_0(), "rule__Match__OptionalAssignment_0");
			builder.put(grammarAccess.getMatchAccess().getPatternAssignment_2(), "rule__Match__PatternAssignment_2");
			builder.put(grammarAccess.getMatchAccess().getHintsAssignment_3(), "rule__Match__HintsAssignment_3");
			builder.put(grammarAccess.getMatchAccess().getWhereAssignment_4(), "rule__Match__WhereAssignment_4");
			builder.put(grammarAccess.getUnwindAccess().getExpressionAssignment_1(), "rule__Unwind__ExpressionAssignment_1");
			builder.put(grammarAccess.getUnwindAccess().getVariableAssignment_3(), "rule__Unwind__VariableAssignment_3");
			builder.put(grammarAccess.getMergeAccess().getPatternPartAssignment_1(), "rule__Merge__PatternPartAssignment_1");
			builder.put(grammarAccess.getMergeAccess().getMergeActionsAssignment_2(), "rule__Merge__MergeActionsAssignment_2");
			builder.put(grammarAccess.getMergeActionAccess().getActionAssignment_1(), "rule__MergeAction__ActionAssignment_1");
			builder.put(grammarAccess.getMergeActionAccess().getSetAssignment_2(), "rule__MergeAction__SetAssignment_2");
			builder.put(grammarAccess.getCreateAccess().getUniqueContraintAssignment_1(), "rule__Create__UniqueContraintAssignment_1");
			builder.put(grammarAccess.getCreateAccess().getPatternAssignment_2(), "rule__Create__PatternAssignment_2");
			builder.put(grammarAccess.getSetAccess().getSetItemsAssignment_1(), "rule__Set__SetItemsAssignment_1");
			builder.put(grammarAccess.getSetAccess().getSetItemsAssignment_2_1(), "rule__Set__SetItemsAssignment_2_1");
			builder.put(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0(), "rule__SetItem__PropertyExpressionAssignment_0_0");
			builder.put(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2(), "rule__SetItem__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getSetItemAccess().getVariableAssignment_1_0(), "rule__SetItem__VariableAssignment_1_0");
			builder.put(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2(), "rule__SetItem__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getSetItemAccess().getVariableAssignment_2_0(), "rule__SetItem__VariableAssignment_2_0");
			builder.put(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2(), "rule__SetItem__ExpressionAssignment_2_2");
			builder.put(grammarAccess.getSetItemAccess().getVariableAssignment_3_0(), "rule__SetItem__VariableAssignment_3_0");
			builder.put(grammarAccess.getDeleteAccess().getDetachAssignment_0(), "rule__Delete__DetachAssignment_0");
			builder.put(grammarAccess.getDeleteAccess().getExpressionsAssignment_2(), "rule__Delete__ExpressionsAssignment_2");
			builder.put(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1(), "rule__Delete__ExpressionsAssignment_3_1");
			builder.put(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1(), "rule__Remove__RemoveItemsAssignment_1");
			builder.put(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1(), "rule__Remove__RemoveItemsAssignment_2_1");
			builder.put(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1(), "rule__RemoveItem__VariableAssignment_0_1");
			builder.put(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1(), "rule__RemoveItem__PropertyExpressionAssignment_1_1");
			builder.put(grammarAccess.getForeachAccess().getVariableAssignment_2(), "rule__Foreach__VariableAssignment_2");
			builder.put(grammarAccess.getForeachAccess().getExpressionAssignment_4(), "rule__Foreach__ExpressionAssignment_4");
			builder.put(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6(), "rule__Foreach__UpdatingClausesAssignment_6");
			builder.put(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1(), "rule__InQueryCall__InvocationAssignment_1");
			builder.put(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1(), "rule__InQueryCall__YieldItemsAssignment_2_1");
			builder.put(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1(), "rule__StandaloneCall__InvocationAssignment_1");
			builder.put(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1(), "rule__StandaloneCall__YieldItemsAssignment_2_1");
			builder.put(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0(), "rule__YieldItems__ItemsAssignment_1_0_0");
			builder.put(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1(), "rule__YieldItems__ItemsAssignment_1_0_1_1");
			builder.put(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0(), "rule__YieldItem__FieldAssignment_0_0");
			builder.put(grammarAccess.getYieldItemAccess().getVariableAssignment_1(), "rule__YieldItem__VariableAssignment_1");
			builder.put(grammarAccess.getWithAccess().getReturnBodyAssignment_1(), "rule__With__ReturnBodyAssignment_1");
			builder.put(grammarAccess.getWithAccess().getWhereAssignment_2(), "rule__With__WhereAssignment_2");
			builder.put(grammarAccess.getReturnAccess().getReturnAssignment_0(), "rule__Return__ReturnAssignment_0");
			builder.put(grammarAccess.getReturnAccess().getBodyAssignment_1(), "rule__Return__BodyAssignment_1");
			builder.put(grammarAccess.getReturnBodyAccess().getDistinctAssignment_0(), "rule__ReturnBody__DistinctAssignment_0");
			builder.put(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_1(), "rule__ReturnBody__ReturnItemsAssignment_1");
			builder.put(grammarAccess.getReturnBodyAccess().getOrderAssignment_2(), "rule__ReturnBody__OrderAssignment_2");
			builder.put(grammarAccess.getReturnBodyAccess().getSkipAssignment_3(), "rule__ReturnBody__SkipAssignment_3");
			builder.put(grammarAccess.getReturnBodyAccess().getLimitAssignment_4(), "rule__ReturnBody__LimitAssignment_4");
			builder.put(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0(), "rule__ReturnItems__AllAssignment_0_1_0");
			builder.put(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1(), "rule__ReturnItems__ItemsAssignment_0_1_1_1");
			builder.put(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0(), "rule__ReturnItems__ItemsAssignment_1_0");
			builder.put(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1(), "rule__ReturnItems__ItemsAssignment_1_1_1");
			builder.put(grammarAccess.getReturnItemAccess().getExpressionAssignment_0(), "rule__ReturnItem__ExpressionAssignment_0");
			builder.put(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1(), "rule__ReturnItem__AliasAssignment_1_1");
			builder.put(grammarAccess.getOrderAccess().getOrderByAssignment_2(), "rule__Order__OrderByAssignment_2");
			builder.put(grammarAccess.getOrderAccess().getOrderByAssignment_3_1(), "rule__Order__OrderByAssignment_3_1");
			builder.put(grammarAccess.getSkipAccess().getSkipAssignment_1(), "rule__Skip__SkipAssignment_1");
			builder.put(grammarAccess.getLimitAccess().getLimitAssignment_1(), "rule__Limit__LimitAssignment_1");
			builder.put(grammarAccess.getSortItemAccess().getExpressionAssignment_0(), "rule__SortItem__ExpressionAssignment_0");
			builder.put(grammarAccess.getSortItemAccess().getSortAssignment_1(), "rule__SortItem__SortAssignment_1");
			builder.put(grammarAccess.getHintAccess().getVariableAssignment_0_5(), "rule__Hint__VariableAssignment_0_5");
			builder.put(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6(), "rule__Hint__NodeLabelAssignment_0_6");
			builder.put(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9(), "rule__Hint__PropertyKeyNameAssignment_0_9");
			builder.put(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5(), "rule__Hint__VariablesAssignment_1_1_5");
			builder.put(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1(), "rule__Hint__VariablesAssignment_1_1_6_1");
			builder.put(grammarAccess.getHintAccess().getVariableAssignment_2_1_4(), "rule__Hint__VariableAssignment_2_1_4");
			builder.put(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5(), "rule__Hint__NodeLabelAssignment_2_1_5");
			builder.put(grammarAccess.getStartAccess().getStartPointAssignment_1(), "rule__Start__StartPointAssignment_1");
			builder.put(grammarAccess.getStartAccess().getStartPointAssignment_2_1(), "rule__Start__StartPointAssignment_2_1");
			builder.put(grammarAccess.getStartAccess().getWhereAssignment_3(), "rule__Start__WhereAssignment_3");
			builder.put(grammarAccess.getStartPointAccess().getVariableAssignment_0(), "rule__StartPoint__VariableAssignment_0");
			builder.put(grammarAccess.getStartPointAccess().getLookupAssignment_2(), "rule__StartPoint__LookupAssignment_2");
			builder.put(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1(), "rule__IdentifiedIndexLookup__IndexNameAssignment_1");
			builder.put(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3(), "rule__IdentifiedIndexLookup__KeyAssignment_3");
			builder.put(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0(), "rule__IdentifiedIndexLookup__ValueAssignment_5_0");
			builder.put(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1(), "rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1");
			builder.put(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1(), "rule__IndexQuery__IndexNameAssignment_1");
			builder.put(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0(), "rule__IndexQuery__QueryAssignment_3_0");
			builder.put(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1(), "rule__IndexQuery__ParameterAssignment_3_1");
			builder.put(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0(), "rule__IdLookup__IdsAssignment_1_0");
			builder.put(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1(), "rule__IdLookup__LegacyParameterAssignment_1_1");
			builder.put(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2(), "rule__IdLookup__WildcardAssignment_1_2");
			builder.put(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0(), "rule__LiteralIds__IdsAssignment_0");
			builder.put(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1(), "rule__LiteralIds__IdsAssignment_1_1");
			builder.put(grammarAccess.getWhereAccess().getExpressionAssignment_1(), "rule__Where__ExpressionAssignment_1");
			builder.put(grammarAccess.getPatternAccess().getPatternsAssignment_0(), "rule__Pattern__PatternsAssignment_0");
			builder.put(grammarAccess.getPatternAccess().getPatternsAssignment_1_1(), "rule__Pattern__PatternsAssignment_1_1");
			builder.put(grammarAccess.getPatternPartAccess().getVarAssignment_0_0(), "rule__PatternPart__VarAssignment_0_0");
			builder.put(grammarAccess.getPatternPartAccess().getPartAssignment_0_2(), "rule__PatternPart__PartAssignment_0_2");
			builder.put(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3(), "rule__ShortestPathPattern__PatternElementAssignment_0_3");
			builder.put(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3(), "rule__ShortestPathPattern__PatternElementAssignment_1_3");
			builder.put(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0(), "rule__PatternElement__NodepatternAssignment_0_0");
			builder.put(grammarAccess.getPatternElementAccess().getChainAssignment_0_1(), "rule__PatternElement__ChainAssignment_0_1");
			builder.put(grammarAccess.getNodePatternAccess().getVariableAssignment_2(), "rule__NodePattern__VariableAssignment_2");
			builder.put(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4(), "rule__NodePattern__PropertiesAssignment_4");
			builder.put(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0(), "rule__PatternElementChain__RelationshipPatternAssignment_0");
			builder.put(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1(), "rule__PatternElementChain__NodePatternAssignment_1");
			builder.put(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0(), "rule__RelationshipPattern__IncomingAssignment_1_0");
			builder.put(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2(), "rule__RelationshipPattern__DetailAssignment_1_2");
			builder.put(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4(), "rule__RelationshipPattern__OutgoingAssignment_1_4");
			builder.put(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2(), "rule__RelationshipDetail__VariableAssignment_2");
			builder.put(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3(), "rule__RelationshipDetail__OptionalAssignment_3");
			builder.put(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5(), "rule__RelationshipDetail__RangeAssignment_5");
			builder.put(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6(), "rule__RelationshipDetail__PropertiesAssignment_6");
			builder.put(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_1(), "rule__RelationshipTypes__RelTypeNamesAssignment_1");
			builder.put(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_2_2(), "rule__RelationshipTypes__RelTypeNamesAssignment_2_2");
			builder.put(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment(), "rule__NodeLabels__NodeLabelsAssignment");
			builder.put(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1(), "rule__NodeLabel__LabelNameAssignment_1");
			builder.put(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0(), "rule__RangeLiteral__LowerAssignment_2_0");
			builder.put(grammarAccess.getRangeLiteralAccess().getVariableLengthAssignment_2_1_0(), "rule__RangeLiteral__VariableLengthAssignment_2_1_0");
			builder.put(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1(), "rule__RangeLiteral__UpperAssignment_2_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1(), "rule__XorExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2(), "rule__XorExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1(), "rule__NotExpression__OperatorAssignment_0_1");
			builder.put(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2(), "rule__NotExpression__LeftAssignment_0_2");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1(), "rule__AddOrSubtractExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2(), "rule__AddOrSubtractExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2(), "rule__MultiplyDivideModuloExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1(), "rule__PowerOfExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2(), "rule__PowerOfExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1(), "rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2(), "rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1(), "rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1");
			builder.put(grammarAccess.getListOperatorExpressionAccess().getExpressionAssignment_0_2(), "rule__ListOperatorExpression__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getListOperatorExpressionAccess().getLowerAssignment_1_2(), "rule__ListOperatorExpression__LowerAssignment_1_2");
			builder.put(grammarAccess.getListOperatorExpressionAccess().getUpperAssignment_1_4(), "rule__ListOperatorExpression__UpperAssignment_1_4");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1(), "rule__StringOperatorExpression__RightAssignment_1");
			builder.put(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1(), "rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1");
			builder.put(grammarAccess.getAtomAccess().getFilterExpressionAssignment_7_3(), "rule__Atom__FilterExpressionAssignment_7_3");
			builder.put(grammarAccess.getAtomAccess().getFilterExpressionAssignment_8_3(), "rule__Atom__FilterExpressionAssignment_8_3");
			builder.put(grammarAccess.getAtomAccess().getExpressionAssignment_8_4_1(), "rule__Atom__ExpressionAssignment_8_4_1");
			builder.put(grammarAccess.getAtomAccess().getFilterExpressionAssignment_10_3(), "rule__Atom__FilterExpressionAssignment_10_3");
			builder.put(grammarAccess.getAtomAccess().getFilterExpressionAssignment_11_3(), "rule__Atom__FilterExpressionAssignment_11_3");
			builder.put(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3(), "rule__Atom__FilterExpressionAssignment_12_3");
			builder.put(grammarAccess.getAtomAccess().getFilterExpressionAssignment_13_3(), "rule__Atom__FilterExpressionAssignment_13_3");
			builder.put(grammarAccess.getAtomAccess().getVariableRefAssignment_18_1(), "rule__Atom__VariableRefAssignment_18_1");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_0(), "rule__ListLiteral__ExpressionsAssignment_2_0");
			builder.put(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_1_1(), "rule__ListLiteral__ExpressionsAssignment_2_1_1");
			builder.put(grammarAccess.getReduceAccess().getAccumulatorAssignment_2(), "rule__Reduce__AccumulatorAssignment_2");
			builder.put(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4(), "rule__Reduce__AccumulatorExpressionAssignment_4");
			builder.put(grammarAccess.getReduceAccess().getIdInCollAssignment_6(), "rule__Reduce__IdInCollAssignment_6");
			builder.put(grammarAccess.getReduceAccess().getExpressionAssignment_8(), "rule__Reduce__ExpressionAssignment_8");
			builder.put(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1(), "rule__ParenthesizedExpression__ExpressionAssignment_1");
			builder.put(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0(), "rule__RelationshipsPattern__NodePatternAssignment_0");
			builder.put(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1(), "rule__RelationshipsPattern__ChainAssignment_1");
			builder.put(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0(), "rule__FilterExpression__IdInCollAssignment_0");
			builder.put(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1(), "rule__FilterExpression__WhereAssignment_1");
			builder.put(grammarAccess.getIdInCollAccess().getVariableAssignment_0(), "rule__IdInColl__VariableAssignment_0");
			builder.put(grammarAccess.getIdInCollAccess().getExpressionAssignment_2(), "rule__IdInColl__ExpressionAssignment_2");
			builder.put(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0(), "rule__FunctionInvocation__FunctionNameAssignment_0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2(), "rule__FunctionInvocation__DistinctAssignment_2");
			builder.put(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0(), "rule__FunctionInvocation__ParameterAssignment_3_0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1(), "rule__FunctionInvocation__ParameterAssignment_3_1_1");
			builder.put(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0(), "rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0");
			builder.put(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0(), "rule__ExplicitProcedureInvocation__ParameterAssignment_2_0");
			builder.put(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1(), "rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1");
			builder.put(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameAssignment_1(), "rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1");
			builder.put(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0(), "rule__ProcedureName__NamespaceAssignment_0");
			builder.put(grammarAccess.getProcedureNameAccess().getNameAssignment_1(), "rule__ProcedureName__NameAssignment_1");
			builder.put(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1(), "rule__ListComprehension__FilterExpressionAssignment_1");
			builder.put(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1(), "rule__ListComprehension__ExpressionAssignment_2_1");
			builder.put(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0(), "rule__PatternComprehension__PathVariableAssignment_1_0");
			builder.put(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2(), "rule__PatternComprehension__PatternAssignment_2");
			builder.put(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3(), "rule__PatternComprehension__WhereAssignment_3");
			builder.put(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5(), "rule__PatternComprehension__ExpressionAssignment_5");
			builder.put(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0(), "rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0");
			builder.put(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1(), "rule__PropertyLookup__PropertyOperatorAssignment_1_0_1");
			builder.put(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1(), "rule__PropertyLookup__PropertyKeyNameAssignment_1_1");
			builder.put(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1(), "rule__CaseExpression__CaseAlternativesAssignment_0_0_1");
			builder.put(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1(), "rule__CaseExpression__CaseExpressionAssignment_0_1_1");
			builder.put(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2(), "rule__CaseExpression__CaseAlternativesAssignment_0_1_2");
			builder.put(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1(), "rule__CaseExpression__ElseExpressionAssignment_1_1");
			builder.put(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1(), "rule__CaseAlternatives__WhenAssignment_1");
			builder.put(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3(), "rule__CaseAlternatives__ThenAssignment_3");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0(), "rule__MapLiteral__EntriesAssignment_2_0");
			builder.put(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1(), "rule__MapLiteral__EntriesAssignment_2_1_1");
			builder.put(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0(), "rule__MapLiteralEntry__KeyAssignment_0");
			builder.put(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2(), "rule__MapLiteralEntry__ValueAssignment_2");
			builder.put(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1(), "rule__LegacyParameter__ParameterAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getParameterAssignment_1(), "rule__Parameter__ParameterAssignment_1");
			builder.put(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1(), "rule__PropertyExpression__PropertyLookupsAssignment_1");
			builder.put(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1(), "rule__DecimalInteger__ValueAssignment_1");
			builder.put(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), "rule__QueryOptions__UnorderedGroup_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
