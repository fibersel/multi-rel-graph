/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.cypher.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.cypher.CypherPackage;
import org.xtext.example.mydsl.cypher.RelationshipPatternSyntax;
import org.xtext.example.mydsl.cypher.VariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relationship Pattern Syntax</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.RelationshipPatternSyntaxImpl#isIncoming <em>Incoming</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.RelationshipPatternSyntaxImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.RelationshipPatternSyntaxImpl#getRelType <em>Rel Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.RelationshipPatternSyntaxImpl#isOutgoing <em>Outgoing</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationshipPatternSyntaxImpl extends MinimalEObjectImpl.Container implements RelationshipPatternSyntax
{
  /**
   * The default value of the '{@link #isIncoming() <em>Incoming</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIncoming()
   * @generated
   * @ordered
   */
  protected static final boolean INCOMING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIncoming() <em>Incoming</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIncoming()
   * @generated
   * @ordered
   */
  protected boolean incoming = INCOMING_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected VariableDeclaration variable;

  /**
   * The default value of the '{@link #getRelType() <em>Rel Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelType()
   * @generated
   * @ordered
   */
  protected static final String REL_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRelType() <em>Rel Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelType()
   * @generated
   * @ordered
   */
  protected String relType = REL_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isOutgoing() <em>Outgoing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOutgoing()
   * @generated
   * @ordered
   */
  protected static final boolean OUTGOING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOutgoing() <em>Outgoing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOutgoing()
   * @generated
   * @ordered
   */
  protected boolean outgoing = OUTGOING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipPatternSyntaxImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CypherPackage.Literals.RELATIONSHIP_PATTERN_SYNTAX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIncoming()
  {
    return incoming;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncoming(boolean newIncoming)
  {
    boolean oldIncoming = incoming;
    incoming = newIncoming;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__INCOMING, oldIncoming, incoming));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(VariableDeclaration newVariable, NotificationChain msgs)
  {
    VariableDeclaration oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(VariableDeclaration newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRelType()
  {
    return relType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelType(String newRelType)
  {
    String oldRelType = relType;
    relType = newRelType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__REL_TYPE, oldRelType, relType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOutgoing()
  {
    return outgoing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutgoing(boolean newOutgoing)
  {
    boolean oldOutgoing = outgoing;
    outgoing = newOutgoing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__OUTGOING, oldOutgoing, outgoing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE:
        return basicSetVariable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__INCOMING:
        return isIncoming();
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE:
        return getVariable();
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__REL_TYPE:
        return getRelType();
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__OUTGOING:
        return isOutgoing();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__INCOMING:
        setIncoming((Boolean)newValue);
        return;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE:
        setVariable((VariableDeclaration)newValue);
        return;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__REL_TYPE:
        setRelType((String)newValue);
        return;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__OUTGOING:
        setOutgoing((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__INCOMING:
        setIncoming(INCOMING_EDEFAULT);
        return;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE:
        setVariable((VariableDeclaration)null);
        return;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__REL_TYPE:
        setRelType(REL_TYPE_EDEFAULT);
        return;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__OUTGOING:
        setOutgoing(OUTGOING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__INCOMING:
        return incoming != INCOMING_EDEFAULT;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__VARIABLE:
        return variable != null;
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__REL_TYPE:
        return REL_TYPE_EDEFAULT == null ? relType != null : !REL_TYPE_EDEFAULT.equals(relType);
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX__OUTGOING:
        return outgoing != OUTGOING_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (incoming: ");
    result.append(incoming);
    result.append(", relType: ");
    result.append(relType);
    result.append(", outgoing: ");
    result.append(outgoing);
    result.append(')');
    return result.toString();
  }

} //RelationshipPatternSyntaxImpl
