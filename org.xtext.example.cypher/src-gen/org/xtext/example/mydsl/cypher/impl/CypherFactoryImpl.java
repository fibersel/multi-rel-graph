/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.cypher.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.cypher.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CypherFactoryImpl extends EFactoryImpl implements CypherFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CypherFactory init()
  {
    try
    {
      CypherFactory theCypherFactory = (CypherFactory)EPackage.Registry.INSTANCE.getEFactory(CypherPackage.eNS_URI);
      if (theCypherFactory != null)
      {
        return theCypherFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CypherFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CypherFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CypherPackage.CYPHER: return createCypher();
      case CypherPackage.QUERY_OPTIONS: return createQueryOptions();
      case CypherPackage.CYPHER_OPTION: return createCypherOption();
      case CypherPackage.VERSION_NUMBER: return createVersionNumber();
      case CypherPackage.CONFIGURATION_OPTION: return createConfigurationOption();
      case CypherPackage.STATEMENT: return createStatement();
      case CypherPackage.QUERY: return createQuery();
      case CypherPackage.REGULAR_QUERY: return createRegularQuery();
      case CypherPackage.BULK_IMPORT_QUERY: return createBulkImportQuery();
      case CypherPackage.PERIODIC_COMMIT_HINT: return createPeriodicCommitHint();
      case CypherPackage.LOAD_CSV_QUERY: return createLoadCSVQuery();
      case CypherPackage.UNION: return createUnion();
      case CypherPackage.SINGLE_QUERY: return createSingleQuery();
      case CypherPackage.SINGLE_PART_QUERY: return createSinglePartQuery();
      case CypherPackage.MULTI_PART_QUERY: return createMultiPartQuery();
      case CypherPackage.MULTI_PART_SUB_QUERY: return createMultiPartSubQuery();
      case CypherPackage.CLAUSE: return createClause();
      case CypherPackage.UPDATING_CLAUSE: return createUpdatingClause();
      case CypherPackage.READING_CLAUSE: return createReadingClause();
      case CypherPackage.COMMAND: return createCommand();
      case CypherPackage.CREATE_UNIQUE_CONSTRAINT: return createCreateUniqueConstraint();
      case CypherPackage.CREATE_NODE_PROPERTY_EXISTENCE_CONSTRAINT: return createCreateNodePropertyExistenceConstraint();
      case CypherPackage.CREATE_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT: return createCreateRelationshipPropertyExistenceConstraint();
      case CypherPackage.CREATE_INDEX: return createCreateIndex();
      case CypherPackage.DROP_UNIQUE_CONSTRAINT: return createDropUniqueConstraint();
      case CypherPackage.DROP_NODE_PROPERTY_EXISTENCE_CONSTRAINT: return createDropNodePropertyExistenceConstraint();
      case CypherPackage.DROP_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT: return createDropRelationshipPropertyExistenceConstraint();
      case CypherPackage.DROP_INDEX: return createDropIndex();
      case CypherPackage.INDEX: return createIndex();
      case CypherPackage.UNIQUE_CONSTRAINT: return createUniqueConstraint();
      case CypherPackage.NODE_PROPERTY_EXISTENCE_CONSTRAINT: return createNodePropertyExistenceConstraint();
      case CypherPackage.RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT: return createRelationshipPropertyExistenceConstraint();
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX: return createRelationshipPatternSyntax();
      case CypherPackage.LOAD_CSV: return createLoadCSV();
      case CypherPackage.MATCH: return createMatch();
      case CypherPackage.UNWIND: return createUnwind();
      case CypherPackage.MERGE: return createMerge();
      case CypherPackage.MERGE_ACTION: return createMergeAction();
      case CypherPackage.CREATE: return createCreate();
      case CypherPackage.SET: return createSet();
      case CypherPackage.SET_ITEM: return createSetItem();
      case CypherPackage.DELETE: return createDelete();
      case CypherPackage.REMOVE: return createRemove();
      case CypherPackage.REMOVE_ITEM: return createRemoveItem();
      case CypherPackage.FOREACH: return createForeach();
      case CypherPackage.IN_QUERY_CALL: return createInQueryCall();
      case CypherPackage.STANDALONE_CALL: return createStandaloneCall();
      case CypherPackage.YIELD_ITEMS: return createYieldItems();
      case CypherPackage.YIELD_ITEM: return createYieldItem();
      case CypherPackage.WITH: return createWith();
      case CypherPackage.RETURN: return createReturn();
      case CypherPackage.RETURN_BODY: return createReturnBody();
      case CypherPackage.RETURN_ITEMS: return createReturnItems();
      case CypherPackage.RETURN_ITEM: return createReturnItem();
      case CypherPackage.ORDER: return createOrder();
      case CypherPackage.SKIP: return createSkip();
      case CypherPackage.LIMIT: return createLimit();
      case CypherPackage.SORT_ITEM: return createSortItem();
      case CypherPackage.HINT: return createHint();
      case CypherPackage.START: return createStart();
      case CypherPackage.START_POINT: return createStartPoint();
      case CypherPackage.LOOKUP: return createLookup();
      case CypherPackage.NODE_LOOKUP: return createNodeLookup();
      case CypherPackage.RELATIONSHIP_LOOKUP: return createRelationshipLookup();
      case CypherPackage.IDENTIFIED_INDEX_LOOKUP: return createIdentifiedIndexLookup();
      case CypherPackage.INDEX_QUERY: return createIndexQuery();
      case CypherPackage.ID_LOOKUP: return createIdLookup();
      case CypherPackage.LITERAL_IDS: return createLiteralIds();
      case CypherPackage.WHERE: return createWhere();
      case CypherPackage.PATTERN: return createPattern();
      case CypherPackage.PATTERN_PART: return createPatternPart();
      case CypherPackage.ANONYMOUS_PATTERN_PART: return createAnonymousPatternPart();
      case CypherPackage.SHORTEST_PATH_PATTERN: return createShortestPathPattern();
      case CypherPackage.PATTERN_ELEMENT: return createPatternElement();
      case CypherPackage.NODE_PATTERN: return createNodePattern();
      case CypherPackage.PATTERN_ELEMENT_CHAIN: return createPatternElementChain();
      case CypherPackage.RELATIONSHIP_PATTERN: return createRelationshipPattern();
      case CypherPackage.RELATIONSHIP_DETAIL: return createRelationshipDetail();
      case CypherPackage.PROPERTIES: return createProperties();
      case CypherPackage.RELATIONSHIP_TYPES: return createRelationshipTypes();
      case CypherPackage.NODE_LABELS: return createNodeLabels();
      case CypherPackage.NODE_LABEL: return createNodeLabel();
      case CypherPackage.RANGE_LITERAL: return createRangeLiteral();
      case CypherPackage.EXPRESSION: return createExpression();
      case CypherPackage.LITERAL: return createLiteral();
      case CypherPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case CypherPackage.LIST_LITERAL: return createListLiteral();
      case CypherPackage.REDUCE: return createReduce();
      case CypherPackage.PARENTHESIZED_EXPRESSION: return createParenthesizedExpression();
      case CypherPackage.RELATIONSHIPS_PATTERN: return createRelationshipsPattern();
      case CypherPackage.FILTER_EXPRESSION: return createFilterExpression();
      case CypherPackage.ID_IN_COLL: return createIdInColl();
      case CypherPackage.FUNCTION_INVOCATION: return createFunctionInvocation();
      case CypherPackage.EXPLICIT_PROCEDURE_INVOCATION: return createExplicitProcedureInvocation();
      case CypherPackage.IMPLICIT_PROCEDURE_INVOCATION: return createImplicitProcedureInvocation();
      case CypherPackage.PROCEDURE_NAME: return createProcedureName();
      case CypherPackage.LIST_COMPREHENSION: return createListComprehension();
      case CypherPackage.PATTERN_COMPREHENSION: return createPatternComprehension();
      case CypherPackage.PROPERTY_LOOKUP: return createPropertyLookup();
      case CypherPackage.CASE_EXPRESSION: return createCaseExpression();
      case CypherPackage.CASE_ALTERNATIVES: return createCaseAlternatives();
      case CypherPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case CypherPackage.STRING_LITERAL: return createStringLiteral();
      case CypherPackage.NUMBER_LITERAL: return createNumberLiteral();
      case CypherPackage.MAP_LITERAL: return createMapLiteral();
      case CypherPackage.MAP_LITERAL_ENTRY: return createMapLiteralEntry();
      case CypherPackage.LEGACY_PARAMETER: return createLegacyParameter();
      case CypherPackage.PARAMETER: return createParameter();
      case CypherPackage.PROPERTY_EXPRESSION: return createPropertyExpression();
      case CypherPackage.DECIMAL_INTEGER: return createDecimalInteger();
      case CypherPackage.ALL_OPTIONS: return createAllOptions();
      case CypherPackage.COMBINED_QUERY: return createCombinedQuery();
      case CypherPackage.REMOVE_ITEM_LABEL: return createRemoveItemLabel();
      case CypherPackage.REMOVE_ITEM_PROPERTY: return createRemoveItemProperty();
      case CypherPackage.INDEX_HINT: return createIndexHint();
      case CypherPackage.JOIN_HINT: return createJoinHint();
      case CypherPackage.SCAN_HINT: return createScanHint();
      case CypherPackage.SHORTEST_PATH: return createShortestPath();
      case CypherPackage.ALL_SHORTEST_PATHS: return createAllShortestPaths();
      case CypherPackage.OR_EXPRESSION: return createOrExpression();
      case CypherPackage.XOR_EXPRESSION: return createXorExpression();
      case CypherPackage.AND_EXPRESSION: return createAndExpression();
      case CypherPackage.NOT_EXPRESSION: return createNotExpression();
      case CypherPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      case CypherPackage.ADD_OR_SUBTRACT_EXPRESSION: return createAddOrSubtractExpression();
      case CypherPackage.MULTIPLY_DIVIDE_MODULO_EXPRESSION: return createMultiplyDivideModuloExpression();
      case CypherPackage.POWER_OF_EXPRESSION: return createPowerOfExpression();
      case CypherPackage.UNARY_ADD_OR_SUBTRACT_EXPRESSION: return createUnaryAddOrSubtractExpression();
      case CypherPackage.STRING_LIST_NULL_OPERATOR_EXPRESSION: return createStringListNullOperatorExpression();
      case CypherPackage.INDEX_LOOKUP_EXPRESSION: return createIndexLookupExpression();
      case CypherPackage.INDEX_RANGE_EXPRESSION: return createIndexRangeExpression();
      case CypherPackage.REG_EXP_MATCHING_EXPRESSION: return createRegExpMatchingExpression();
      case CypherPackage.IN_COLLECTION_EXPRESSION: return createInCollectionExpression();
      case CypherPackage.STARTS_WITH_EXPRESSION: return createStartsWithExpression();
      case CypherPackage.ENDS_WITH_EXPRESSION: return createEndsWithExpression();
      case CypherPackage.CONTAINS_EXPRESSION: return createContainsExpression();
      case CypherPackage.IS_NULL_EXPRESSION: return createIsNullExpression();
      case CypherPackage.IS_NOT_NULL_EXPRESSION: return createIsNotNullExpression();
      case CypherPackage.PROPERTY_LOOKUP_EXPRESSION: return createPropertyLookupExpression();
      case CypherPackage.NODE_LABELS_EXPRESSION: return createNodeLabelsExpression();
      case CypherPackage.COUNT: return createCount();
      case CypherPackage.FILTER: return createFilter();
      case CypherPackage.EXTRACT: return createExtract();
      case CypherPackage.ALL: return createAll();
      case CypherPackage.ANY: return createAny();
      case CypherPackage.NONE: return createNone();
      case CypherPackage.SINGLE: return createSingle();
      case CypherPackage.VARIABLE_REF: return createVariableRef();
      case CypherPackage.NULL: return createNULL();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cypher createCypher()
  {
    CypherImpl cypher = new CypherImpl();
    return cypher;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryOptions createQueryOptions()
  {
    QueryOptionsImpl queryOptions = new QueryOptionsImpl();
    return queryOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CypherOption createCypherOption()
  {
    CypherOptionImpl cypherOption = new CypherOptionImpl();
    return cypherOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VersionNumber createVersionNumber()
  {
    VersionNumberImpl versionNumber = new VersionNumberImpl();
    return versionNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigurationOption createConfigurationOption()
  {
    ConfigurationOptionImpl configurationOption = new ConfigurationOptionImpl();
    return configurationOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularQuery createRegularQuery()
  {
    RegularQueryImpl regularQuery = new RegularQueryImpl();
    return regularQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BulkImportQuery createBulkImportQuery()
  {
    BulkImportQueryImpl bulkImportQuery = new BulkImportQueryImpl();
    return bulkImportQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodicCommitHint createPeriodicCommitHint()
  {
    PeriodicCommitHintImpl periodicCommitHint = new PeriodicCommitHintImpl();
    return periodicCommitHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoadCSVQuery createLoadCSVQuery()
  {
    LoadCSVQueryImpl loadCSVQuery = new LoadCSVQueryImpl();
    return loadCSVQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Union createUnion()
  {
    UnionImpl union = new UnionImpl();
    return union;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleQuery createSingleQuery()
  {
    SingleQueryImpl singleQuery = new SingleQueryImpl();
    return singleQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SinglePartQuery createSinglePartQuery()
  {
    SinglePartQueryImpl singlePartQuery = new SinglePartQueryImpl();
    return singlePartQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiPartQuery createMultiPartQuery()
  {
    MultiPartQueryImpl multiPartQuery = new MultiPartQueryImpl();
    return multiPartQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiPartSubQuery createMultiPartSubQuery()
  {
    MultiPartSubQueryImpl multiPartSubQuery = new MultiPartSubQueryImpl();
    return multiPartSubQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdatingClause createUpdatingClause()
  {
    UpdatingClauseImpl updatingClause = new UpdatingClauseImpl();
    return updatingClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadingClause createReadingClause()
  {
    ReadingClauseImpl readingClause = new ReadingClauseImpl();
    return readingClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateUniqueConstraint createCreateUniqueConstraint()
  {
    CreateUniqueConstraintImpl createUniqueConstraint = new CreateUniqueConstraintImpl();
    return createUniqueConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateNodePropertyExistenceConstraint createCreateNodePropertyExistenceConstraint()
  {
    CreateNodePropertyExistenceConstraintImpl createNodePropertyExistenceConstraint = new CreateNodePropertyExistenceConstraintImpl();
    return createNodePropertyExistenceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateRelationshipPropertyExistenceConstraint createCreateRelationshipPropertyExistenceConstraint()
  {
    CreateRelationshipPropertyExistenceConstraintImpl createRelationshipPropertyExistenceConstraint = new CreateRelationshipPropertyExistenceConstraintImpl();
    return createRelationshipPropertyExistenceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateIndex createCreateIndex()
  {
    CreateIndexImpl createIndex = new CreateIndexImpl();
    return createIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DropUniqueConstraint createDropUniqueConstraint()
  {
    DropUniqueConstraintImpl dropUniqueConstraint = new DropUniqueConstraintImpl();
    return dropUniqueConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DropNodePropertyExistenceConstraint createDropNodePropertyExistenceConstraint()
  {
    DropNodePropertyExistenceConstraintImpl dropNodePropertyExistenceConstraint = new DropNodePropertyExistenceConstraintImpl();
    return dropNodePropertyExistenceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DropRelationshipPropertyExistenceConstraint createDropRelationshipPropertyExistenceConstraint()
  {
    DropRelationshipPropertyExistenceConstraintImpl dropRelationshipPropertyExistenceConstraint = new DropRelationshipPropertyExistenceConstraintImpl();
    return dropRelationshipPropertyExistenceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DropIndex createDropIndex()
  {
    DropIndexImpl dropIndex = new DropIndexImpl();
    return dropIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Index createIndex()
  {
    IndexImpl index = new IndexImpl();
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniqueConstraint createUniqueConstraint()
  {
    UniqueConstraintImpl uniqueConstraint = new UniqueConstraintImpl();
    return uniqueConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodePropertyExistenceConstraint createNodePropertyExistenceConstraint()
  {
    NodePropertyExistenceConstraintImpl nodePropertyExistenceConstraint = new NodePropertyExistenceConstraintImpl();
    return nodePropertyExistenceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipPropertyExistenceConstraint createRelationshipPropertyExistenceConstraint()
  {
    RelationshipPropertyExistenceConstraintImpl relationshipPropertyExistenceConstraint = new RelationshipPropertyExistenceConstraintImpl();
    return relationshipPropertyExistenceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipPatternSyntax createRelationshipPatternSyntax()
  {
    RelationshipPatternSyntaxImpl relationshipPatternSyntax = new RelationshipPatternSyntaxImpl();
    return relationshipPatternSyntax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoadCSV createLoadCSV()
  {
    LoadCSVImpl loadCSV = new LoadCSVImpl();
    return loadCSV;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Match createMatch()
  {
    MatchImpl match = new MatchImpl();
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unwind createUnwind()
  {
    UnwindImpl unwind = new UnwindImpl();
    return unwind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Merge createMerge()
  {
    MergeImpl merge = new MergeImpl();
    return merge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeAction createMergeAction()
  {
    MergeActionImpl mergeAction = new MergeActionImpl();
    return mergeAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Create createCreate()
  {
    CreateImpl create = new CreateImpl();
    return create;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set createSet()
  {
    SetImpl set = new SetImpl();
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetItem createSetItem()
  {
    SetItemImpl setItem = new SetItemImpl();
    return setItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delete createDelete()
  {
    DeleteImpl delete = new DeleteImpl();
    return delete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Remove createRemove()
  {
    RemoveImpl remove = new RemoveImpl();
    return remove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveItem createRemoveItem()
  {
    RemoveItemImpl removeItem = new RemoveItemImpl();
    return removeItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Foreach createForeach()
  {
    ForeachImpl foreach = new ForeachImpl();
    return foreach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InQueryCall createInQueryCall()
  {
    InQueryCallImpl inQueryCall = new InQueryCallImpl();
    return inQueryCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandaloneCall createStandaloneCall()
  {
    StandaloneCallImpl standaloneCall = new StandaloneCallImpl();
    return standaloneCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public YieldItems createYieldItems()
  {
    YieldItemsImpl yieldItems = new YieldItemsImpl();
    return yieldItems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public YieldItem createYieldItem()
  {
    YieldItemImpl yieldItem = new YieldItemImpl();
    return yieldItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public With createWith()
  {
    WithImpl with = new WithImpl();
    return with;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Return createReturn()
  {
    ReturnImpl return_ = new ReturnImpl();
    return return_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnBody createReturnBody()
  {
    ReturnBodyImpl returnBody = new ReturnBodyImpl();
    return returnBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnItems createReturnItems()
  {
    ReturnItemsImpl returnItems = new ReturnItemsImpl();
    return returnItems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnItem createReturnItem()
  {
    ReturnItemImpl returnItem = new ReturnItemImpl();
    return returnItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Order createOrder()
  {
    OrderImpl order = new OrderImpl();
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Skip createSkip()
  {
    SkipImpl skip = new SkipImpl();
    return skip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Limit createLimit()
  {
    LimitImpl limit = new LimitImpl();
    return limit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SortItem createSortItem()
  {
    SortItemImpl sortItem = new SortItemImpl();
    return sortItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Hint createHint()
  {
    HintImpl hint = new HintImpl();
    return hint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Start createStart()
  {
    StartImpl start = new StartImpl();
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartPoint createStartPoint()
  {
    StartPointImpl startPoint = new StartPointImpl();
    return startPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lookup createLookup()
  {
    LookupImpl lookup = new LookupImpl();
    return lookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeLookup createNodeLookup()
  {
    NodeLookupImpl nodeLookup = new NodeLookupImpl();
    return nodeLookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipLookup createRelationshipLookup()
  {
    RelationshipLookupImpl relationshipLookup = new RelationshipLookupImpl();
    return relationshipLookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdentifiedIndexLookup createIdentifiedIndexLookup()
  {
    IdentifiedIndexLookupImpl identifiedIndexLookup = new IdentifiedIndexLookupImpl();
    return identifiedIndexLookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexQuery createIndexQuery()
  {
    IndexQueryImpl indexQuery = new IndexQueryImpl();
    return indexQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdLookup createIdLookup()
  {
    IdLookupImpl idLookup = new IdLookupImpl();
    return idLookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralIds createLiteralIds()
  {
    LiteralIdsImpl literalIds = new LiteralIdsImpl();
    return literalIds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Where createWhere()
  {
    WhereImpl where = new WhereImpl();
    return where;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternPart createPatternPart()
  {
    PatternPartImpl patternPart = new PatternPartImpl();
    return patternPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnonymousPatternPart createAnonymousPatternPart()
  {
    AnonymousPatternPartImpl anonymousPatternPart = new AnonymousPatternPartImpl();
    return anonymousPatternPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortestPathPattern createShortestPathPattern()
  {
    ShortestPathPatternImpl shortestPathPattern = new ShortestPathPatternImpl();
    return shortestPathPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternElement createPatternElement()
  {
    PatternElementImpl patternElement = new PatternElementImpl();
    return patternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodePattern createNodePattern()
  {
    NodePatternImpl nodePattern = new NodePatternImpl();
    return nodePattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternElementChain createPatternElementChain()
  {
    PatternElementChainImpl patternElementChain = new PatternElementChainImpl();
    return patternElementChain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipPattern createRelationshipPattern()
  {
    RelationshipPatternImpl relationshipPattern = new RelationshipPatternImpl();
    return relationshipPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipDetail createRelationshipDetail()
  {
    RelationshipDetailImpl relationshipDetail = new RelationshipDetailImpl();
    return relationshipDetail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Properties createProperties()
  {
    PropertiesImpl properties = new PropertiesImpl();
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipTypes createRelationshipTypes()
  {
    RelationshipTypesImpl relationshipTypes = new RelationshipTypesImpl();
    return relationshipTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeLabels createNodeLabels()
  {
    NodeLabelsImpl nodeLabels = new NodeLabelsImpl();
    return nodeLabels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeLabel createNodeLabel()
  {
    NodeLabelImpl nodeLabel = new NodeLabelImpl();
    return nodeLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RangeLiteral createRangeLiteral()
  {
    RangeLiteralImpl rangeLiteral = new RangeLiteralImpl();
    return rangeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListLiteral createListLiteral()
  {
    ListLiteralImpl listLiteral = new ListLiteralImpl();
    return listLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reduce createReduce()
  {
    ReduceImpl reduce = new ReduceImpl();
    return reduce;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParenthesizedExpression createParenthesizedExpression()
  {
    ParenthesizedExpressionImpl parenthesizedExpression = new ParenthesizedExpressionImpl();
    return parenthesizedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipsPattern createRelationshipsPattern()
  {
    RelationshipsPatternImpl relationshipsPattern = new RelationshipsPatternImpl();
    return relationshipsPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterExpression createFilterExpression()
  {
    FilterExpressionImpl filterExpression = new FilterExpressionImpl();
    return filterExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdInColl createIdInColl()
  {
    IdInCollImpl idInColl = new IdInCollImpl();
    return idInColl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionInvocation createFunctionInvocation()
  {
    FunctionInvocationImpl functionInvocation = new FunctionInvocationImpl();
    return functionInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExplicitProcedureInvocation createExplicitProcedureInvocation()
  {
    ExplicitProcedureInvocationImpl explicitProcedureInvocation = new ExplicitProcedureInvocationImpl();
    return explicitProcedureInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImplicitProcedureInvocation createImplicitProcedureInvocation()
  {
    ImplicitProcedureInvocationImpl implicitProcedureInvocation = new ImplicitProcedureInvocationImpl();
    return implicitProcedureInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcedureName createProcedureName()
  {
    ProcedureNameImpl procedureName = new ProcedureNameImpl();
    return procedureName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListComprehension createListComprehension()
  {
    ListComprehensionImpl listComprehension = new ListComprehensionImpl();
    return listComprehension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternComprehension createPatternComprehension()
  {
    PatternComprehensionImpl patternComprehension = new PatternComprehensionImpl();
    return patternComprehension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyLookup createPropertyLookup()
  {
    PropertyLookupImpl propertyLookup = new PropertyLookupImpl();
    return propertyLookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseExpression createCaseExpression()
  {
    CaseExpressionImpl caseExpression = new CaseExpressionImpl();
    return caseExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseAlternatives createCaseAlternatives()
  {
    CaseAlternativesImpl caseAlternatives = new CaseAlternativesImpl();
    return caseAlternatives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapLiteral createMapLiteral()
  {
    MapLiteralImpl mapLiteral = new MapLiteralImpl();
    return mapLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapLiteralEntry createMapLiteralEntry()
  {
    MapLiteralEntryImpl mapLiteralEntry = new MapLiteralEntryImpl();
    return mapLiteralEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LegacyParameter createLegacyParameter()
  {
    LegacyParameterImpl legacyParameter = new LegacyParameterImpl();
    return legacyParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyExpression createPropertyExpression()
  {
    PropertyExpressionImpl propertyExpression = new PropertyExpressionImpl();
    return propertyExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecimalInteger createDecimalInteger()
  {
    DecimalIntegerImpl decimalInteger = new DecimalIntegerImpl();
    return decimalInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllOptions createAllOptions()
  {
    AllOptionsImpl allOptions = new AllOptionsImpl();
    return allOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CombinedQuery createCombinedQuery()
  {
    CombinedQueryImpl combinedQuery = new CombinedQueryImpl();
    return combinedQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveItemLabel createRemoveItemLabel()
  {
    RemoveItemLabelImpl removeItemLabel = new RemoveItemLabelImpl();
    return removeItemLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveItemProperty createRemoveItemProperty()
  {
    RemoveItemPropertyImpl removeItemProperty = new RemoveItemPropertyImpl();
    return removeItemProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexHint createIndexHint()
  {
    IndexHintImpl indexHint = new IndexHintImpl();
    return indexHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinHint createJoinHint()
  {
    JoinHintImpl joinHint = new JoinHintImpl();
    return joinHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScanHint createScanHint()
  {
    ScanHintImpl scanHint = new ScanHintImpl();
    return scanHint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortestPath createShortestPath()
  {
    ShortestPathImpl shortestPath = new ShortestPathImpl();
    return shortestPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllShortestPaths createAllShortestPaths()
  {
    AllShortestPathsImpl allShortestPaths = new AllShortestPathsImpl();
    return allShortestPaths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XorExpression createXorExpression()
  {
    XorExpressionImpl xorExpression = new XorExpressionImpl();
    return xorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddOrSubtractExpression createAddOrSubtractExpression()
  {
    AddOrSubtractExpressionImpl addOrSubtractExpression = new AddOrSubtractExpressionImpl();
    return addOrSubtractExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplyDivideModuloExpression createMultiplyDivideModuloExpression()
  {
    MultiplyDivideModuloExpressionImpl multiplyDivideModuloExpression = new MultiplyDivideModuloExpressionImpl();
    return multiplyDivideModuloExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PowerOfExpression createPowerOfExpression()
  {
    PowerOfExpressionImpl powerOfExpression = new PowerOfExpressionImpl();
    return powerOfExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryAddOrSubtractExpression createUnaryAddOrSubtractExpression()
  {
    UnaryAddOrSubtractExpressionImpl unaryAddOrSubtractExpression = new UnaryAddOrSubtractExpressionImpl();
    return unaryAddOrSubtractExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringListNullOperatorExpression createStringListNullOperatorExpression()
  {
    StringListNullOperatorExpressionImpl stringListNullOperatorExpression = new StringListNullOperatorExpressionImpl();
    return stringListNullOperatorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexLookupExpression createIndexLookupExpression()
  {
    IndexLookupExpressionImpl indexLookupExpression = new IndexLookupExpressionImpl();
    return indexLookupExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexRangeExpression createIndexRangeExpression()
  {
    IndexRangeExpressionImpl indexRangeExpression = new IndexRangeExpressionImpl();
    return indexRangeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegExpMatchingExpression createRegExpMatchingExpression()
  {
    RegExpMatchingExpressionImpl regExpMatchingExpression = new RegExpMatchingExpressionImpl();
    return regExpMatchingExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InCollectionExpression createInCollectionExpression()
  {
    InCollectionExpressionImpl inCollectionExpression = new InCollectionExpressionImpl();
    return inCollectionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartsWithExpression createStartsWithExpression()
  {
    StartsWithExpressionImpl startsWithExpression = new StartsWithExpressionImpl();
    return startsWithExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndsWithExpression createEndsWithExpression()
  {
    EndsWithExpressionImpl endsWithExpression = new EndsWithExpressionImpl();
    return endsWithExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainsExpression createContainsExpression()
  {
    ContainsExpressionImpl containsExpression = new ContainsExpressionImpl();
    return containsExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsNullExpression createIsNullExpression()
  {
    IsNullExpressionImpl isNullExpression = new IsNullExpressionImpl();
    return isNullExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsNotNullExpression createIsNotNullExpression()
  {
    IsNotNullExpressionImpl isNotNullExpression = new IsNotNullExpressionImpl();
    return isNotNullExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyLookupExpression createPropertyLookupExpression()
  {
    PropertyLookupExpressionImpl propertyLookupExpression = new PropertyLookupExpressionImpl();
    return propertyLookupExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeLabelsExpression createNodeLabelsExpression()
  {
    NodeLabelsExpressionImpl nodeLabelsExpression = new NodeLabelsExpressionImpl();
    return nodeLabelsExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Count createCount()
  {
    CountImpl count = new CountImpl();
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Extract createExtract()
  {
    ExtractImpl extract = new ExtractImpl();
    return extract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public All createAll()
  {
    AllImpl all = new AllImpl();
    return all;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Any createAny()
  {
    AnyImpl any = new AnyImpl();
    return any;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public None createNone()
  {
    NoneImpl none = new NoneImpl();
    return none;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Single createSingle()
  {
    SingleImpl single = new SingleImpl();
    return single;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableRef createVariableRef()
  {
    VariableRefImpl variableRef = new VariableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NULL createNULL()
  {
    NULLImpl null_ = new NULLImpl();
    return null_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CypherPackage getCypherPackage()
  {
    return (CypherPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CypherPackage getPackage()
  {
    return CypherPackage.eINSTANCE;
  }

} //CypherFactoryImpl
