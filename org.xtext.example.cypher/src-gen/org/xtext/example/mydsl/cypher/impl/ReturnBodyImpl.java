/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.cypher.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.cypher.CypherPackage;
import org.xtext.example.mydsl.cypher.Limit;
import org.xtext.example.mydsl.cypher.Order;
import org.xtext.example.mydsl.cypher.ReturnBody;
import org.xtext.example.mydsl.cypher.ReturnItems;
import org.xtext.example.mydsl.cypher.Skip;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Return Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.ReturnBodyImpl#isDistinct <em>Distinct</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.ReturnBodyImpl#getReturnItems <em>Return Items</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.ReturnBodyImpl#getOrder <em>Order</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.ReturnBodyImpl#getSkip <em>Skip</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.cypher.impl.ReturnBodyImpl#getLimit <em>Limit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReturnBodyImpl extends MinimalEObjectImpl.Container implements ReturnBody
{
  /**
   * The default value of the '{@link #isDistinct() <em>Distinct</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistinct()
   * @generated
   * @ordered
   */
  protected static final boolean DISTINCT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistinct() <em>Distinct</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistinct()
   * @generated
   * @ordered
   */
  protected boolean distinct = DISTINCT_EDEFAULT;

  /**
   * The cached value of the '{@link #getReturnItems() <em>Return Items</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnItems()
   * @generated
   * @ordered
   */
  protected ReturnItems returnItems;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected Order order;

  /**
   * The cached value of the '{@link #getSkip() <em>Skip</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSkip()
   * @generated
   * @ordered
   */
  protected Skip skip;

  /**
   * The cached value of the '{@link #getLimit() <em>Limit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLimit()
   * @generated
   * @ordered
   */
  protected Limit limit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReturnBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CypherPackage.Literals.RETURN_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDistinct()
  {
    return distinct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistinct(boolean newDistinct)
  {
    boolean oldDistinct = distinct;
    distinct = newDistinct;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__DISTINCT, oldDistinct, distinct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnItems getReturnItems()
  {
    return returnItems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnItems(ReturnItems newReturnItems, NotificationChain msgs)
  {
    ReturnItems oldReturnItems = returnItems;
    returnItems = newReturnItems;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__RETURN_ITEMS, oldReturnItems, newReturnItems);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnItems(ReturnItems newReturnItems)
  {
    if (newReturnItems != returnItems)
    {
      NotificationChain msgs = null;
      if (returnItems != null)
        msgs = ((InternalEObject)returnItems).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__RETURN_ITEMS, null, msgs);
      if (newReturnItems != null)
        msgs = ((InternalEObject)newReturnItems).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__RETURN_ITEMS, null, msgs);
      msgs = basicSetReturnItems(newReturnItems, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__RETURN_ITEMS, newReturnItems, newReturnItems));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Order getOrder()
  {
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrder(Order newOrder, NotificationChain msgs)
  {
    Order oldOrder = order;
    order = newOrder;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__ORDER, oldOrder, newOrder);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrder(Order newOrder)
  {
    if (newOrder != order)
    {
      NotificationChain msgs = null;
      if (order != null)
        msgs = ((InternalEObject)order).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__ORDER, null, msgs);
      if (newOrder != null)
        msgs = ((InternalEObject)newOrder).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__ORDER, null, msgs);
      msgs = basicSetOrder(newOrder, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__ORDER, newOrder, newOrder));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Skip getSkip()
  {
    return skip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSkip(Skip newSkip, NotificationChain msgs)
  {
    Skip oldSkip = skip;
    skip = newSkip;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__SKIP, oldSkip, newSkip);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSkip(Skip newSkip)
  {
    if (newSkip != skip)
    {
      NotificationChain msgs = null;
      if (skip != null)
        msgs = ((InternalEObject)skip).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__SKIP, null, msgs);
      if (newSkip != null)
        msgs = ((InternalEObject)newSkip).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__SKIP, null, msgs);
      msgs = basicSetSkip(newSkip, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__SKIP, newSkip, newSkip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Limit getLimit()
  {
    return limit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLimit(Limit newLimit, NotificationChain msgs)
  {
    Limit oldLimit = limit;
    limit = newLimit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__LIMIT, oldLimit, newLimit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLimit(Limit newLimit)
  {
    if (newLimit != limit)
    {
      NotificationChain msgs = null;
      if (limit != null)
        msgs = ((InternalEObject)limit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__LIMIT, null, msgs);
      if (newLimit != null)
        msgs = ((InternalEObject)newLimit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CypherPackage.RETURN_BODY__LIMIT, null, msgs);
      msgs = basicSetLimit(newLimit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CypherPackage.RETURN_BODY__LIMIT, newLimit, newLimit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CypherPackage.RETURN_BODY__RETURN_ITEMS:
        return basicSetReturnItems(null, msgs);
      case CypherPackage.RETURN_BODY__ORDER:
        return basicSetOrder(null, msgs);
      case CypherPackage.RETURN_BODY__SKIP:
        return basicSetSkip(null, msgs);
      case CypherPackage.RETURN_BODY__LIMIT:
        return basicSetLimit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CypherPackage.RETURN_BODY__DISTINCT:
        return isDistinct();
      case CypherPackage.RETURN_BODY__RETURN_ITEMS:
        return getReturnItems();
      case CypherPackage.RETURN_BODY__ORDER:
        return getOrder();
      case CypherPackage.RETURN_BODY__SKIP:
        return getSkip();
      case CypherPackage.RETURN_BODY__LIMIT:
        return getLimit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CypherPackage.RETURN_BODY__DISTINCT:
        setDistinct((Boolean)newValue);
        return;
      case CypherPackage.RETURN_BODY__RETURN_ITEMS:
        setReturnItems((ReturnItems)newValue);
        return;
      case CypherPackage.RETURN_BODY__ORDER:
        setOrder((Order)newValue);
        return;
      case CypherPackage.RETURN_BODY__SKIP:
        setSkip((Skip)newValue);
        return;
      case CypherPackage.RETURN_BODY__LIMIT:
        setLimit((Limit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CypherPackage.RETURN_BODY__DISTINCT:
        setDistinct(DISTINCT_EDEFAULT);
        return;
      case CypherPackage.RETURN_BODY__RETURN_ITEMS:
        setReturnItems((ReturnItems)null);
        return;
      case CypherPackage.RETURN_BODY__ORDER:
        setOrder((Order)null);
        return;
      case CypherPackage.RETURN_BODY__SKIP:
        setSkip((Skip)null);
        return;
      case CypherPackage.RETURN_BODY__LIMIT:
        setLimit((Limit)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CypherPackage.RETURN_BODY__DISTINCT:
        return distinct != DISTINCT_EDEFAULT;
      case CypherPackage.RETURN_BODY__RETURN_ITEMS:
        return returnItems != null;
      case CypherPackage.RETURN_BODY__ORDER:
        return order != null;
      case CypherPackage.RETURN_BODY__SKIP:
        return skip != null;
      case CypherPackage.RETURN_BODY__LIMIT:
        return limit != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (distinct: ");
    result.append(distinct);
    result.append(')');
    return result.toString();
  }

} //ReturnBodyImpl
