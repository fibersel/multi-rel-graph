/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.cypher.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.cypher.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.cypher.CypherPackage
 * @generated
 */
public class CypherSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CypherPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CypherSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = CypherPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case CypherPackage.CYPHER:
      {
        Cypher cypher = (Cypher)theEObject;
        T result = caseCypher(cypher);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.QUERY_OPTIONS:
      {
        QueryOptions queryOptions = (QueryOptions)theEObject;
        T result = caseQueryOptions(queryOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CYPHER_OPTION:
      {
        CypherOption cypherOption = (CypherOption)theEObject;
        T result = caseCypherOption(cypherOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.VERSION_NUMBER:
      {
        VersionNumber versionNumber = (VersionNumber)theEObject;
        T result = caseVersionNumber(versionNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CONFIGURATION_OPTION:
      {
        ConfigurationOption configurationOption = (ConfigurationOption)theEObject;
        T result = caseConfigurationOption(configurationOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = caseStatement(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REGULAR_QUERY:
      {
        RegularQuery regularQuery = (RegularQuery)theEObject;
        T result = caseRegularQuery(regularQuery);
        if (result == null) result = caseQuery(regularQuery);
        if (result == null) result = caseStatement(regularQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.BULK_IMPORT_QUERY:
      {
        BulkImportQuery bulkImportQuery = (BulkImportQuery)theEObject;
        T result = caseBulkImportQuery(bulkImportQuery);
        if (result == null) result = caseQuery(bulkImportQuery);
        if (result == null) result = caseStatement(bulkImportQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PERIODIC_COMMIT_HINT:
      {
        PeriodicCommitHint periodicCommitHint = (PeriodicCommitHint)theEObject;
        T result = casePeriodicCommitHint(periodicCommitHint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LOAD_CSV_QUERY:
      {
        LoadCSVQuery loadCSVQuery = (LoadCSVQuery)theEObject;
        T result = caseLoadCSVQuery(loadCSVQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.UNION:
      {
        Union union = (Union)theEObject;
        T result = caseUnion(union);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SINGLE_QUERY:
      {
        SingleQuery singleQuery = (SingleQuery)theEObject;
        T result = caseSingleQuery(singleQuery);
        if (result == null) result = caseRegularQuery(singleQuery);
        if (result == null) result = caseQuery(singleQuery);
        if (result == null) result = caseStatement(singleQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SINGLE_PART_QUERY:
      {
        SinglePartQuery singlePartQuery = (SinglePartQuery)theEObject;
        T result = caseSinglePartQuery(singlePartQuery);
        if (result == null) result = caseSingleQuery(singlePartQuery);
        if (result == null) result = caseRegularQuery(singlePartQuery);
        if (result == null) result = caseQuery(singlePartQuery);
        if (result == null) result = caseStatement(singlePartQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MULTI_PART_QUERY:
      {
        MultiPartQuery multiPartQuery = (MultiPartQuery)theEObject;
        T result = caseMultiPartQuery(multiPartQuery);
        if (result == null) result = caseSingleQuery(multiPartQuery);
        if (result == null) result = caseRegularQuery(multiPartQuery);
        if (result == null) result = caseQuery(multiPartQuery);
        if (result == null) result = caseStatement(multiPartQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MULTI_PART_SUB_QUERY:
      {
        MultiPartSubQuery multiPartSubQuery = (MultiPartSubQuery)theEObject;
        T result = caseMultiPartSubQuery(multiPartSubQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CLAUSE:
      {
        Clause clause = (Clause)theEObject;
        T result = caseClause(clause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.UPDATING_CLAUSE:
      {
        UpdatingClause updatingClause = (UpdatingClause)theEObject;
        T result = caseUpdatingClause(updatingClause);
        if (result == null) result = caseClause(updatingClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.READING_CLAUSE:
      {
        ReadingClause readingClause = (ReadingClause)theEObject;
        T result = caseReadingClause(readingClause);
        if (result == null) result = caseClause(readingClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.COMMAND:
      {
        Command command = (Command)theEObject;
        T result = caseCommand(command);
        if (result == null) result = caseStatement(command);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CREATE_UNIQUE_CONSTRAINT:
      {
        CreateUniqueConstraint createUniqueConstraint = (CreateUniqueConstraint)theEObject;
        T result = caseCreateUniqueConstraint(createUniqueConstraint);
        if (result == null) result = caseCommand(createUniqueConstraint);
        if (result == null) result = caseStatement(createUniqueConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CREATE_NODE_PROPERTY_EXISTENCE_CONSTRAINT:
      {
        CreateNodePropertyExistenceConstraint createNodePropertyExistenceConstraint = (CreateNodePropertyExistenceConstraint)theEObject;
        T result = caseCreateNodePropertyExistenceConstraint(createNodePropertyExistenceConstraint);
        if (result == null) result = caseCommand(createNodePropertyExistenceConstraint);
        if (result == null) result = caseStatement(createNodePropertyExistenceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CREATE_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT:
      {
        CreateRelationshipPropertyExistenceConstraint createRelationshipPropertyExistenceConstraint = (CreateRelationshipPropertyExistenceConstraint)theEObject;
        T result = caseCreateRelationshipPropertyExistenceConstraint(createRelationshipPropertyExistenceConstraint);
        if (result == null) result = caseCommand(createRelationshipPropertyExistenceConstraint);
        if (result == null) result = caseStatement(createRelationshipPropertyExistenceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CREATE_INDEX:
      {
        CreateIndex createIndex = (CreateIndex)theEObject;
        T result = caseCreateIndex(createIndex);
        if (result == null) result = caseCommand(createIndex);
        if (result == null) result = caseStatement(createIndex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.DROP_UNIQUE_CONSTRAINT:
      {
        DropUniqueConstraint dropUniqueConstraint = (DropUniqueConstraint)theEObject;
        T result = caseDropUniqueConstraint(dropUniqueConstraint);
        if (result == null) result = caseCommand(dropUniqueConstraint);
        if (result == null) result = caseStatement(dropUniqueConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.DROP_NODE_PROPERTY_EXISTENCE_CONSTRAINT:
      {
        DropNodePropertyExistenceConstraint dropNodePropertyExistenceConstraint = (DropNodePropertyExistenceConstraint)theEObject;
        T result = caseDropNodePropertyExistenceConstraint(dropNodePropertyExistenceConstraint);
        if (result == null) result = caseCommand(dropNodePropertyExistenceConstraint);
        if (result == null) result = caseStatement(dropNodePropertyExistenceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.DROP_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT:
      {
        DropRelationshipPropertyExistenceConstraint dropRelationshipPropertyExistenceConstraint = (DropRelationshipPropertyExistenceConstraint)theEObject;
        T result = caseDropRelationshipPropertyExistenceConstraint(dropRelationshipPropertyExistenceConstraint);
        if (result == null) result = caseCommand(dropRelationshipPropertyExistenceConstraint);
        if (result == null) result = caseStatement(dropRelationshipPropertyExistenceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.DROP_INDEX:
      {
        DropIndex dropIndex = (DropIndex)theEObject;
        T result = caseDropIndex(dropIndex);
        if (result == null) result = caseCommand(dropIndex);
        if (result == null) result = caseStatement(dropIndex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.INDEX:
      {
        Index index = (Index)theEObject;
        T result = caseIndex(index);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.UNIQUE_CONSTRAINT:
      {
        UniqueConstraint uniqueConstraint = (UniqueConstraint)theEObject;
        T result = caseUniqueConstraint(uniqueConstraint);
        if (result == null) result = caseCreateUniqueConstraint(uniqueConstraint);
        if (result == null) result = caseCommand(uniqueConstraint);
        if (result == null) result = caseStatement(uniqueConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NODE_PROPERTY_EXISTENCE_CONSTRAINT:
      {
        NodePropertyExistenceConstraint nodePropertyExistenceConstraint = (NodePropertyExistenceConstraint)theEObject;
        T result = caseNodePropertyExistenceConstraint(nodePropertyExistenceConstraint);
        if (result == null) result = caseCreateNodePropertyExistenceConstraint(nodePropertyExistenceConstraint);
        if (result == null) result = caseCommand(nodePropertyExistenceConstraint);
        if (result == null) result = caseStatement(nodePropertyExistenceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT:
      {
        RelationshipPropertyExistenceConstraint relationshipPropertyExistenceConstraint = (RelationshipPropertyExistenceConstraint)theEObject;
        T result = caseRelationshipPropertyExistenceConstraint(relationshipPropertyExistenceConstraint);
        if (result == null) result = caseCreateRelationshipPropertyExistenceConstraint(relationshipPropertyExistenceConstraint);
        if (result == null) result = caseCommand(relationshipPropertyExistenceConstraint);
        if (result == null) result = caseStatement(relationshipPropertyExistenceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIP_PATTERN_SYNTAX:
      {
        RelationshipPatternSyntax relationshipPatternSyntax = (RelationshipPatternSyntax)theEObject;
        T result = caseRelationshipPatternSyntax(relationshipPatternSyntax);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LOAD_CSV:
      {
        LoadCSV loadCSV = (LoadCSV)theEObject;
        T result = caseLoadCSV(loadCSV);
        if (result == null) result = caseReadingClause(loadCSV);
        if (result == null) result = caseClause(loadCSV);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MATCH:
      {
        Match match = (Match)theEObject;
        T result = caseMatch(match);
        if (result == null) result = caseReadingClause(match);
        if (result == null) result = caseClause(match);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.UNWIND:
      {
        Unwind unwind = (Unwind)theEObject;
        T result = caseUnwind(unwind);
        if (result == null) result = caseReadingClause(unwind);
        if (result == null) result = caseClause(unwind);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MERGE:
      {
        Merge merge = (Merge)theEObject;
        T result = caseMerge(merge);
        if (result == null) result = caseUpdatingClause(merge);
        if (result == null) result = caseClause(merge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MERGE_ACTION:
      {
        MergeAction mergeAction = (MergeAction)theEObject;
        T result = caseMergeAction(mergeAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CREATE:
      {
        Create create = (Create)theEObject;
        T result = caseCreate(create);
        if (result == null) result = caseUpdatingClause(create);
        if (result == null) result = caseClause(create);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SET:
      {
        Set set = (Set)theEObject;
        T result = caseSet(set);
        if (result == null) result = caseUpdatingClause(set);
        if (result == null) result = caseClause(set);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SET_ITEM:
      {
        SetItem setItem = (SetItem)theEObject;
        T result = caseSetItem(setItem);
        if (result == null) result = caseNodeLabels(setItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.DELETE:
      {
        Delete delete = (Delete)theEObject;
        T result = caseDelete(delete);
        if (result == null) result = caseUpdatingClause(delete);
        if (result == null) result = caseClause(delete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REMOVE:
      {
        Remove remove = (Remove)theEObject;
        T result = caseRemove(remove);
        if (result == null) result = caseUpdatingClause(remove);
        if (result == null) result = caseClause(remove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REMOVE_ITEM:
      {
        RemoveItem removeItem = (RemoveItem)theEObject;
        T result = caseRemoveItem(removeItem);
        if (result == null) result = caseNodeLabels(removeItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.FOREACH:
      {
        Foreach foreach = (Foreach)theEObject;
        T result = caseForeach(foreach);
        if (result == null) result = caseUpdatingClause(foreach);
        if (result == null) result = caseClause(foreach);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.IN_QUERY_CALL:
      {
        InQueryCall inQueryCall = (InQueryCall)theEObject;
        T result = caseInQueryCall(inQueryCall);
        if (result == null) result = caseReadingClause(inQueryCall);
        if (result == null) result = caseClause(inQueryCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.STANDALONE_CALL:
      {
        StandaloneCall standaloneCall = (StandaloneCall)theEObject;
        T result = caseStandaloneCall(standaloneCall);
        if (result == null) result = caseQuery(standaloneCall);
        if (result == null) result = caseStatement(standaloneCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.YIELD_ITEMS:
      {
        YieldItems yieldItems = (YieldItems)theEObject;
        T result = caseYieldItems(yieldItems);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.YIELD_ITEM:
      {
        YieldItem yieldItem = (YieldItem)theEObject;
        T result = caseYieldItem(yieldItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.WITH:
      {
        With with = (With)theEObject;
        T result = caseWith(with);
        if (result == null) result = caseClause(with);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RETURN:
      {
        Return return_ = (Return)theEObject;
        T result = caseReturn(return_);
        if (result == null) result = caseClause(return_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RETURN_BODY:
      {
        ReturnBody returnBody = (ReturnBody)theEObject;
        T result = caseReturnBody(returnBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RETURN_ITEMS:
      {
        ReturnItems returnItems = (ReturnItems)theEObject;
        T result = caseReturnItems(returnItems);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RETURN_ITEM:
      {
        ReturnItem returnItem = (ReturnItem)theEObject;
        T result = caseReturnItem(returnItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ORDER:
      {
        Order order = (Order)theEObject;
        T result = caseOrder(order);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SKIP:
      {
        Skip skip = (Skip)theEObject;
        T result = caseSkip(skip);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LIMIT:
      {
        Limit limit = (Limit)theEObject;
        T result = caseLimit(limit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SORT_ITEM:
      {
        SortItem sortItem = (SortItem)theEObject;
        T result = caseSortItem(sortItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.HINT:
      {
        Hint hint = (Hint)theEObject;
        T result = caseHint(hint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.START:
      {
        Start start = (Start)theEObject;
        T result = caseStart(start);
        if (result == null) result = caseReadingClause(start);
        if (result == null) result = caseClause(start);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.START_POINT:
      {
        StartPoint startPoint = (StartPoint)theEObject;
        T result = caseStartPoint(startPoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LOOKUP:
      {
        Lookup lookup = (Lookup)theEObject;
        T result = caseLookup(lookup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NODE_LOOKUP:
      {
        NodeLookup nodeLookup = (NodeLookup)theEObject;
        T result = caseNodeLookup(nodeLookup);
        if (result == null) result = caseLookup(nodeLookup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIP_LOOKUP:
      {
        RelationshipLookup relationshipLookup = (RelationshipLookup)theEObject;
        T result = caseRelationshipLookup(relationshipLookup);
        if (result == null) result = caseLookup(relationshipLookup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.IDENTIFIED_INDEX_LOOKUP:
      {
        IdentifiedIndexLookup identifiedIndexLookup = (IdentifiedIndexLookup)theEObject;
        T result = caseIdentifiedIndexLookup(identifiedIndexLookup);
        if (result == null) result = caseNodeLookup(identifiedIndexLookup);
        if (result == null) result = caseRelationshipLookup(identifiedIndexLookup);
        if (result == null) result = caseLookup(identifiedIndexLookup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.INDEX_QUERY:
      {
        IndexQuery indexQuery = (IndexQuery)theEObject;
        T result = caseIndexQuery(indexQuery);
        if (result == null) result = caseNodeLookup(indexQuery);
        if (result == null) result = caseRelationshipLookup(indexQuery);
        if (result == null) result = caseLookup(indexQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ID_LOOKUP:
      {
        IdLookup idLookup = (IdLookup)theEObject;
        T result = caseIdLookup(idLookup);
        if (result == null) result = caseNodeLookup(idLookup);
        if (result == null) result = caseRelationshipLookup(idLookup);
        if (result == null) result = caseLookup(idLookup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LITERAL_IDS:
      {
        LiteralIds literalIds = (LiteralIds)theEObject;
        T result = caseLiteralIds(literalIds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.WHERE:
      {
        Where where = (Where)theEObject;
        T result = caseWhere(where);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PATTERN_PART:
      {
        PatternPart patternPart = (PatternPart)theEObject;
        T result = casePatternPart(patternPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ANONYMOUS_PATTERN_PART:
      {
        AnonymousPatternPart anonymousPatternPart = (AnonymousPatternPart)theEObject;
        T result = caseAnonymousPatternPart(anonymousPatternPart);
        if (result == null) result = casePatternPart(anonymousPatternPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SHORTEST_PATH_PATTERN:
      {
        ShortestPathPattern shortestPathPattern = (ShortestPathPattern)theEObject;
        T result = caseShortestPathPattern(shortestPathPattern);
        if (result == null) result = caseAnonymousPatternPart(shortestPathPattern);
        if (result == null) result = caseExpression(shortestPathPattern);
        if (result == null) result = casePatternPart(shortestPathPattern);
        if (result == null) result = caseNodeLabels(shortestPathPattern);
        if (result == null) result = casePropertyExpression(shortestPathPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PATTERN_ELEMENT:
      {
        PatternElement patternElement = (PatternElement)theEObject;
        T result = casePatternElement(patternElement);
        if (result == null) result = caseAnonymousPatternPart(patternElement);
        if (result == null) result = casePatternPart(patternElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NODE_PATTERN:
      {
        NodePattern nodePattern = (NodePattern)theEObject;
        T result = caseNodePattern(nodePattern);
        if (result == null) result = caseNodeLabels(nodePattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PATTERN_ELEMENT_CHAIN:
      {
        PatternElementChain patternElementChain = (PatternElementChain)theEObject;
        T result = casePatternElementChain(patternElementChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIP_PATTERN:
      {
        RelationshipPattern relationshipPattern = (RelationshipPattern)theEObject;
        T result = caseRelationshipPattern(relationshipPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIP_DETAIL:
      {
        RelationshipDetail relationshipDetail = (RelationshipDetail)theEObject;
        T result = caseRelationshipDetail(relationshipDetail);
        if (result == null) result = caseRelationshipTypes(relationshipDetail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PROPERTIES:
      {
        Properties properties = (Properties)theEObject;
        T result = caseProperties(properties);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIP_TYPES:
      {
        RelationshipTypes relationshipTypes = (RelationshipTypes)theEObject;
        T result = caseRelationshipTypes(relationshipTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NODE_LABELS:
      {
        NodeLabels nodeLabels = (NodeLabels)theEObject;
        T result = caseNodeLabels(nodeLabels);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NODE_LABEL:
      {
        NodeLabel nodeLabel = (NodeLabel)theEObject;
        T result = caseNodeLabel(nodeLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RANGE_LITERAL:
      {
        RangeLiteral rangeLiteral = (RangeLiteral)theEObject;
        T result = caseRangeLiteral(rangeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseNodeLabels(expression);
        if (result == null) result = casePropertyExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseExpression(literal);
        if (result == null) result = caseNodeLabels(literal);
        if (result == null) result = casePropertyExpression(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.BOOLEAN_LITERAL:
      {
        BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
        T result = caseBooleanLiteral(booleanLiteral);
        if (result == null) result = caseLiteral(booleanLiteral);
        if (result == null) result = caseExpression(booleanLiteral);
        if (result == null) result = caseNodeLabels(booleanLiteral);
        if (result == null) result = casePropertyExpression(booleanLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LIST_LITERAL:
      {
        ListLiteral listLiteral = (ListLiteral)theEObject;
        T result = caseListLiteral(listLiteral);
        if (result == null) result = caseLiteral(listLiteral);
        if (result == null) result = caseExpression(listLiteral);
        if (result == null) result = caseNodeLabels(listLiteral);
        if (result == null) result = casePropertyExpression(listLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REDUCE:
      {
        Reduce reduce = (Reduce)theEObject;
        T result = caseReduce(reduce);
        if (result == null) result = caseExpression(reduce);
        if (result == null) result = caseNodeLabels(reduce);
        if (result == null) result = casePropertyExpression(reduce);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PARENTHESIZED_EXPRESSION:
      {
        ParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression)theEObject;
        T result = caseParenthesizedExpression(parenthesizedExpression);
        if (result == null) result = caseExpression(parenthesizedExpression);
        if (result == null) result = caseNodeLabels(parenthesizedExpression);
        if (result == null) result = casePropertyExpression(parenthesizedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.RELATIONSHIPS_PATTERN:
      {
        RelationshipsPattern relationshipsPattern = (RelationshipsPattern)theEObject;
        T result = caseRelationshipsPattern(relationshipsPattern);
        if (result == null) result = caseExpression(relationshipsPattern);
        if (result == null) result = caseNodeLabels(relationshipsPattern);
        if (result == null) result = casePropertyExpression(relationshipsPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.FILTER_EXPRESSION:
      {
        FilterExpression filterExpression = (FilterExpression)theEObject;
        T result = caseFilterExpression(filterExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ID_IN_COLL:
      {
        IdInColl idInColl = (IdInColl)theEObject;
        T result = caseIdInColl(idInColl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.FUNCTION_INVOCATION:
      {
        FunctionInvocation functionInvocation = (FunctionInvocation)theEObject;
        T result = caseFunctionInvocation(functionInvocation);
        if (result == null) result = caseExpression(functionInvocation);
        if (result == null) result = caseNodeLabels(functionInvocation);
        if (result == null) result = casePropertyExpression(functionInvocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.EXPLICIT_PROCEDURE_INVOCATION:
      {
        ExplicitProcedureInvocation explicitProcedureInvocation = (ExplicitProcedureInvocation)theEObject;
        T result = caseExplicitProcedureInvocation(explicitProcedureInvocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.IMPLICIT_PROCEDURE_INVOCATION:
      {
        ImplicitProcedureInvocation implicitProcedureInvocation = (ImplicitProcedureInvocation)theEObject;
        T result = caseImplicitProcedureInvocation(implicitProcedureInvocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PROCEDURE_NAME:
      {
        ProcedureName procedureName = (ProcedureName)theEObject;
        T result = caseProcedureName(procedureName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LIST_COMPREHENSION:
      {
        ListComprehension listComprehension = (ListComprehension)theEObject;
        T result = caseListComprehension(listComprehension);
        if (result == null) result = caseExpression(listComprehension);
        if (result == null) result = caseNodeLabels(listComprehension);
        if (result == null) result = casePropertyExpression(listComprehension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PATTERN_COMPREHENSION:
      {
        PatternComprehension patternComprehension = (PatternComprehension)theEObject;
        T result = casePatternComprehension(patternComprehension);
        if (result == null) result = caseExpression(patternComprehension);
        if (result == null) result = caseNodeLabels(patternComprehension);
        if (result == null) result = casePropertyExpression(patternComprehension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PROPERTY_LOOKUP:
      {
        PropertyLookup propertyLookup = (PropertyLookup)theEObject;
        T result = casePropertyLookup(propertyLookup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CASE_EXPRESSION:
      {
        CaseExpression caseExpression = (CaseExpression)theEObject;
        T result = caseCaseExpression(caseExpression);
        if (result == null) result = caseExpression(caseExpression);
        if (result == null) result = caseNodeLabels(caseExpression);
        if (result == null) result = casePropertyExpression(caseExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CASE_ALTERNATIVES:
      {
        CaseAlternatives caseAlternatives = (CaseAlternatives)theEObject;
        T result = caseCaseAlternatives(caseAlternatives);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseLiteral(stringLiteral);
        if (result == null) result = caseExpression(stringLiteral);
        if (result == null) result = caseNodeLabels(stringLiteral);
        if (result == null) result = casePropertyExpression(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NUMBER_LITERAL:
      {
        NumberLiteral numberLiteral = (NumberLiteral)theEObject;
        T result = caseNumberLiteral(numberLiteral);
        if (result == null) result = caseLiteral(numberLiteral);
        if (result == null) result = caseExpression(numberLiteral);
        if (result == null) result = caseNodeLabels(numberLiteral);
        if (result == null) result = casePropertyExpression(numberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MAP_LITERAL:
      {
        MapLiteral mapLiteral = (MapLiteral)theEObject;
        T result = caseMapLiteral(mapLiteral);
        if (result == null) result = caseProperties(mapLiteral);
        if (result == null) result = caseLiteral(mapLiteral);
        if (result == null) result = caseExpression(mapLiteral);
        if (result == null) result = caseNodeLabels(mapLiteral);
        if (result == null) result = casePropertyExpression(mapLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MAP_LITERAL_ENTRY:
      {
        MapLiteralEntry mapLiteralEntry = (MapLiteralEntry)theEObject;
        T result = caseMapLiteralEntry(mapLiteralEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.LEGACY_PARAMETER:
      {
        LegacyParameter legacyParameter = (LegacyParameter)theEObject;
        T result = caseLegacyParameter(legacyParameter);
        if (result == null) result = caseProperties(legacyParameter);
        if (result == null) result = caseExpression(legacyParameter);
        if (result == null) result = caseNodeLabels(legacyParameter);
        if (result == null) result = casePropertyExpression(legacyParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseProperties(parameter);
        if (result == null) result = caseExpression(parameter);
        if (result == null) result = caseNodeLabels(parameter);
        if (result == null) result = casePropertyExpression(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PROPERTY_EXPRESSION:
      {
        PropertyExpression propertyExpression = (PropertyExpression)theEObject;
        T result = casePropertyExpression(propertyExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.DECIMAL_INTEGER:
      {
        DecimalInteger decimalInteger = (DecimalInteger)theEObject;
        T result = caseDecimalInteger(decimalInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ALL_OPTIONS:
      {
        AllOptions allOptions = (AllOptions)theEObject;
        T result = caseAllOptions(allOptions);
        if (result == null) result = caseQueryOptions(allOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.COMBINED_QUERY:
      {
        CombinedQuery combinedQuery = (CombinedQuery)theEObject;
        T result = caseCombinedQuery(combinedQuery);
        if (result == null) result = caseRegularQuery(combinedQuery);
        if (result == null) result = caseQuery(combinedQuery);
        if (result == null) result = caseStatement(combinedQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REMOVE_ITEM_LABEL:
      {
        RemoveItemLabel removeItemLabel = (RemoveItemLabel)theEObject;
        T result = caseRemoveItemLabel(removeItemLabel);
        if (result == null) result = caseRemoveItem(removeItemLabel);
        if (result == null) result = caseNodeLabels(removeItemLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REMOVE_ITEM_PROPERTY:
      {
        RemoveItemProperty removeItemProperty = (RemoveItemProperty)theEObject;
        T result = caseRemoveItemProperty(removeItemProperty);
        if (result == null) result = caseRemoveItem(removeItemProperty);
        if (result == null) result = caseNodeLabels(removeItemProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.INDEX_HINT:
      {
        IndexHint indexHint = (IndexHint)theEObject;
        T result = caseIndexHint(indexHint);
        if (result == null) result = caseHint(indexHint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.JOIN_HINT:
      {
        JoinHint joinHint = (JoinHint)theEObject;
        T result = caseJoinHint(joinHint);
        if (result == null) result = caseHint(joinHint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SCAN_HINT:
      {
        ScanHint scanHint = (ScanHint)theEObject;
        T result = caseScanHint(scanHint);
        if (result == null) result = caseHint(scanHint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SHORTEST_PATH:
      {
        ShortestPath shortestPath = (ShortestPath)theEObject;
        T result = caseShortestPath(shortestPath);
        if (result == null) result = caseShortestPathPattern(shortestPath);
        if (result == null) result = caseAnonymousPatternPart(shortestPath);
        if (result == null) result = caseExpression(shortestPath);
        if (result == null) result = casePatternPart(shortestPath);
        if (result == null) result = caseNodeLabels(shortestPath);
        if (result == null) result = casePropertyExpression(shortestPath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ALL_SHORTEST_PATHS:
      {
        AllShortestPaths allShortestPaths = (AllShortestPaths)theEObject;
        T result = caseAllShortestPaths(allShortestPaths);
        if (result == null) result = caseShortestPathPattern(allShortestPaths);
        if (result == null) result = caseAnonymousPatternPart(allShortestPaths);
        if (result == null) result = caseExpression(allShortestPaths);
        if (result == null) result = casePatternPart(allShortestPaths);
        if (result == null) result = caseNodeLabels(allShortestPaths);
        if (result == null) result = casePropertyExpression(allShortestPaths);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.OR_EXPRESSION:
      {
        OrExpression orExpression = (OrExpression)theEObject;
        T result = caseOrExpression(orExpression);
        if (result == null) result = caseExpression(orExpression);
        if (result == null) result = caseNodeLabels(orExpression);
        if (result == null) result = casePropertyExpression(orExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.XOR_EXPRESSION:
      {
        XorExpression xorExpression = (XorExpression)theEObject;
        T result = caseXorExpression(xorExpression);
        if (result == null) result = caseExpression(xorExpression);
        if (result == null) result = caseNodeLabels(xorExpression);
        if (result == null) result = casePropertyExpression(xorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.AND_EXPRESSION:
      {
        AndExpression andExpression = (AndExpression)theEObject;
        T result = caseAndExpression(andExpression);
        if (result == null) result = caseExpression(andExpression);
        if (result == null) result = caseNodeLabels(andExpression);
        if (result == null) result = casePropertyExpression(andExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NOT_EXPRESSION:
      {
        NotExpression notExpression = (NotExpression)theEObject;
        T result = caseNotExpression(notExpression);
        if (result == null) result = caseExpression(notExpression);
        if (result == null) result = caseNodeLabels(notExpression);
        if (result == null) result = casePropertyExpression(notExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.COMPARISON_EXPRESSION:
      {
        ComparisonExpression comparisonExpression = (ComparisonExpression)theEObject;
        T result = caseComparisonExpression(comparisonExpression);
        if (result == null) result = caseExpression(comparisonExpression);
        if (result == null) result = caseNodeLabels(comparisonExpression);
        if (result == null) result = casePropertyExpression(comparisonExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ADD_OR_SUBTRACT_EXPRESSION:
      {
        AddOrSubtractExpression addOrSubtractExpression = (AddOrSubtractExpression)theEObject;
        T result = caseAddOrSubtractExpression(addOrSubtractExpression);
        if (result == null) result = caseExpression(addOrSubtractExpression);
        if (result == null) result = caseNodeLabels(addOrSubtractExpression);
        if (result == null) result = casePropertyExpression(addOrSubtractExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.MULTIPLY_DIVIDE_MODULO_EXPRESSION:
      {
        MultiplyDivideModuloExpression multiplyDivideModuloExpression = (MultiplyDivideModuloExpression)theEObject;
        T result = caseMultiplyDivideModuloExpression(multiplyDivideModuloExpression);
        if (result == null) result = caseExpression(multiplyDivideModuloExpression);
        if (result == null) result = caseNodeLabels(multiplyDivideModuloExpression);
        if (result == null) result = casePropertyExpression(multiplyDivideModuloExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.POWER_OF_EXPRESSION:
      {
        PowerOfExpression powerOfExpression = (PowerOfExpression)theEObject;
        T result = casePowerOfExpression(powerOfExpression);
        if (result == null) result = caseExpression(powerOfExpression);
        if (result == null) result = caseNodeLabels(powerOfExpression);
        if (result == null) result = casePropertyExpression(powerOfExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.UNARY_ADD_OR_SUBTRACT_EXPRESSION:
      {
        UnaryAddOrSubtractExpression unaryAddOrSubtractExpression = (UnaryAddOrSubtractExpression)theEObject;
        T result = caseUnaryAddOrSubtractExpression(unaryAddOrSubtractExpression);
        if (result == null) result = caseExpression(unaryAddOrSubtractExpression);
        if (result == null) result = caseNodeLabels(unaryAddOrSubtractExpression);
        if (result == null) result = casePropertyExpression(unaryAddOrSubtractExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.STRING_LIST_NULL_OPERATOR_EXPRESSION:
      {
        StringListNullOperatorExpression stringListNullOperatorExpression = (StringListNullOperatorExpression)theEObject;
        T result = caseStringListNullOperatorExpression(stringListNullOperatorExpression);
        if (result == null) result = caseExpression(stringListNullOperatorExpression);
        if (result == null) result = caseNodeLabels(stringListNullOperatorExpression);
        if (result == null) result = casePropertyExpression(stringListNullOperatorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.INDEX_LOOKUP_EXPRESSION:
      {
        IndexLookupExpression indexLookupExpression = (IndexLookupExpression)theEObject;
        T result = caseIndexLookupExpression(indexLookupExpression);
        if (result == null) result = caseExpression(indexLookupExpression);
        if (result == null) result = caseNodeLabels(indexLookupExpression);
        if (result == null) result = casePropertyExpression(indexLookupExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.INDEX_RANGE_EXPRESSION:
      {
        IndexRangeExpression indexRangeExpression = (IndexRangeExpression)theEObject;
        T result = caseIndexRangeExpression(indexRangeExpression);
        if (result == null) result = caseExpression(indexRangeExpression);
        if (result == null) result = caseNodeLabels(indexRangeExpression);
        if (result == null) result = casePropertyExpression(indexRangeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.REG_EXP_MATCHING_EXPRESSION:
      {
        RegExpMatchingExpression regExpMatchingExpression = (RegExpMatchingExpression)theEObject;
        T result = caseRegExpMatchingExpression(regExpMatchingExpression);
        if (result == null) result = caseExpression(regExpMatchingExpression);
        if (result == null) result = caseNodeLabels(regExpMatchingExpression);
        if (result == null) result = casePropertyExpression(regExpMatchingExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.IN_COLLECTION_EXPRESSION:
      {
        InCollectionExpression inCollectionExpression = (InCollectionExpression)theEObject;
        T result = caseInCollectionExpression(inCollectionExpression);
        if (result == null) result = caseExpression(inCollectionExpression);
        if (result == null) result = caseNodeLabels(inCollectionExpression);
        if (result == null) result = casePropertyExpression(inCollectionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.STARTS_WITH_EXPRESSION:
      {
        StartsWithExpression startsWithExpression = (StartsWithExpression)theEObject;
        T result = caseStartsWithExpression(startsWithExpression);
        if (result == null) result = caseExpression(startsWithExpression);
        if (result == null) result = caseNodeLabels(startsWithExpression);
        if (result == null) result = casePropertyExpression(startsWithExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ENDS_WITH_EXPRESSION:
      {
        EndsWithExpression endsWithExpression = (EndsWithExpression)theEObject;
        T result = caseEndsWithExpression(endsWithExpression);
        if (result == null) result = caseExpression(endsWithExpression);
        if (result == null) result = caseNodeLabels(endsWithExpression);
        if (result == null) result = casePropertyExpression(endsWithExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.CONTAINS_EXPRESSION:
      {
        ContainsExpression containsExpression = (ContainsExpression)theEObject;
        T result = caseContainsExpression(containsExpression);
        if (result == null) result = caseExpression(containsExpression);
        if (result == null) result = caseNodeLabels(containsExpression);
        if (result == null) result = casePropertyExpression(containsExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.IS_NULL_EXPRESSION:
      {
        IsNullExpression isNullExpression = (IsNullExpression)theEObject;
        T result = caseIsNullExpression(isNullExpression);
        if (result == null) result = caseExpression(isNullExpression);
        if (result == null) result = caseNodeLabels(isNullExpression);
        if (result == null) result = casePropertyExpression(isNullExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.IS_NOT_NULL_EXPRESSION:
      {
        IsNotNullExpression isNotNullExpression = (IsNotNullExpression)theEObject;
        T result = caseIsNotNullExpression(isNotNullExpression);
        if (result == null) result = caseExpression(isNotNullExpression);
        if (result == null) result = caseNodeLabels(isNotNullExpression);
        if (result == null) result = casePropertyExpression(isNotNullExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.PROPERTY_LOOKUP_EXPRESSION:
      {
        PropertyLookupExpression propertyLookupExpression = (PropertyLookupExpression)theEObject;
        T result = casePropertyLookupExpression(propertyLookupExpression);
        if (result == null) result = caseExpression(propertyLookupExpression);
        if (result == null) result = caseNodeLabels(propertyLookupExpression);
        if (result == null) result = casePropertyExpression(propertyLookupExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NODE_LABELS_EXPRESSION:
      {
        NodeLabelsExpression nodeLabelsExpression = (NodeLabelsExpression)theEObject;
        T result = caseNodeLabelsExpression(nodeLabelsExpression);
        if (result == null) result = caseExpression(nodeLabelsExpression);
        if (result == null) result = caseNodeLabels(nodeLabelsExpression);
        if (result == null) result = casePropertyExpression(nodeLabelsExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.COUNT:
      {
        Count count = (Count)theEObject;
        T result = caseCount(count);
        if (result == null) result = caseExpression(count);
        if (result == null) result = caseNodeLabels(count);
        if (result == null) result = casePropertyExpression(count);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.FILTER:
      {
        Filter filter = (Filter)theEObject;
        T result = caseFilter(filter);
        if (result == null) result = caseExpression(filter);
        if (result == null) result = caseNodeLabels(filter);
        if (result == null) result = casePropertyExpression(filter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.EXTRACT:
      {
        Extract extract = (Extract)theEObject;
        T result = caseExtract(extract);
        if (result == null) result = caseExpression(extract);
        if (result == null) result = caseNodeLabels(extract);
        if (result == null) result = casePropertyExpression(extract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ALL:
      {
        All all = (All)theEObject;
        T result = caseAll(all);
        if (result == null) result = caseExpression(all);
        if (result == null) result = caseNodeLabels(all);
        if (result == null) result = casePropertyExpression(all);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.ANY:
      {
        Any any = (Any)theEObject;
        T result = caseAny(any);
        if (result == null) result = caseExpression(any);
        if (result == null) result = caseNodeLabels(any);
        if (result == null) result = casePropertyExpression(any);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NONE:
      {
        None none = (None)theEObject;
        T result = caseNone(none);
        if (result == null) result = caseExpression(none);
        if (result == null) result = caseNodeLabels(none);
        if (result == null) result = casePropertyExpression(none);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.SINGLE:
      {
        Single single = (Single)theEObject;
        T result = caseSingle(single);
        if (result == null) result = caseExpression(single);
        if (result == null) result = caseNodeLabels(single);
        if (result == null) result = casePropertyExpression(single);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.VARIABLE_REF:
      {
        VariableRef variableRef = (VariableRef)theEObject;
        T result = caseVariableRef(variableRef);
        if (result == null) result = caseExpression(variableRef);
        if (result == null) result = caseNodeLabels(variableRef);
        if (result == null) result = casePropertyExpression(variableRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CypherPackage.NULL:
      {
        NULL null_ = (NULL)theEObject;
        T result = caseNULL(null_);
        if (result == null) result = caseLiteral(null_);
        if (result == null) result = caseExpression(null_);
        if (result == null) result = caseNodeLabels(null_);
        if (result == null) result = casePropertyExpression(null_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cypher</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cypher</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCypher(Cypher object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryOptions(QueryOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCypherOption(CypherOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Version Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Version Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVersionNumber(VersionNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Configuration Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Configuration Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfigurationOption(ConfigurationOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularQuery(RegularQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bulk Import Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bulk Import Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBulkImportQuery(BulkImportQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Periodic Commit Hint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Periodic Commit Hint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePeriodicCommitHint(PeriodicCommitHint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load CSV Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load CSV Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadCSVQuery(LoadCSVQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Union</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Union</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnion(Union object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleQuery(SingleQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Part Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Part Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSinglePartQuery(SinglePartQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Part Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Part Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiPartQuery(MultiPartQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Part Sub Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Part Sub Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiPartSubQuery(MultiPartSubQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClause(Clause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Updating Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Updating Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdatingClause(UpdatingClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reading Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reading Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadingClause(ReadingClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommand(Command object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Unique Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Unique Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateUniqueConstraint(CreateUniqueConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Node Property Existence Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Node Property Existence Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateNodePropertyExistenceConstraint(CreateNodePropertyExistenceConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Relationship Property Existence Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Relationship Property Existence Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateRelationshipPropertyExistenceConstraint(CreateRelationshipPropertyExistenceConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateIndex(CreateIndex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Unique Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Unique Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropUniqueConstraint(DropUniqueConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Node Property Existence Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Node Property Existence Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropNodePropertyExistenceConstraint(DropNodePropertyExistenceConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Relationship Property Existence Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Relationship Property Existence Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropRelationshipPropertyExistenceConstraint(DropRelationshipPropertyExistenceConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropIndex(DropIndex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndex(Index object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unique Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unique Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniqueConstraint(UniqueConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Property Existence Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Property Existence Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodePropertyExistenceConstraint(NodePropertyExistenceConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Property Existence Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Property Existence Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipPropertyExistenceConstraint(RelationshipPropertyExistenceConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Pattern Syntax</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Pattern Syntax</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipPatternSyntax(RelationshipPatternSyntax object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load CSV</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load CSV</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadCSV(LoadCSV object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Match</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Match</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatch(Match object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unwind</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unwind</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnwind(Unwind object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMerge(Merge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeAction(MergeAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreate(Create object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSet(Set object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetItem(SetItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelete(Delete object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemove(Remove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveItem(RemoveItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foreach</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foreach</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForeach(Foreach object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Query Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Query Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInQueryCall(InQueryCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standalone Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standalone Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandaloneCall(StandaloneCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Yield Items</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Yield Items</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYieldItems(YieldItems object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Yield Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Yield Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYieldItem(YieldItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>With</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>With</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWith(With object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturn(Return object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnBody(ReturnBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Items</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Items</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnItems(ReturnItems object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnItem(ReturnItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Order</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Order</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrder(Order object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Skip</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Skip</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSkip(Skip object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Limit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Limit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLimit(Limit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sort Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sort Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSortItem(SortItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHint(Hint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStart(Start object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartPoint(StartPoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lookup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lookup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLookup(Lookup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Lookup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Lookup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeLookup(NodeLookup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Lookup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Lookup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipLookup(RelationshipLookup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identified Index Lookup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identified Index Lookup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifiedIndexLookup(IdentifiedIndexLookup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexQuery(IndexQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id Lookup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id Lookup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdLookup(IdLookup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Ids</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Ids</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralIds(LiteralIds object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Where</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Where</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhere(Where object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternPart(PatternPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Anonymous Pattern Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Anonymous Pattern Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnonymousPatternPart(AnonymousPatternPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shortest Path Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shortest Path Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortestPathPattern(ShortestPathPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternElement(PatternElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodePattern(NodePattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Element Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Element Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternElementChain(PatternElementChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipPattern(RelationshipPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Detail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Detail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipDetail(RelationshipDetail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Properties</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Properties</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperties(Properties object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipTypes(RelationshipTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Labels</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Labels</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeLabels(NodeLabels object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeLabel(NodeLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeLiteral(RangeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteral(BooleanLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListLiteral(ListLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reduce</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reduce</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReduce(Reduce object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parenthesized Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parenthesized Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParenthesizedExpression(ParenthesizedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationships Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationships Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipsPattern(RelationshipsPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Filter Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Filter Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilterExpression(FilterExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id In Coll</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id In Coll</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdInColl(IdInColl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionInvocation(FunctionInvocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Explicit Procedure Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Explicit Procedure Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExplicitProcedureInvocation(ExplicitProcedureInvocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implicit Procedure Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implicit Procedure Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImplicitProcedureInvocation(ImplicitProcedureInvocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Procedure Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Procedure Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcedureName(ProcedureName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Comprehension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Comprehension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListComprehension(ListComprehension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Comprehension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Comprehension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternComprehension(PatternComprehension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Lookup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Lookup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyLookup(PropertyLookup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseExpression(CaseExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Alternatives</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Alternatives</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseAlternatives(CaseAlternatives object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteral(NumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteral(MapLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteralEntry(MapLiteralEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Legacy Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Legacy Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLegacyParameter(LegacyParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyExpression(PropertyExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decimal Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decimal Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecimalInteger(DecimalInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllOptions(AllOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Combined Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Combined Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCombinedQuery(CombinedQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Item Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Item Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveItemLabel(RemoveItemLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Item Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Item Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveItemProperty(RemoveItemProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Hint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Hint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexHint(IndexHint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Hint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Hint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinHint(JoinHint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scan Hint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scan Hint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScanHint(ScanHint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shortest Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shortest Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortestPath(ShortestPath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Shortest Paths</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Shortest Paths</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllShortestPaths(AllShortestPaths object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrExpression(OrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xor Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xor Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXorExpression(XorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndExpression(AndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotExpression(NotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonExpression(ComparisonExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Or Subtract Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Or Subtract Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddOrSubtractExpression(AddOrSubtractExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiply Divide Modulo Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiply Divide Modulo Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplyDivideModuloExpression(MultiplyDivideModuloExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power Of Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power Of Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowerOfExpression(PowerOfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Add Or Subtract Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Add Or Subtract Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryAddOrSubtractExpression(UnaryAddOrSubtractExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String List Null Operator Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String List Null Operator Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringListNullOperatorExpression(StringListNullOperatorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Lookup Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Lookup Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexLookupExpression(IndexLookupExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Range Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Range Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexRangeExpression(IndexRangeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reg Exp Matching Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reg Exp Matching Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegExpMatchingExpression(RegExpMatchingExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Collection Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Collection Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInCollectionExpression(InCollectionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Starts With Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Starts With Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartsWithExpression(StartsWithExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ends With Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ends With Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndsWithExpression(EndsWithExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contains Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contains Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContainsExpression(ContainsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Is Null Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Is Null Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIsNullExpression(IsNullExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Is Not Null Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Is Not Null Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIsNotNullExpression(IsNotNullExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Lookup Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Lookup Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyLookupExpression(PropertyLookupExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Labels Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Labels Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeLabelsExpression(NodeLabelsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCount(Count object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilter(Filter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtract(Extract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAll(All object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Any</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Any</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAny(Any object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>None</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>None</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNone(None object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingle(Single object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableRef(VariableRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NULL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NULL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNULL(NULL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //CypherSwitch
