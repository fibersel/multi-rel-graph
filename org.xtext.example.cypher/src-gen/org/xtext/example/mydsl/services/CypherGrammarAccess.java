/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CypherGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CypherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Cypher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCypherAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQueryOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryOptionsQueryOptionsParserRuleCall_1_0 = (RuleCall)cQueryOptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//// generate openCypher "http://www.codekontor.io/opencypher/xtext/OpenCypher"
		//Cypher:
		///*
		// * oC_Cypher : SP? oC_QueryOptions oC_Statement ( SP? ';' )? SP? EOF ;
		// */
		////    {Cypher} queryOptions=QueryOptions statement=Statement ';'?;
		//{Cypher} queryOptions=QueryOptions (statements+=Statement ';'?)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Cypher : SP? oC_QueryOptions oC_Statement ( SP? ';' )? SP? EOF ;
		// */
		////    {Cypher} queryOptions=QueryOptions statement=Statement ';'?;
		//{Cypher} queryOptions=QueryOptions (statements+=Statement ';'?)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Cypher : SP? oC_QueryOptions oC_Statement ( SP? ';' )? SP? EOF ;
		// */
		////    {Cypher} queryOptions=QueryOptions statement=Statement ';'?;
		//{Cypher}
		public Action getCypherAction_0() { return cCypherAction_0; }
		
		//queryOptions=QueryOptions
		public Assignment getQueryOptionsAssignment_1() { return cQueryOptionsAssignment_1; }
		
		//QueryOptions
		public RuleCall getQueryOptionsQueryOptionsParserRuleCall_1_0() { return cQueryOptionsQueryOptionsParserRuleCall_1_0; }
		
		//(statements+=Statement ';'?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class QueryOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.QueryOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAllOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cExplainAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cExplainEXPLAINKeyword_1_0_0 = (Keyword)cExplainAssignment_1_0.eContents().get(0);
		private final Assignment cProfileAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cProfilePROFILEKeyword_1_1_0 = (Keyword)cProfileAssignment_1_1.eContents().get(0);
		private final Assignment cCypherOptionAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cCypherOptionCypherOptionParserRuleCall_1_2_0 = (RuleCall)cCypherOptionAssignment_1_2.eContents().get(0);
		
		//QueryOptions:
		///*
		// * oC_QueryOptions : ( oC_AnyCypherOption SP? )* ;
		// * oC_AnyCypherOption : oC_CypherOption
		// *                    | oC_Explain
		// *                    | oC_Profile
		// *                    ;
		// * oC_Explain : EXPLAIN ;
		// * oC_Profile : PROFILE ;
		// */
		//    {AllOptions} (explain?='EXPLAIN'? & profile?='PROFILE'? & cypherOption+=CypherOption*);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_QueryOptions : ( oC_AnyCypherOption SP? )* ;
		// * oC_AnyCypherOption : oC_CypherOption
		// *                    | oC_Explain
		// *                    | oC_Profile
		// *                    ;
		// * oC_Explain : EXPLAIN ;
		// * oC_Profile : PROFILE ;
		// */
		//    {AllOptions} (explain?='EXPLAIN'? & profile?='PROFILE'? & cypherOption+=CypherOption*)
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_QueryOptions : ( oC_AnyCypherOption SP? )* ;
		// * oC_AnyCypherOption : oC_CypherOption
		// *                    | oC_Explain
		// *                    | oC_Profile
		// *                    ;
		// * oC_Explain : EXPLAIN ;
		// * oC_Profile : PROFILE ;
		// */
		//    {AllOptions}
		public Action getAllOptionsAction_0() { return cAllOptionsAction_0; }
		
		//(explain?='EXPLAIN'? & profile?='PROFILE'? & cypherOption+=CypherOption*)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//explain?='EXPLAIN'?
		public Assignment getExplainAssignment_1_0() { return cExplainAssignment_1_0; }
		
		//'EXPLAIN'
		public Keyword getExplainEXPLAINKeyword_1_0_0() { return cExplainEXPLAINKeyword_1_0_0; }
		
		//profile?='PROFILE'?
		public Assignment getProfileAssignment_1_1() { return cProfileAssignment_1_1; }
		
		//'PROFILE'
		public Keyword getProfilePROFILEKeyword_1_1_0() { return cProfilePROFILEKeyword_1_1_0; }
		
		//cypherOption+=CypherOption*
		public Assignment getCypherOptionAssignment_1_2() { return cCypherOptionAssignment_1_2; }
		
		//CypherOption
		public RuleCall getCypherOptionCypherOptionParserRuleCall_1_2_0() { return cCypherOptionCypherOptionParserRuleCall_1_2_0; }
	}
	public class CypherOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CypherOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCypherOptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCYPHERKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVersionNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionNumberVersionNumberParserRuleCall_2_0 = (RuleCall)cVersionNumberAssignment_2.eContents().get(0);
		private final Assignment cConfigurationOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigurationOptionConfigurationOptionParserRuleCall_3_0 = (RuleCall)cConfigurationOptionAssignment_3.eContents().get(0);
		
		//CypherOption:
		///*
		// * oC_CypherOption : CYPHER ( SP oC_VersionNumber )? ( SP oC_ConfigurationOption )* ;
		// */
		//    {CypherOption} 'CYPHER' (versionNumber=VersionNumber)? (configurationOption+=ConfigurationOption)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CypherOption : CYPHER ( SP oC_VersionNumber )? ( SP oC_ConfigurationOption )* ;
		// */
		//    {CypherOption} 'CYPHER' (versionNumber=VersionNumber)? (configurationOption+=ConfigurationOption)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CypherOption : CYPHER ( SP oC_VersionNumber )? ( SP oC_ConfigurationOption )* ;
		// */
		//    {CypherOption}
		public Action getCypherOptionAction_0() { return cCypherOptionAction_0; }
		
		//'CYPHER'
		public Keyword getCYPHERKeyword_1() { return cCYPHERKeyword_1; }
		
		//(versionNumber=VersionNumber)?
		public Assignment getVersionNumberAssignment_2() { return cVersionNumberAssignment_2; }
		
		//VersionNumber
		public RuleCall getVersionNumberVersionNumberParserRuleCall_2_0() { return cVersionNumberVersionNumberParserRuleCall_2_0; }
		
		//(configurationOption+=ConfigurationOption)*
		public Assignment getConfigurationOptionAssignment_3() { return cConfigurationOptionAssignment_3; }
		
		//ConfigurationOption
		public RuleCall getConfigurationOptionConfigurationOptionParserRuleCall_3_0() { return cConfigurationOptionConfigurationOptionParserRuleCall_3_0; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.VersionNumber");
		private final Assignment cVersionNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVersionNumberNumberParserRuleCall_0 = (RuleCall)cVersionNumberAssignment.eContents().get(0);
		
		//VersionNumber:
		///*
		// * oC_VersionNumber : RegularDecimalReal ;
		// */
		//    versionNumber=Number;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_VersionNumber : RegularDecimalReal ;
		// */
		//    versionNumber=Number
		public Assignment getVersionNumberAssignment() { return cVersionNumberAssignment; }
		
		//Number
		public RuleCall getVersionNumberNumberParserRuleCall_0() { return cVersionNumberNumberParserRuleCall_0; }
	}
	public class ConfigurationOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ConfigurationOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySYMBOLIC_NAME_XParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSYMBOLIC_NAME_XParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConfigurationOption:
		///*
		// * oC_ConfigurationOption : oC_SymbolicName SP? '=' SP? oC_SymbolicName ;
		// */
		//    key=SYMBOLIC_NAME_X '=' value=SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ConfigurationOption : oC_SymbolicName SP? '=' SP? oC_SymbolicName ;
		// */
		//    key=SYMBOLIC_NAME_X '=' value=SYMBOLIC_NAME_X
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ConfigurationOption : oC_SymbolicName SP? '=' SP? oC_SymbolicName ;
		// */
		//    key=SYMBOLIC_NAME_X
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getKeySYMBOLIC_NAME_XParserRuleCall_0_0() { return cKeySYMBOLIC_NAME_XParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=SYMBOLIC_NAME_X
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getValueSYMBOLIC_NAME_XParserRuleCall_2_0() { return cValueSYMBOLIC_NAME_XParserRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		///*
		// * oC_Statement : oC_Command
		// *              | oC_Query
		// *              ;
		// */
		//    Command | Query;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Statement : oC_Command
		// *              | oC_Query
		// *              ;
		// */
		//    Command | Query
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Statement : oC_Command
		// *              | oC_Query
		// *              ;
		// */
		//    Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//Query
		public RuleCall getQueryParserRuleCall_1() { return cQueryParserRuleCall_1; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Query");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStandaloneCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBulkImportQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Query:
		///*
		// * oC_Query : oC_RegularQuery
		// *          | oC_StandaloneCall
		// *          | oC_BulkImportQuery
		// *          ;
		// */
		//    RegularQuery | StandaloneCall | BulkImportQuery;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Query : oC_RegularQuery
		// *          | oC_StandaloneCall
		// *          | oC_BulkImportQuery
		// *          ;
		// */
		//    RegularQuery | StandaloneCall | BulkImportQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Query : oC_RegularQuery
		// *          | oC_StandaloneCall
		// *          | oC_BulkImportQuery
		// *          ;
		// */
		//    RegularQuery
		public RuleCall getRegularQueryParserRuleCall_0() { return cRegularQueryParserRuleCall_0; }
		
		//StandaloneCall
		public RuleCall getStandaloneCallParserRuleCall_1() { return cStandaloneCallParserRuleCall_1; }
		
		//BulkImportQuery
		public RuleCall getBulkImportQueryParserRuleCall_2() { return cBulkImportQueryParserRuleCall_2; }
	}
	public class RegularQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RegularQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSingleQueryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCombinedQuerySingleQueryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cUnionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnionUnionParserRuleCall_1_1_0 = (RuleCall)cUnionAssignment_1_1.eContents().get(0);
		
		//RegularQuery:
		///*
		// * oC_RegularQuery : oC_SingleQuery ( SP? oC_Union )* ;
		// */
		//    SingleQuery ({CombinedQuery.singleQuery=current} (union+=Union)+)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RegularQuery : oC_SingleQuery ( SP? oC_Union )* ;
		// */
		//    SingleQuery ({CombinedQuery.singleQuery=current} (union+=Union)+)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RegularQuery : oC_SingleQuery ( SP? oC_Union )* ;
		// */
		//    SingleQuery
		public RuleCall getSingleQueryParserRuleCall_0() { return cSingleQueryParserRuleCall_0; }
		
		//({CombinedQuery.singleQuery=current} (union+=Union)+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{CombinedQuery.singleQuery=current}
		public Action getCombinedQuerySingleQueryAction_1_0() { return cCombinedQuerySingleQueryAction_1_0; }
		
		//(union+=Union)+
		public Assignment getUnionAssignment_1_1() { return cUnionAssignment_1_1; }
		
		//Union
		public RuleCall getUnionUnionParserRuleCall_1_1_0() { return cUnionUnionParserRuleCall_1_1_0; }
	}
	public class BulkImportQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.BulkImportQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPeriodicCommitHintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0 = (RuleCall)cPeriodicCommitHintAssignment_0.eContents().get(0);
		private final Assignment cLoadCSVQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoadCSVQueryLoadCSVQueryParserRuleCall_1_0 = (RuleCall)cLoadCSVQueryAssignment_1.eContents().get(0);
		
		//BulkImportQuery:
		///*
		// * oC_BulkImportQuery : oC_PeriodicCommitHint SP? oC_LoadCSVQuery ;
		// */
		//    periodicCommitHint=PeriodicCommitHint loadCSVQuery=LoadCSVQuery;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_BulkImportQuery : oC_PeriodicCommitHint SP? oC_LoadCSVQuery ;
		// */
		//    periodicCommitHint=PeriodicCommitHint loadCSVQuery=LoadCSVQuery
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_BulkImportQuery : oC_PeriodicCommitHint SP? oC_LoadCSVQuery ;
		// */
		//    periodicCommitHint=PeriodicCommitHint
		public Assignment getPeriodicCommitHintAssignment_0() { return cPeriodicCommitHintAssignment_0; }
		
		//PeriodicCommitHint
		public RuleCall getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0() { return cPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0; }
		
		//loadCSVQuery=LoadCSVQuery
		public Assignment getLoadCSVQueryAssignment_1() { return cLoadCSVQueryAssignment_1; }
		
		//LoadCSVQuery
		public RuleCall getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0() { return cLoadCSVQueryLoadCSVQueryParserRuleCall_1_0; }
	}
	public class PeriodicCommitHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PeriodicCommitHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPeriodicCommitHintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUSINGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPERIODICKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCOMMITKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumberOfRowsPerCommitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0 = (RuleCall)cNumberOfRowsPerCommitAssignment_4.eContents().get(0);
		
		//PeriodicCommitHint:
		///*
		// * oC_PeriodicCommitHint : USING SP PERIODIC SP COMMIT ( SP oC_IntegerLiteral )? ;
		// */
		//    {PeriodicCommitHint} 'USING' 'PERIODIC' 'COMMIT' numberOfRowsPerCommit=DecimalInteger?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PeriodicCommitHint : USING SP PERIODIC SP COMMIT ( SP oC_IntegerLiteral )? ;
		// */
		//    {PeriodicCommitHint} 'USING' 'PERIODIC' 'COMMIT' numberOfRowsPerCommit=DecimalInteger?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PeriodicCommitHint : USING SP PERIODIC SP COMMIT ( SP oC_IntegerLiteral )? ;
		// */
		//    {PeriodicCommitHint}
		public Action getPeriodicCommitHintAction_0() { return cPeriodicCommitHintAction_0; }
		
		//'USING'
		public Keyword getUSINGKeyword_1() { return cUSINGKeyword_1; }
		
		//'PERIODIC'
		public Keyword getPERIODICKeyword_2() { return cPERIODICKeyword_2; }
		
		//'COMMIT'
		public Keyword getCOMMITKeyword_3() { return cCOMMITKeyword_3; }
		
		//numberOfRowsPerCommit=DecimalInteger?
		public Assignment getNumberOfRowsPerCommitAssignment_4() { return cNumberOfRowsPerCommitAssignment_4; }
		
		//DecimalInteger
		public RuleCall getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0() { return cNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0; }
	}
	public class LoadCSVQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LoadCSVQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLoadCSVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLoadCSVLoadCSVParserRuleCall_0_0 = (RuleCall)cLoadCSVAssignment_0.eContents().get(0);
		private final Assignment cSingleQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSingleQuerySingleQueryParserRuleCall_1_0 = (RuleCall)cSingleQueryAssignment_1.eContents().get(0);
		
		//LoadCSVQuery:
		///*
		// * oC_LoadCSVQuery : oC_LoadCSV oC_SingleQuery ;
		// */
		//    loadCSV=LoadCSV singleQuery=SingleQuery;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_LoadCSVQuery : oC_LoadCSV oC_SingleQuery ;
		// */
		//    loadCSV=LoadCSV singleQuery=SingleQuery
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_LoadCSVQuery : oC_LoadCSV oC_SingleQuery ;
		// */
		//    loadCSV=LoadCSV
		public Assignment getLoadCSVAssignment_0() { return cLoadCSVAssignment_0; }
		
		//LoadCSV
		public RuleCall getLoadCSVLoadCSVParserRuleCall_0_0() { return cLoadCSVLoadCSVParserRuleCall_0_0; }
		
		//singleQuery=SingleQuery
		public Assignment getSingleQueryAssignment_1() { return cSingleQueryAssignment_1; }
		
		//SingleQuery
		public RuleCall getSingleQuerySingleQueryParserRuleCall_1_0() { return cSingleQuerySingleQueryParserRuleCall_1_0; }
	}
	public class UnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Union");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAllAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAllALLKeyword_1_0 = (Keyword)cAllAssignment_1.eContents().get(0);
		private final Assignment cSingleQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSingleQuerySingleQueryParserRuleCall_2_0 = (RuleCall)cSingleQueryAssignment_2.eContents().get(0);
		
		//Union:
		///*
		// * oC_Union : ( UNION SP ALL SP? oC_SingleQuery )
		// *          | ( UNION SP? oC_SingleQuery )
		// *          ;
		// */
		//    ('UNION' all?='ALL'? singleQuery=SingleQuery);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Union : ( UNION SP ALL SP? oC_SingleQuery )
		// *          | ( UNION SP? oC_SingleQuery )
		// *          ;
		// */
		//    ('UNION' all?='ALL'? singleQuery=SingleQuery)
		public Group getGroup() { return cGroup; }
		
		//'UNION'
		public Keyword getUNIONKeyword_0() { return cUNIONKeyword_0; }
		
		//all?='ALL'?
		public Assignment getAllAssignment_1() { return cAllAssignment_1; }
		
		//'ALL'
		public Keyword getAllALLKeyword_1_0() { return cAllALLKeyword_1_0; }
		
		//singleQuery=SingleQuery
		public Assignment getSingleQueryAssignment_2() { return cSingleQueryAssignment_2; }
		
		//SingleQuery
		public RuleCall getSingleQuerySingleQueryParserRuleCall_2_0() { return cSingleQuerySingleQueryParserRuleCall_2_0; }
	}
	public class SingleQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.SingleQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultiPartQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSinglePartQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SingleQuery:
		///*
		// * oC_SingleQuery : oC_SinglePartQuery
		// *                | oC_MultiPartQuery
		// *                ;
		// *
		// * Comment: For some obscure reason the order is important here!
		// */
		//    MultiPartQuery | SinglePartQuery;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_SingleQuery : oC_SinglePartQuery
		// *                | oC_MultiPartQuery
		// *                ;
		// *
		// * Comment: For some obscure reason the order is important here!
		// */
		//    MultiPartQuery | SinglePartQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_SingleQuery : oC_SinglePartQuery
		// *                | oC_MultiPartQuery
		// *                ;
		// *
		// * Comment: For some obscure reason the order is important here!
		// */
		//    MultiPartQuery
		public RuleCall getMultiPartQueryParserRuleCall_0() { return cMultiPartQueryParserRuleCall_0; }
		
		//SinglePartQuery
		public RuleCall getSinglePartQueryParserRuleCall_1() { return cSinglePartQueryParserRuleCall_1; }
	}
	public class SinglePartQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.SinglePartQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReadingClausesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cReadingClausesReadingClauseParserRuleCall_0_0_0 = (RuleCall)cReadingClausesAssignment_0_0.eContents().get(0);
		private final Assignment cReturnAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cReturnReturnParserRuleCall_0_1_0 = (RuleCall)cReturnAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cReadingClausesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReadingClausesReadingClauseParserRuleCall_1_0_0 = (RuleCall)cReadingClausesAssignment_1_0.eContents().get(0);
		private final Assignment cUpdatingClausesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpdatingClausesUpdatingClauseParserRuleCall_1_1_0 = (RuleCall)cUpdatingClausesAssignment_1_1.eContents().get(0);
		private final Assignment cReturnAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReturnReturnParserRuleCall_1_2_0 = (RuleCall)cReturnAssignment_1_2.eContents().get(0);
		
		//SinglePartQuery:
		///*
		// * oC_SinglePartQuery : ( ( oC_ReadingClause SP? )* oC_Return )
		// *                    | ( ( oC_ReadingClause SP? )* oC_UpdatingClause ( SP? oC_UpdatingClause )* ( SP? oC_Return )? )
		// *                    ;
		// */
		//    (readingClauses+=ReadingClause)* return=Return |
		//    (readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)+ (return=Return)? ;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_SinglePartQuery : ( ( oC_ReadingClause SP? )* oC_Return )
		// *                    | ( ( oC_ReadingClause SP? )* oC_UpdatingClause ( SP? oC_UpdatingClause )* ( SP? oC_Return )? )
		// *                    ;
		// */
		//    (readingClauses+=ReadingClause)* return=Return |
		//    (readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)+ (return=Return)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_SinglePartQuery : ( ( oC_ReadingClause SP? )* oC_Return )
		// *                    | ( ( oC_ReadingClause SP? )* oC_UpdatingClause ( SP? oC_UpdatingClause )* ( SP? oC_Return )? )
		// *                    ;
		// */
		//    (readingClauses+=ReadingClause)* return=Return
		public Group getGroup_0() { return cGroup_0; }
		
		///*
		// * oC_SinglePartQuery : ( ( oC_ReadingClause SP? )* oC_Return )
		// *                    | ( ( oC_ReadingClause SP? )* oC_UpdatingClause ( SP? oC_UpdatingClause )* ( SP? oC_Return )? )
		// *                    ;
		// */
		//    (readingClauses+=ReadingClause)*
		public Assignment getReadingClausesAssignment_0_0() { return cReadingClausesAssignment_0_0; }
		
		//ReadingClause
		public RuleCall getReadingClausesReadingClauseParserRuleCall_0_0_0() { return cReadingClausesReadingClauseParserRuleCall_0_0_0; }
		
		//return=Return
		public Assignment getReturnAssignment_0_1() { return cReturnAssignment_0_1; }
		
		//Return
		public RuleCall getReturnReturnParserRuleCall_0_1_0() { return cReturnReturnParserRuleCall_0_1_0; }
		
		//(readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)+ (return=Return)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(readingClauses+=ReadingClause)*
		public Assignment getReadingClausesAssignment_1_0() { return cReadingClausesAssignment_1_0; }
		
		//ReadingClause
		public RuleCall getReadingClausesReadingClauseParserRuleCall_1_0_0() { return cReadingClausesReadingClauseParserRuleCall_1_0_0; }
		
		//(updatingClauses+=UpdatingClause)+
		public Assignment getUpdatingClausesAssignment_1_1() { return cUpdatingClausesAssignment_1_1; }
		
		//UpdatingClause
		public RuleCall getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0() { return cUpdatingClausesUpdatingClauseParserRuleCall_1_1_0; }
		
		//(return=Return)?
		public Assignment getReturnAssignment_1_2() { return cReturnAssignment_1_2; }
		
		//Return
		public RuleCall getReturnReturnParserRuleCall_1_2_0() { return cReturnReturnParserRuleCall_1_2_0; }
	}
	public class MultiPartQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.MultiPartQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubQueriesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubQueriesMultiPartSubQueryParserRuleCall_0_0 = (RuleCall)cSubQueriesAssignment_0.eContents().get(0);
		private final Assignment cSinglePartQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSinglePartQuerySinglePartQueryParserRuleCall_1_0 = (RuleCall)cSinglePartQueryAssignment_1.eContents().get(0);
		
		//MultiPartQuery:
		///*
		// * oC_MultiPartQuery : ( ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP? )+ oC_SinglePartQuery ;
		// *
		// * Comment: used the name 'withPart' instead of with as 'with' is a key word of xtext
		// * Comment: introduced MultiPartSubQuery to encapsulate the repeating group '( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?'
		// */
		//    (subQueries+=MultiPartSubQuery)+ singlePartQuery=SinglePartQuery;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_MultiPartQuery : ( ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP? )+ oC_SinglePartQuery ;
		// *
		// * Comment: used the name 'withPart' instead of with as 'with' is a key word of xtext
		// * Comment: introduced MultiPartSubQuery to encapsulate the repeating group '( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?'
		// */
		//    (subQueries+=MultiPartSubQuery)+ singlePartQuery=SinglePartQuery
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_MultiPartQuery : ( ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP? )+ oC_SinglePartQuery ;
		// *
		// * Comment: used the name 'withPart' instead of with as 'with' is a key word of xtext
		// * Comment: introduced MultiPartSubQuery to encapsulate the repeating group '( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?'
		// */
		//    (subQueries+=MultiPartSubQuery)+
		public Assignment getSubQueriesAssignment_0() { return cSubQueriesAssignment_0; }
		
		//MultiPartSubQuery
		public RuleCall getSubQueriesMultiPartSubQueryParserRuleCall_0_0() { return cSubQueriesMultiPartSubQueryParserRuleCall_0_0; }
		
		//singlePartQuery=SinglePartQuery
		public Assignment getSinglePartQueryAssignment_1() { return cSinglePartQueryAssignment_1; }
		
		//SinglePartQuery
		public RuleCall getSinglePartQuerySinglePartQueryParserRuleCall_1_0() { return cSinglePartQuerySinglePartQueryParserRuleCall_1_0; }
	}
	public class MultiPartSubQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.MultiPartSubQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadingClausesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReadingClausesReadingClauseParserRuleCall_0_0 = (RuleCall)cReadingClausesAssignment_0.eContents().get(0);
		private final Assignment cUpdatingClausesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUpdatingClausesUpdatingClauseParserRuleCall_1_0 = (RuleCall)cUpdatingClausesAssignment_1.eContents().get(0);
		private final Assignment cWithPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWithPartWithParserRuleCall_2_0 = (RuleCall)cWithPartAssignment_2.eContents().get(0);
		
		//MultiPartSubQuery:
		///*
		// * ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?
		// */
		//    (readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)* withPart=With;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?
		// */
		//    (readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)* withPart=With
		public Group getGroup() { return cGroup; }
		
		///*
		// * ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?
		// */
		//    (readingClauses+=ReadingClause)*
		public Assignment getReadingClausesAssignment_0() { return cReadingClausesAssignment_0; }
		
		//ReadingClause
		public RuleCall getReadingClausesReadingClauseParserRuleCall_0_0() { return cReadingClausesReadingClauseParserRuleCall_0_0; }
		
		//(updatingClauses+=UpdatingClause)*
		public Assignment getUpdatingClausesAssignment_1() { return cUpdatingClausesAssignment_1; }
		
		//UpdatingClause
		public RuleCall getUpdatingClausesUpdatingClauseParserRuleCall_1_0() { return cUpdatingClausesUpdatingClauseParserRuleCall_1_0; }
		
		//withPart=With
		public Assignment getWithPartAssignment_2() { return cWithPartAssignment_2; }
		
		//With
		public RuleCall getWithPartWithParserRuleCall_2_0() { return cWithPartWithParserRuleCall_2_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpdatingClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReadingClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWithParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Clause:
		///*
		// * Comment: introduced Clause to have a common superinterface for the different clause types. This comes handy when dealing with the ASG.
		// */
		//    UpdatingClause | ReadingClause | Return | With;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * Comment: introduced Clause to have a common superinterface for the different clause types. This comes handy when dealing with the ASG.
		// */
		//    UpdatingClause | ReadingClause | Return | With
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * Comment: introduced Clause to have a common superinterface for the different clause types. This comes handy when dealing with the ASG.
		// */
		//    UpdatingClause
		public RuleCall getUpdatingClauseParserRuleCall_0() { return cUpdatingClauseParserRuleCall_0; }
		
		//ReadingClause
		public RuleCall getReadingClauseParserRuleCall_1() { return cReadingClauseParserRuleCall_1; }
		
		//Return
		public RuleCall getReturnParserRuleCall_2() { return cReturnParserRuleCall_2; }
		
		//With
		public RuleCall getWithParserRuleCall_3() { return cWithParserRuleCall_3; }
	}
	public class UpdatingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.UpdatingClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMergeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForeachParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRemoveParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//UpdatingClause:
		///*
		// * oC_UpdatingClause : oC_Create
		// *                   | oC_Merge
		// *                   | oC_CreateUnique
		// *                   | oC_Foreach
		// *                   | oC_Delete
		// *                   | oC_Set
		// *                   | oC_Remove
		// *                   ;
		// *
		// * Comment: We handle both 'oC_Create' and 'oC_CreateUnique' in the 'Create' clause
		// */
		//    Create | Merge | Foreach | Delete | Set | Remove;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_UpdatingClause : oC_Create
		// *                   | oC_Merge
		// *                   | oC_CreateUnique
		// *                   | oC_Foreach
		// *                   | oC_Delete
		// *                   | oC_Set
		// *                   | oC_Remove
		// *                   ;
		// *
		// * Comment: We handle both 'oC_Create' and 'oC_CreateUnique' in the 'Create' clause
		// */
		//    Create | Merge | Foreach | Delete | Set | Remove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_UpdatingClause : oC_Create
		// *                   | oC_Merge
		// *                   | oC_CreateUnique
		// *                   | oC_Foreach
		// *                   | oC_Delete
		// *                   | oC_Set
		// *                   | oC_Remove
		// *                   ;
		// *
		// * Comment: We handle both 'oC_Create' and 'oC_CreateUnique' in the 'Create' clause
		// */
		//    Create
		public RuleCall getCreateParserRuleCall_0() { return cCreateParserRuleCall_0; }
		
		//Merge
		public RuleCall getMergeParserRuleCall_1() { return cMergeParserRuleCall_1; }
		
		//Foreach
		public RuleCall getForeachParserRuleCall_2() { return cForeachParserRuleCall_2; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_3() { return cDeleteParserRuleCall_3; }
		
		//Set
		public RuleCall getSetParserRuleCall_4() { return cSetParserRuleCall_4; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_5() { return cRemoveParserRuleCall_5; }
	}
	public class ReadingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ReadingClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadCSVParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMatchParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnwindParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInQueryCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ReadingClause:
		///*
		// * oC_ReadingClause : oC_LoadCSV
		// *                  | oC_Start
		// *                  | oC_Match
		// *                  | oC_Unwind
		// *                  | oC_InQueryCall
		// *                  ;
		// */
		//    LoadCSV | Start | Match | Unwind | InQueryCall;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ReadingClause : oC_LoadCSV
		// *                  | oC_Start
		// *                  | oC_Match
		// *                  | oC_Unwind
		// *                  | oC_InQueryCall
		// *                  ;
		// */
		//    LoadCSV | Start | Match | Unwind | InQueryCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_ReadingClause : oC_LoadCSV
		// *                  | oC_Start
		// *                  | oC_Match
		// *                  | oC_Unwind
		// *                  | oC_InQueryCall
		// *                  ;
		// */
		//    LoadCSV
		public RuleCall getLoadCSVParserRuleCall_0() { return cLoadCSVParserRuleCall_0; }
		
		//Start
		public RuleCall getStartParserRuleCall_1() { return cStartParserRuleCall_1; }
		
		//Match
		public RuleCall getMatchParserRuleCall_2() { return cMatchParserRuleCall_2; }
		
		//Unwind
		public RuleCall getUnwindParserRuleCall_3() { return cUnwindParserRuleCall_3; }
		
		//InQueryCall
		public RuleCall getInQueryCallParserRuleCall_4() { return cInQueryCallParserRuleCall_4; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateIndexParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDropIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCreateUniqueConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDropUniqueConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCreateNodePropertyExistenceConstraintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDropNodePropertyExistenceConstraintParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCreateRelationshipPropertyExistenceConstraintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDropRelationshipPropertyExistenceConstraintParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Command:
		///*
		// * oC_Command : oC_CreateIndex
		// *            | oC_DropIndex
		// *            | oC_CreateUniqueConstraint
		// *            | oC_DropUniqueConstraint
		// *            | oC_CreateNodePropertyExistenceConstraint
		// *            | oC_DropNodePropertyExistenceConstraint
		// *            | oC_CreateRelationshipPropertyExistenceConstraint
		// *            | oC_DropRelationshipPropertyExistenceConstraint
		// *            ;
		// */
		//    CreateIndex | DropIndex | CreateUniqueConstraint | DropUniqueConstraint | CreateNodePropertyExistenceConstraint |
		//    DropNodePropertyExistenceConstraint | CreateRelationshipPropertyExistenceConstraint |
		//    DropRelationshipPropertyExistenceConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Command : oC_CreateIndex
		// *            | oC_DropIndex
		// *            | oC_CreateUniqueConstraint
		// *            | oC_DropUniqueConstraint
		// *            | oC_CreateNodePropertyExistenceConstraint
		// *            | oC_DropNodePropertyExistenceConstraint
		// *            | oC_CreateRelationshipPropertyExistenceConstraint
		// *            | oC_DropRelationshipPropertyExistenceConstraint
		// *            ;
		// */
		//    CreateIndex | DropIndex | CreateUniqueConstraint | DropUniqueConstraint | CreateNodePropertyExistenceConstraint |
		//    DropNodePropertyExistenceConstraint | CreateRelationshipPropertyExistenceConstraint |
		//    DropRelationshipPropertyExistenceConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Command : oC_CreateIndex
		// *            | oC_DropIndex
		// *            | oC_CreateUniqueConstraint
		// *            | oC_DropUniqueConstraint
		// *            | oC_CreateNodePropertyExistenceConstraint
		// *            | oC_DropNodePropertyExistenceConstraint
		// *            | oC_CreateRelationshipPropertyExistenceConstraint
		// *            | oC_DropRelationshipPropertyExistenceConstraint
		// *            ;
		// */
		//    CreateIndex
		public RuleCall getCreateIndexParserRuleCall_0() { return cCreateIndexParserRuleCall_0; }
		
		//DropIndex
		public RuleCall getDropIndexParserRuleCall_1() { return cDropIndexParserRuleCall_1; }
		
		//CreateUniqueConstraint
		public RuleCall getCreateUniqueConstraintParserRuleCall_2() { return cCreateUniqueConstraintParserRuleCall_2; }
		
		//DropUniqueConstraint
		public RuleCall getDropUniqueConstraintParserRuleCall_3() { return cDropUniqueConstraintParserRuleCall_3; }
		
		//CreateNodePropertyExistenceConstraint
		public RuleCall getCreateNodePropertyExistenceConstraintParserRuleCall_4() { return cCreateNodePropertyExistenceConstraintParserRuleCall_4; }
		
		//DropNodePropertyExistenceConstraint
		public RuleCall getDropNodePropertyExistenceConstraintParserRuleCall_5() { return cDropNodePropertyExistenceConstraintParserRuleCall_5; }
		
		//CreateRelationshipPropertyExistenceConstraint
		public RuleCall getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6() { return cCreateRelationshipPropertyExistenceConstraintParserRuleCall_6; }
		
		//DropRelationshipPropertyExistenceConstraint
		public RuleCall getDropRelationshipPropertyExistenceConstraintParserRuleCall_7() { return cDropRelationshipPropertyExistenceConstraintParserRuleCall_7; }
	}
	public class CreateUniqueConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CreateUniqueConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUniqueConstraintParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CreateUniqueConstraint:
		///*
		// * oC_CreateUniqueConstraint : CREATE SP oC_UniqueConstraint ;
		// */
		//    'CREATE' UniqueConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CreateUniqueConstraint : CREATE SP oC_UniqueConstraint ;
		// */
		//    'CREATE' UniqueConstraint
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CreateUniqueConstraint : CREATE SP oC_UniqueConstraint ;
		// */
		//    'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//UniqueConstraint
		public RuleCall getUniqueConstraintParserRuleCall_1() { return cUniqueConstraintParserRuleCall_1; }
	}
	public class CreateNodePropertyExistenceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CreateNodePropertyExistenceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodePropertyExistenceConstraintParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CreateNodePropertyExistenceConstraint:
		///*
		// * oC_CreateNodePropertyExistenceConstraint : CREATE SP oC_NodePropertyExistenceConstraint ;
		// */
		//    'CREATE' NodePropertyExistenceConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CreateNodePropertyExistenceConstraint : CREATE SP oC_NodePropertyExistenceConstraint ;
		// */
		//    'CREATE' NodePropertyExistenceConstraint
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CreateNodePropertyExistenceConstraint : CREATE SP oC_NodePropertyExistenceConstraint ;
		// */
		//    'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//NodePropertyExistenceConstraint
		public RuleCall getNodePropertyExistenceConstraintParserRuleCall_1() { return cNodePropertyExistenceConstraintParserRuleCall_1; }
	}
	public class CreateRelationshipPropertyExistenceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CreateRelationshipPropertyExistenceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationshipPropertyExistenceConstraintParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CreateRelationshipPropertyExistenceConstraint:
		///*
		// * oC_CreateRelationshipPropertyExistenceConstraint : CREATE SP oC_RelationshipPropertyExistenceConstraint ;
		// */
		//    'CREATE' RelationshipPropertyExistenceConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CreateRelationshipPropertyExistenceConstraint : CREATE SP oC_RelationshipPropertyExistenceConstraint ;
		// */
		//    'CREATE' RelationshipPropertyExistenceConstraint
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CreateRelationshipPropertyExistenceConstraint : CREATE SP oC_RelationshipPropertyExistenceConstraint ;
		// */
		//    'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//RelationshipPropertyExistenceConstraint
		public RuleCall getRelationshipPropertyExistenceConstraintParserRuleCall_1() { return cRelationshipPropertyExistenceConstraintParserRuleCall_1; }
	}
	public class CreateIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CreateIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		
		//CreateIndex:
		///*
		// * oC_CreateIndex : CREATE SP oC_Index ;
		// */
		//    'CREATE' index=Index;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CreateIndex : CREATE SP oC_Index ;
		// */
		//    'CREATE' index=Index
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CreateIndex : CREATE SP oC_Index ;
		// */
		//    'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//index=Index
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_1_0() { return cIndexIndexParserRuleCall_1_0; }
	}
	public class DropUniqueConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.DropUniqueConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUniqueConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUniqueConstraintUniqueConstraintParserRuleCall_1_0 = (RuleCall)cUniqueConstraintAssignment_1.eContents().get(0);
		
		//DropUniqueConstraint:
		///*
		// * oC_DropUniqueConstraint : DROP SP oC_UniqueConstraint ;
		// */
		//    'DROP' uniqueConstraint=UniqueConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_DropUniqueConstraint : DROP SP oC_UniqueConstraint ;
		// */
		//    'DROP' uniqueConstraint=UniqueConstraint
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_DropUniqueConstraint : DROP SP oC_UniqueConstraint ;
		// */
		//    'DROP'
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//uniqueConstraint=UniqueConstraint
		public Assignment getUniqueConstraintAssignment_1() { return cUniqueConstraintAssignment_1; }
		
		//UniqueConstraint
		public RuleCall getUniqueConstraintUniqueConstraintParserRuleCall_1_0() { return cUniqueConstraintUniqueConstraintParserRuleCall_1_0; }
	}
	public class DropNodePropertyExistenceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.DropNodePropertyExistenceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodePropertyExistenceConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0 = (RuleCall)cNodePropertyExistenceConstraintAssignment_1.eContents().get(0);
		
		//DropNodePropertyExistenceConstraint:
		///*
		// * oC_DropNodePropertyExistenceConstraint : DROP SP oC_NodePropertyExistenceConstraint ;
		// */
		//    'DROP' nodePropertyExistenceConstraint=NodePropertyExistenceConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_DropNodePropertyExistenceConstraint : DROP SP oC_NodePropertyExistenceConstraint ;
		// */
		//    'DROP' nodePropertyExistenceConstraint=NodePropertyExistenceConstraint
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_DropNodePropertyExistenceConstraint : DROP SP oC_NodePropertyExistenceConstraint ;
		// */
		//    'DROP'
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//nodePropertyExistenceConstraint=NodePropertyExistenceConstraint
		public Assignment getNodePropertyExistenceConstraintAssignment_1() { return cNodePropertyExistenceConstraintAssignment_1; }
		
		//NodePropertyExistenceConstraint
		public RuleCall getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0() { return cNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0; }
	}
	public class DropRelationshipPropertyExistenceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.DropRelationshipPropertyExistenceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelationshipPropertyExistenceConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0 = (RuleCall)cRelationshipPropertyExistenceConstraintAssignment_1.eContents().get(0);
		
		//DropRelationshipPropertyExistenceConstraint:
		///*
		// * oC_DropRelationshipPropertyExistenceConstraint : DROP SP oC_RelationshipPropertyExistenceConstraint ;
		// */
		//    'DROP' relationshipPropertyExistenceConstraint=RelationshipPropertyExistenceConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_DropRelationshipPropertyExistenceConstraint : DROP SP oC_RelationshipPropertyExistenceConstraint ;
		// */
		//    'DROP' relationshipPropertyExistenceConstraint=RelationshipPropertyExistenceConstraint
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_DropRelationshipPropertyExistenceConstraint : DROP SP oC_RelationshipPropertyExistenceConstraint ;
		// */
		//    'DROP'
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//relationshipPropertyExistenceConstraint=RelationshipPropertyExistenceConstraint
		public Assignment getRelationshipPropertyExistenceConstraintAssignment_1() { return cRelationshipPropertyExistenceConstraintAssignment_1; }
		
		//RelationshipPropertyExistenceConstraint
		public RuleCall getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0() { return cRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0; }
	}
	public class DropIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.DropIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		
		//DropIndex:
		///*
		// * oC_DropIndex : DROP SP oC_Index ;
		// */
		//    'DROP' index=Index;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_DropIndex : DROP SP oC_Index ;
		// */
		//    'DROP' index=Index
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_DropIndex : DROP SP oC_Index ;
		// */
		//    'DROP'
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//index=Index
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_1_0() { return cIndexIndexParserRuleCall_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINDEXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeLabelNodeLabelParserRuleCall_2_0 = (RuleCall)cNodeLabelAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyKeyNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyKeyNamePropertyKeyNameParserRuleCall_4_0 = (RuleCall)cPropertyKeyNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Index:
		///*
		// * oC_Index : INDEX SP ON SP? oC_NodeLabel '(' oC_PropertyKeyName ')' ;
		// */
		//    'INDEX' 'ON' nodeLabel=NodeLabel '(' propertyKeyName=PropertyKeyName ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Index : INDEX SP ON SP? oC_NodeLabel '(' oC_PropertyKeyName ')' ;
		// */
		//    'INDEX' 'ON' nodeLabel=NodeLabel '(' propertyKeyName=PropertyKeyName ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Index : INDEX SP ON SP? oC_NodeLabel '(' oC_PropertyKeyName ')' ;
		// */
		//    'INDEX'
		public Keyword getINDEXKeyword_0() { return cINDEXKeyword_0; }
		
		//'ON'
		public Keyword getONKeyword_1() { return cONKeyword_1; }
		
		//nodeLabel=NodeLabel
		public Assignment getNodeLabelAssignment_2() { return cNodeLabelAssignment_2; }
		
		//NodeLabel
		public RuleCall getNodeLabelNodeLabelParserRuleCall_2_0() { return cNodeLabelNodeLabelParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//propertyKeyName=PropertyKeyName
		public Assignment getPropertyKeyNameAssignment_4() { return cPropertyKeyNameAssignment_4; }
		
		//PropertyKeyName
		public RuleCall getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0() { return cPropertyKeyNamePropertyKeyNameParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class UniqueConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.UniqueConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTRAINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cNodeLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodeLabelNodeLabelParserRuleCall_4_0 = (RuleCall)cNodeLabelAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cASSERTKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertyExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertyExpressionPropertyExpressionParserRuleCall_7_0 = (RuleCall)cPropertyExpressionAssignment_7.eContents().get(0);
		private final Keyword cISKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cUNIQUEKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//UniqueConstraint:
		///*
		// * oC_UniqueConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP oC_PropertyExpression SP IS SP UNIQUE ;
		// */
		//    'CONSTRAINT' 'ON' '(' variable=VariableDeclaration nodeLabel=NodeLabel ')' 'ASSERT'
		//    propertyExpression=PropertyExpression 'IS' 'UNIQUE';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_UniqueConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP oC_PropertyExpression SP IS SP UNIQUE ;
		// */
		//    'CONSTRAINT' 'ON' '(' variable=VariableDeclaration nodeLabel=NodeLabel ')' 'ASSERT'
		//    propertyExpression=PropertyExpression 'IS' 'UNIQUE'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_UniqueConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP oC_PropertyExpression SP IS SP UNIQUE ;
		// */
		//    'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_0() { return cCONSTRAINTKeyword_0; }
		
		//'ON'
		public Keyword getONKeyword_1() { return cONKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_3_0() { return cVariableVariableDeclarationParserRuleCall_3_0; }
		
		//nodeLabel=NodeLabel
		public Assignment getNodeLabelAssignment_4() { return cNodeLabelAssignment_4; }
		
		//NodeLabel
		public RuleCall getNodeLabelNodeLabelParserRuleCall_4_0() { return cNodeLabelNodeLabelParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_6() { return cASSERTKeyword_6; }
		
		//propertyExpression=PropertyExpression
		public Assignment getPropertyExpressionAssignment_7() { return cPropertyExpressionAssignment_7; }
		
		//PropertyExpression
		public RuleCall getPropertyExpressionPropertyExpressionParserRuleCall_7_0() { return cPropertyExpressionPropertyExpressionParserRuleCall_7_0; }
		
		//'IS'
		public Keyword getISKeyword_8() { return cISKeyword_8; }
		
		//'UNIQUE'
		public Keyword getUNIQUEKeyword_9() { return cUNIQUEKeyword_9; }
	}
	public class NodePropertyExistenceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NodePropertyExistenceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTRAINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cNodeLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodeLabelNodeLabelParserRuleCall_4_0 = (RuleCall)cNodeLabelAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cASSERTKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEXISTSKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPropertyExpressionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPropertyExpressionPropertyExpressionParserRuleCall_9_0 = (RuleCall)cPropertyExpressionAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//NodePropertyExistenceConstraint:
		///*
		// * oC_NodePropertyExistenceConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
		// */
		//    'CONSTRAINT' 'ON' '(' variable=VariableDeclaration nodeLabel=NodeLabel ')' 'ASSERT' 'EXISTS' '('
		//    propertyExpression=PropertyExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NodePropertyExistenceConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
		// */
		//    'CONSTRAINT' 'ON' '(' variable=VariableDeclaration nodeLabel=NodeLabel ')' 'ASSERT' 'EXISTS' '('
		//    propertyExpression=PropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_NodePropertyExistenceConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
		// */
		//    'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_0() { return cCONSTRAINTKeyword_0; }
		
		//'ON'
		public Keyword getONKeyword_1() { return cONKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_3_0() { return cVariableVariableDeclarationParserRuleCall_3_0; }
		
		//nodeLabel=NodeLabel
		public Assignment getNodeLabelAssignment_4() { return cNodeLabelAssignment_4; }
		
		//NodeLabel
		public RuleCall getNodeLabelNodeLabelParserRuleCall_4_0() { return cNodeLabelNodeLabelParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_6() { return cASSERTKeyword_6; }
		
		//'EXISTS'
		public Keyword getEXISTSKeyword_7() { return cEXISTSKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//propertyExpression=PropertyExpression
		public Assignment getPropertyExpressionAssignment_9() { return cPropertyExpressionAssignment_9; }
		
		//PropertyExpression
		public RuleCall getPropertyExpressionPropertyExpressionParserRuleCall_9_0() { return cPropertyExpressionPropertyExpressionParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class RelationshipPropertyExistenceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipPropertyExistenceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTRAINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelationshipPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0 = (RuleCall)cRelationshipPatternAssignment_2.eContents().get(0);
		private final Keyword cASSERTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEXISTSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertyExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertyExpressionPropertyExpressionParserRuleCall_6_0 = (RuleCall)cPropertyExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RelationshipPropertyExistenceConstraint:
		///*
		// * oC_RelationshipPropertyExistenceConstraint : CONSTRAINT SP ON SP? oC_RelationshipPatternSyntax SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
		// */
		//    'CONSTRAINT' 'ON' relationshipPattern=RelationshipPatternSyntax 'ASSERT' 'EXISTS' '('
		//    propertyExpression=PropertyExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipPropertyExistenceConstraint : CONSTRAINT SP ON SP? oC_RelationshipPatternSyntax SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
		// */
		//    'CONSTRAINT' 'ON' relationshipPattern=RelationshipPatternSyntax 'ASSERT' 'EXISTS' '('
		//    propertyExpression=PropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelationshipPropertyExistenceConstraint : CONSTRAINT SP ON SP? oC_RelationshipPatternSyntax SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
		// */
		//    'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_0() { return cCONSTRAINTKeyword_0; }
		
		//'ON'
		public Keyword getONKeyword_1() { return cONKeyword_1; }
		
		//relationshipPattern=RelationshipPatternSyntax
		public Assignment getRelationshipPatternAssignment_2() { return cRelationshipPatternAssignment_2; }
		
		//RelationshipPatternSyntax
		public RuleCall getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0() { return cRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_3() { return cASSERTKeyword_3; }
		
		//'EXISTS'
		public Keyword getEXISTSKeyword_4() { return cEXISTSKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//propertyExpression=PropertyExpression
		public Assignment getPropertyExpressionAssignment_6() { return cPropertyExpressionAssignment_6; }
		
		//PropertyExpression
		public RuleCall getPropertyExpressionPropertyExpressionParserRuleCall_6_0() { return cPropertyExpressionPropertyExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class RelationshipPatternSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipPatternSyntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIncomingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIncomingLeftArrowHeadParserRuleCall_2_0 = (RuleCall)cIncomingAssignment_2.eContents().get(0);
		private final RuleCall cDashParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_5_0 = (RuleCall)cVariableAssignment_5.eContents().get(0);
		private final Assignment cRelTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRelTypeRelTypeParserRuleCall_6_0 = (RuleCall)cRelTypeAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cDashParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cOutgoingAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOutgoingRightArrowHeadParserRuleCall_9_0 = (RuleCall)cOutgoingAssignment_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//RelationshipPatternSyntax:
		///*
		// * oC_RelationshipPatternSyntax : ( '(' SP? ')' oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash '(' SP? ')' )
		// *                              | ( '(' SP? ')' oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash oC_RightArrowHead '(' SP? ')' )
		// *                              | ( '(' SP? ')' oC_LeftArrowHead oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash '(' SP? ')' )
		// *                              ;
		// */
		//    ('(' ')' incoming?=LeftArrowHead? Dash '[' variable=VariableDeclaration relType=RelType ']' Dash
		//    outgoing?=RightArrowHead? '(' ')');
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipPatternSyntax : ( '(' SP? ')' oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash '(' SP? ')' )
		// *                              | ( '(' SP? ')' oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash oC_RightArrowHead '(' SP? ')' )
		// *                              | ( '(' SP? ')' oC_LeftArrowHead oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash '(' SP? ')' )
		// *                              ;
		// */
		//    ('(' ')' incoming?=LeftArrowHead? Dash '[' variable=VariableDeclaration relType=RelType ']' Dash
		//    outgoing?=RightArrowHead? '(' ')')
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
		
		//incoming?=LeftArrowHead?
		public Assignment getIncomingAssignment_2() { return cIncomingAssignment_2; }
		
		//LeftArrowHead
		public RuleCall getIncomingLeftArrowHeadParserRuleCall_2_0() { return cIncomingLeftArrowHeadParserRuleCall_2_0; }
		
		//Dash
		public RuleCall getDashParserRuleCall_3() { return cDashParserRuleCall_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_5() { return cVariableAssignment_5; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_5_0() { return cVariableVariableDeclarationParserRuleCall_5_0; }
		
		//relType=RelType
		public Assignment getRelTypeAssignment_6() { return cRelTypeAssignment_6; }
		
		//RelType
		public RuleCall getRelTypeRelTypeParserRuleCall_6_0() { return cRelTypeRelTypeParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//Dash
		public RuleCall getDashParserRuleCall_8() { return cDashParserRuleCall_8; }
		
		//outgoing?=RightArrowHead?
		public Assignment getOutgoingAssignment_9() { return cOutgoingAssignment_9; }
		
		//RightArrowHead
		public RuleCall getOutgoingRightArrowHeadParserRuleCall_9_0() { return cOutgoingRightArrowHeadParserRuleCall_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10() { return cLeftParenthesisKeyword_10; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class LoadCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LoadCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoadCSVAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLOADKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCSVKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWithHeadersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWithHeadersLoadCSVWithHeadersParserRuleCall_3_0 = (RuleCall)cWithHeadersAssignment_3.eContents().get(0);
		private final Keyword cFROMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cASKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVariableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_7_0 = (RuleCall)cVariableAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFIELDTERMINATORKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFieldterminatorAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0 = (RuleCall)cFieldterminatorAssignment_8_1.eContents().get(0);
		
		//LoadCSV:
		///*
		// * oC_LoadCSV : LOAD SP CSV SP ( WITH SP HEADERS SP )? FROM SP oC_Expression SP AS SP oC_Variable SP ( FIELDTERMINATOR SP StringLiteral )? ;
		// *
		// * Comment: For simplicity we split up the antlr clause in xtext clauses 'LoadCSV' and 'LoadCSVWithHeaders'
		// */
		//    {LoadCSV} 'LOAD' 'CSV' withHeaders?=LoadCSVWithHeaders? 'FROM' expression=Expression 'AS'
		//    variable=VariableDeclaration ('FIELDTERMINATOR' fieldterminator=STRING_LITERAL)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_LoadCSV : LOAD SP CSV SP ( WITH SP HEADERS SP )? FROM SP oC_Expression SP AS SP oC_Variable SP ( FIELDTERMINATOR SP StringLiteral )? ;
		// *
		// * Comment: For simplicity we split up the antlr clause in xtext clauses 'LoadCSV' and 'LoadCSVWithHeaders'
		// */
		//    {LoadCSV} 'LOAD' 'CSV' withHeaders?=LoadCSVWithHeaders? 'FROM' expression=Expression 'AS'
		//    variable=VariableDeclaration ('FIELDTERMINATOR' fieldterminator=STRING_LITERAL)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_LoadCSV : LOAD SP CSV SP ( WITH SP HEADERS SP )? FROM SP oC_Expression SP AS SP oC_Variable SP ( FIELDTERMINATOR SP StringLiteral )? ;
		// *
		// * Comment: For simplicity we split up the antlr clause in xtext clauses 'LoadCSV' and 'LoadCSVWithHeaders'
		// */
		//    {LoadCSV}
		public Action getLoadCSVAction_0() { return cLoadCSVAction_0; }
		
		//'LOAD'
		public Keyword getLOADKeyword_1() { return cLOADKeyword_1; }
		
		//'CSV'
		public Keyword getCSVKeyword_2() { return cCSVKeyword_2; }
		
		//withHeaders?=LoadCSVWithHeaders?
		public Assignment getWithHeadersAssignment_3() { return cWithHeadersAssignment_3; }
		
		//LoadCSVWithHeaders
		public RuleCall getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0() { return cWithHeadersLoadCSVWithHeadersParserRuleCall_3_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_4() { return cFROMKeyword_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
		
		//'AS'
		public Keyword getASKeyword_6() { return cASKeyword_6; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_7() { return cVariableAssignment_7; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_7_0() { return cVariableVariableDeclarationParserRuleCall_7_0; }
		
		//('FIELDTERMINATOR' fieldterminator=STRING_LITERAL)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'FIELDTERMINATOR'
		public Keyword getFIELDTERMINATORKeyword_8_0() { return cFIELDTERMINATORKeyword_8_0; }
		
		//fieldterminator=STRING_LITERAL
		public Assignment getFieldterminatorAssignment_8_1() { return cFieldterminatorAssignment_8_1; }
		
		//STRING_LITERAL
		public RuleCall getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0() { return cFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0; }
	}
	public class LoadCSVWithHeadersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LoadCSVWithHeaders");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWITHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHEADERSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LoadCSVWithHeaders:
		//    'WITH' 'HEADERS';
		@Override public ParserRule getRule() { return rule; }
		
		//'WITH' 'HEADERS'
		public Group getGroup() { return cGroup; }
		
		//'WITH'
		public Keyword getWITHKeyword_0() { return cWITHKeyword_0; }
		
		//'HEADERS'
		public Keyword getHEADERSKeyword_1() { return cHEADERSKeyword_1; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOPTIONALKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Keyword cMATCHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Assignment cHintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHintsHintParserRuleCall_3_0 = (RuleCall)cHintsAssignment_3.eContents().get(0);
		private final Assignment cWhereAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereWhereParserRuleCall_4_0 = (RuleCall)cWhereAssignment_4.eContents().get(0);
		
		//Match:
		///*
		// * oC_Match : ( OPTIONAL SP )? MATCH SP? oC_Pattern ( oC_Hint )* ( SP? oC_Where )? ;
		// */
		//    optional?='OPTIONAL'? 'MATCH' pattern=Pattern (hints+=Hint)* where=Where?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Match : ( OPTIONAL SP )? MATCH SP? oC_Pattern ( oC_Hint )* ( SP? oC_Where )? ;
		// */
		//    optional?='OPTIONAL'? 'MATCH' pattern=Pattern (hints+=Hint)* where=Where?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Match : ( OPTIONAL SP )? MATCH SP? oC_Pattern ( oC_Hint )* ( SP? oC_Where )? ;
		// */
		//    optional?='OPTIONAL'?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }
		
		//'OPTIONAL'
		public Keyword getOptionalOPTIONALKeyword_0_0() { return cOptionalOPTIONALKeyword_0_0; }
		
		//'MATCH'
		public Keyword getMATCHKeyword_1() { return cMATCHKeyword_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//(hints+=Hint)*
		public Assignment getHintsAssignment_3() { return cHintsAssignment_3; }
		
		//Hint
		public RuleCall getHintsHintParserRuleCall_3_0() { return cHintsHintParserRuleCall_3_0; }
		
		//where=Where?
		public Assignment getWhereAssignment_4() { return cWhereAssignment_4; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_4_0() { return cWhereWhereParserRuleCall_4_0; }
	}
	public class UnwindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Unwind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNWINDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//Unwind:
		///*
		// * oC_Unwind : UNWIND SP? oC_Expression SP AS SP oC_Variable ;
		// */
		//    'UNWIND' expression=Expression 'AS' variable=VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Unwind : UNWIND SP? oC_Expression SP AS SP oC_Variable ;
		// */
		//    'UNWIND' expression=Expression 'AS' variable=VariableDeclaration
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Unwind : UNWIND SP? oC_Expression SP AS SP oC_Variable ;
		// */
		//    'UNWIND'
		public Keyword getUNWINDKeyword_0() { return cUNWINDKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'AS'
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_3_0() { return cVariableVariableDeclarationParserRuleCall_3_0; }
	}
	public class MergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Merge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMERGEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPartPatternPartParserRuleCall_1_0 = (RuleCall)cPatternPartAssignment_1.eContents().get(0);
		private final Assignment cMergeActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMergeActionsMergeActionParserRuleCall_2_0 = (RuleCall)cMergeActionsAssignment_2.eContents().get(0);
		
		//Merge:
		///*
		// * oC_Merge : MERGE SP? oC_PatternPart ( SP oC_MergeAction )* ;
		// */
		//    'MERGE' patternPart=PatternPart (mergeActions+=MergeAction)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Merge : MERGE SP? oC_PatternPart ( SP oC_MergeAction )* ;
		// */
		//    'MERGE' patternPart=PatternPart (mergeActions+=MergeAction)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Merge : MERGE SP? oC_PatternPart ( SP oC_MergeAction )* ;
		// */
		//    'MERGE'
		public Keyword getMERGEKeyword_0() { return cMERGEKeyword_0; }
		
		//patternPart=PatternPart
		public Assignment getPatternPartAssignment_1() { return cPatternPartAssignment_1; }
		
		//PatternPart
		public RuleCall getPatternPartPatternPartParserRuleCall_1_0() { return cPatternPartPatternPartParserRuleCall_1_0; }
		
		//(mergeActions+=MergeAction)*
		public Assignment getMergeActionsAssignment_2() { return cMergeActionsAssignment_2; }
		
		//MergeAction
		public RuleCall getMergeActionsMergeActionParserRuleCall_2_0() { return cMergeActionsMergeActionParserRuleCall_2_0; }
	}
	public class MergeActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.MergeAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cActionAlternatives_1_0 = (Alternatives)cActionAssignment_1.eContents().get(0);
		private final Keyword cActionMATCHKeyword_1_0_0 = (Keyword)cActionAlternatives_1_0.eContents().get(0);
		private final Keyword cActionCREATEKeyword_1_0_1 = (Keyword)cActionAlternatives_1_0.eContents().get(1);
		private final Assignment cSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetSetParserRuleCall_2_0 = (RuleCall)cSetAssignment_2.eContents().get(0);
		
		//MergeAction:
		///*
		// * oC_MergeAction : ( ON SP MATCH SP oC_Set )
		// *                | ( ON SP CREATE SP oC_Set )
		// *                ;
		// */
		//    'ON' action=('MATCH' | 'CREATE') set=Set;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_MergeAction : ( ON SP MATCH SP oC_Set )
		// *                | ( ON SP CREATE SP oC_Set )
		// *                ;
		// */
		//    'ON' action=('MATCH' | 'CREATE') set=Set
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_MergeAction : ( ON SP MATCH SP oC_Set )
		// *                | ( ON SP CREATE SP oC_Set )
		// *                ;
		// */
		//    'ON'
		public Keyword getONKeyword_0() { return cONKeyword_0; }
		
		//action=('MATCH' | 'CREATE')
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//('MATCH' | 'CREATE')
		public Alternatives getActionAlternatives_1_0() { return cActionAlternatives_1_0; }
		
		//'MATCH'
		public Keyword getActionMATCHKeyword_1_0_0() { return cActionMATCHKeyword_1_0_0; }
		
		//'CREATE'
		public Keyword getActionCREATEKeyword_1_0_1() { return cActionCREATEKeyword_1_0_1; }
		
		//set=Set
		public Assignment getSetAssignment_2() { return cSetAssignment_2; }
		
		//Set
		public RuleCall getSetSetParserRuleCall_2_0() { return cSetSetParserRuleCall_2_0; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUniqueContraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cUniqueContraintUNIQUEKeyword_1_0 = (Keyword)cUniqueContraintAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//Create:
		///*
		// * oC_Create : CREATE SP? oC_Pattern ;
		// * oC_CreateUnique : CREATE SP UNIQUE SP? oC_Pattern ;
		// */
		//    'CREATE' uniqueContraint?='UNIQUE'? pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Create : CREATE SP? oC_Pattern ;
		// * oC_CreateUnique : CREATE SP UNIQUE SP? oC_Pattern ;
		// */
		//    'CREATE' uniqueContraint?='UNIQUE'? pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Create : CREATE SP? oC_Pattern ;
		// * oC_CreateUnique : CREATE SP UNIQUE SP? oC_Pattern ;
		// */
		//    'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//uniqueContraint?='UNIQUE'?
		public Assignment getUniqueContraintAssignment_1() { return cUniqueContraintAssignment_1; }
		
		//'UNIQUE'
		public Keyword getUniqueContraintUNIQUEKeyword_1_0() { return cUniqueContraintUNIQUEKeyword_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetItemsSetItemParserRuleCall_1_0 = (RuleCall)cSetItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSetItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSetItemsSetItemParserRuleCall_2_1_0 = (RuleCall)cSetItemsAssignment_2_1.eContents().get(0);
		
		//Set:
		///*
		// * oC_Set : SET SP? oC_SetItem ( ',' oC_SetItem )* ;
		// */
		//    'SET' setItems+=SetItem (',' setItems+=SetItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Set : SET SP? oC_SetItem ( ',' oC_SetItem )* ;
		// */
		//    'SET' setItems+=SetItem (',' setItems+=SetItem)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Set : SET SP? oC_SetItem ( ',' oC_SetItem )* ;
		// */
		//    'SET'
		public Keyword getSETKeyword_0() { return cSETKeyword_0; }
		
		//setItems+=SetItem
		public Assignment getSetItemsAssignment_1() { return cSetItemsAssignment_1; }
		
		//SetItem
		public RuleCall getSetItemsSetItemParserRuleCall_1_0() { return cSetItemsSetItemParserRuleCall_1_0; }
		
		//(',' setItems+=SetItem)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//setItems+=SetItem
		public Assignment getSetItemsAssignment_2_1() { return cSetItemsAssignment_2_1; }
		
		//SetItem
		public RuleCall getSetItemsSetItemParserRuleCall_2_1_0() { return cSetItemsSetItemParserRuleCall_2_1_0; }
	}
	public class SetItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.SetItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPropertyExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPropertyExpressionPropertyExpressionParserRuleCall_0_0_0 = (RuleCall)cPropertyExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cVariableAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cVariableAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cVariableAssignment_3_0.eContents().get(0);
		private final RuleCall cNodeLabelsParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//SetItem:
		///*
		// * oC_SetItem : ( oC_PropertyExpression SP? '=' SP? oC_Expression )
		// *            | ( oC_Variable SP? '=' SP? oC_Expression )
		// *            | ( oC_Variable SP? '+=' SP? oC_Expression )
		// *            | ( oC_Variable SP? oC_NodeLabels )
		// *            ;
		// */
		//    (propertyExpression=PropertyExpression '=' expression=Expression) | (variable=VariableDeclaration '='
		//    expression=Expression) | (variable=VariableDeclaration '+=' expression=Expression) | (variable=VariableDeclaration
		//    NodeLabels);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_SetItem : ( oC_PropertyExpression SP? '=' SP? oC_Expression )
		// *            | ( oC_Variable SP? '=' SP? oC_Expression )
		// *            | ( oC_Variable SP? '+=' SP? oC_Expression )
		// *            | ( oC_Variable SP? oC_NodeLabels )
		// *            ;
		// */
		//    (propertyExpression=PropertyExpression '=' expression=Expression) | (variable=VariableDeclaration '='
		//    expression=Expression) | (variable=VariableDeclaration '+=' expression=Expression) | (variable=VariableDeclaration
		//    NodeLabels)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_SetItem : ( oC_PropertyExpression SP? '=' SP? oC_Expression )
		// *            | ( oC_Variable SP? '=' SP? oC_Expression )
		// *            | ( oC_Variable SP? '+=' SP? oC_Expression )
		// *            | ( oC_Variable SP? oC_NodeLabels )
		// *            ;
		// */
		//    (propertyExpression=PropertyExpression '=' expression=Expression)
		public Group getGroup_0() { return cGroup_0; }
		
		//propertyExpression=PropertyExpression
		public Assignment getPropertyExpressionAssignment_0_0() { return cPropertyExpressionAssignment_0_0; }
		
		//PropertyExpression
		public RuleCall getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0() { return cPropertyExpressionPropertyExpressionParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//(variable=VariableDeclaration '='
		//   expression=Expression)
		public Group getGroup_1() { return cGroup_1; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0_0() { return cVariableVariableDeclarationParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//(variable=VariableDeclaration '+=' expression=Expression)
		public Group getGroup_2() { return cGroup_2; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_2_0_0() { return cVariableVariableDeclarationParserRuleCall_2_0_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_2_1() { return cPlusSignEqualsSignKeyword_2_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0() { return cExpressionExpressionParserRuleCall_2_2_0; }
		
		//(variable=VariableDeclaration
		//   NodeLabels)
		public Group getGroup_3() { return cGroup_3; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_3_0() { return cVariableAssignment_3_0; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_3_0_0() { return cVariableVariableDeclarationParserRuleCall_3_0_0; }
		
		//NodeLabels
		public RuleCall getNodeLabelsParserRuleCall_3_1() { return cNodeLabelsParserRuleCall_3_1; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDetachAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDetachDETACHKeyword_0_0 = (Keyword)cDetachAssignment_0.eContents().get(0);
		private final Keyword cDELETEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		
		//Delete:
		///*
		// * oC_Delete : ( DETACH SP )? DELETE SP? oC_Expression ( SP? ',' SP? oC_Expression )* ;
		// */
		//    (detach?='DETACH')? 'DELETE' expressions+=Expression (',' expressions+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Delete : ( DETACH SP )? DELETE SP? oC_Expression ( SP? ',' SP? oC_Expression )* ;
		// */
		//    (detach?='DETACH')? 'DELETE' expressions+=Expression (',' expressions+=Expression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Delete : ( DETACH SP )? DELETE SP? oC_Expression ( SP? ',' SP? oC_Expression )* ;
		// */
		//    (detach?='DETACH')?
		public Assignment getDetachAssignment_0() { return cDetachAssignment_0; }
		
		//'DETACH'
		public Keyword getDetachDETACHKeyword_0_0() { return cDetachDETACHKeyword_0_0; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_1() { return cDELETEKeyword_1; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRemoveItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRemoveItemsRemoveItemParserRuleCall_1_0 = (RuleCall)cRemoveItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRemoveItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRemoveItemsRemoveItemParserRuleCall_2_1_0 = (RuleCall)cRemoveItemsAssignment_2_1.eContents().get(0);
		
		//Remove:
		///*
		// * oC_Remove : REMOVE SP oC_RemoveItem ( SP? ',' SP? oC_RemoveItem )* ;
		// */
		//    'REMOVE' removeItems+=RemoveItem (',' removeItems+=RemoveItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Remove : REMOVE SP oC_RemoveItem ( SP? ',' SP? oC_RemoveItem )* ;
		// */
		//    'REMOVE' removeItems+=RemoveItem (',' removeItems+=RemoveItem)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Remove : REMOVE SP oC_RemoveItem ( SP? ',' SP? oC_RemoveItem )* ;
		// */
		//    'REMOVE'
		public Keyword getREMOVEKeyword_0() { return cREMOVEKeyword_0; }
		
		//removeItems+=RemoveItem
		public Assignment getRemoveItemsAssignment_1() { return cRemoveItemsAssignment_1; }
		
		//RemoveItem
		public RuleCall getRemoveItemsRemoveItemParserRuleCall_1_0() { return cRemoveItemsRemoveItemParserRuleCall_1_0; }
		
		//(',' removeItems+=RemoveItem)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//removeItems+=RemoveItem
		public Assignment getRemoveItemsAssignment_2_1() { return cRemoveItemsAssignment_2_1; }
		
		//RemoveItem
		public RuleCall getRemoveItemsRemoveItemParserRuleCall_2_1_0() { return cRemoveItemsRemoveItemParserRuleCall_2_1_0; }
	}
	public class RemoveItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RemoveItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRemoveItemLabelAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cNodeLabelsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRemoveItemPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPropertyExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyExpressionPropertyExpressionParserRuleCall_1_1_0 = (RuleCall)cPropertyExpressionAssignment_1_1.eContents().get(0);
		
		//RemoveItem:
		///*
		// * oC_RemoveItem : ( oC_Variable oC_NodeLabels )
		// *               | oC_PropertyExpression
		// *               ;
		// */
		//    ({RemoveItemLabel} variable=VariableDeclaration NodeLabels) | {RemoveItemProperty} propertyExpression=PropertyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RemoveItem : ( oC_Variable oC_NodeLabels )
		// *               | oC_PropertyExpression
		// *               ;
		// */
		//    ({RemoveItemLabel} variable=VariableDeclaration NodeLabels) | {RemoveItemProperty} propertyExpression=PropertyExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_RemoveItem : ( oC_Variable oC_NodeLabels )
		// *               | oC_PropertyExpression
		// *               ;
		// */
		//    ({RemoveItemLabel} variable=VariableDeclaration NodeLabels)
		public Group getGroup_0() { return cGroup_0; }
		
		//{RemoveItemLabel}
		public Action getRemoveItemLabelAction_0_0() { return cRemoveItemLabelAction_0_0; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_0_1_0() { return cVariableVariableDeclarationParserRuleCall_0_1_0; }
		
		//NodeLabels
		public RuleCall getNodeLabelsParserRuleCall_0_2() { return cNodeLabelsParserRuleCall_0_2; }
		
		//{RemoveItemProperty} propertyExpression=PropertyExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{RemoveItemProperty}
		public Action getRemoveItemPropertyAction_1_0() { return cRemoveItemPropertyAction_1_0; }
		
		//propertyExpression=PropertyExpression
		public Assignment getPropertyExpressionAssignment_1_1() { return cPropertyExpressionAssignment_1_1; }
		
		//PropertyExpression
		public RuleCall getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0() { return cPropertyExpressionPropertyExpressionParserRuleCall_1_1_0; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFOREACHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpdatingClausesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpdatingClausesUpdatingClauseParserRuleCall_6_0 = (RuleCall)cUpdatingClausesAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Foreach:
		///*
		// * oC_Foreach : FOREACH SP? '(' SP? oC_Variable SP IN SP oC_Expression SP? '|' ( SP oC_UpdatingClause )+ SP? ')' ;
		// */
		//    'FOREACH' '(' variable=VariableDeclaration 'IN' expression=Expression '|' (updatingClauses+=UpdatingClause)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Foreach : FOREACH SP? '(' SP? oC_Variable SP IN SP oC_Expression SP? '|' ( SP oC_UpdatingClause )+ SP? ')' ;
		// */
		//    'FOREACH' '(' variable=VariableDeclaration 'IN' expression=Expression '|' (updatingClauses+=UpdatingClause)+ ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Foreach : FOREACH SP? '(' SP? oC_Variable SP IN SP oC_Expression SP? '|' ( SP oC_UpdatingClause )+ SP? ')' ;
		// */
		//    'FOREACH'
		public Keyword getFOREACHKeyword_0() { return cFOREACHKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_2_0() { return cVariableVariableDeclarationParserRuleCall_2_0; }
		
		//'IN'
		public Keyword getINKeyword_3() { return cINKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }
		
		//(updatingClauses+=UpdatingClause)+
		public Assignment getUpdatingClausesAssignment_6() { return cUpdatingClausesAssignment_6; }
		
		//UpdatingClause
		public RuleCall getUpdatingClausesUpdatingClauseParserRuleCall_6_0() { return cUpdatingClausesUpdatingClauseParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class InQueryCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.InQueryCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvocationExplicitProcedureInvocationParserRuleCall_1_0 = (RuleCall)cInvocationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cYIELDKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cYieldItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cYieldItemsYieldItemsParserRuleCall_2_1_0 = (RuleCall)cYieldItemsAssignment_2_1.eContents().get(0);
		
		//InQueryCall:
		///*
		// * oC_InQueryCall : CALL SP oC_ExplicitProcedureInvocation ( SP? YIELD SP oC_YieldItems )? ;
		// */
		//    'CALL' invocation=ExplicitProcedureInvocation ('YIELD' yieldItems=YieldItems)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_InQueryCall : CALL SP oC_ExplicitProcedureInvocation ( SP? YIELD SP oC_YieldItems )? ;
		// */
		//    'CALL' invocation=ExplicitProcedureInvocation ('YIELD' yieldItems=YieldItems)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_InQueryCall : CALL SP oC_ExplicitProcedureInvocation ( SP? YIELD SP oC_YieldItems )? ;
		// */
		//    'CALL'
		public Keyword getCALLKeyword_0() { return cCALLKeyword_0; }
		
		//invocation=ExplicitProcedureInvocation
		public Assignment getInvocationAssignment_1() { return cInvocationAssignment_1; }
		
		//ExplicitProcedureInvocation
		public RuleCall getInvocationExplicitProcedureInvocationParserRuleCall_1_0() { return cInvocationExplicitProcedureInvocationParserRuleCall_1_0; }
		
		//('YIELD' yieldItems=YieldItems)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'YIELD'
		public Keyword getYIELDKeyword_2_0() { return cYIELDKeyword_2_0; }
		
		//yieldItems=YieldItems
		public Assignment getYieldItemsAssignment_2_1() { return cYieldItemsAssignment_2_1; }
		
		//YieldItems
		public RuleCall getYieldItemsYieldItemsParserRuleCall_2_1_0() { return cYieldItemsYieldItemsParserRuleCall_2_1_0; }
	}
	public class StandaloneCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.StandaloneCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cInvocationAlternatives_1_0 = (Alternatives)cInvocationAssignment_1.eContents().get(0);
		private final RuleCall cInvocationExplicitProcedureInvocationParserRuleCall_1_0_0 = (RuleCall)cInvocationAlternatives_1_0.eContents().get(0);
		private final RuleCall cInvocationImplicitProcedureInvocationParserRuleCall_1_0_1 = (RuleCall)cInvocationAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cYIELDKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cYieldItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cYieldItemsYieldItemsParserRuleCall_2_1_0 = (RuleCall)cYieldItemsAssignment_2_1.eContents().get(0);
		
		//StandaloneCall:
		///*
		// * oC_StandaloneCall : CALL SP ( oC_ExplicitProcedureInvocation | oC_ImplicitProcedureInvocation ) ( SP YIELD SP oC_YieldItems )? ;
		// */
		//    'CALL' invocation=(ExplicitProcedureInvocation | ImplicitProcedureInvocation) ('YIELD' yieldItems=YieldItems)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_StandaloneCall : CALL SP ( oC_ExplicitProcedureInvocation | oC_ImplicitProcedureInvocation ) ( SP YIELD SP oC_YieldItems )? ;
		// */
		//    'CALL' invocation=(ExplicitProcedureInvocation | ImplicitProcedureInvocation) ('YIELD' yieldItems=YieldItems)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_StandaloneCall : CALL SP ( oC_ExplicitProcedureInvocation | oC_ImplicitProcedureInvocation ) ( SP YIELD SP oC_YieldItems )? ;
		// */
		//    'CALL'
		public Keyword getCALLKeyword_0() { return cCALLKeyword_0; }
		
		//invocation=(ExplicitProcedureInvocation | ImplicitProcedureInvocation)
		public Assignment getInvocationAssignment_1() { return cInvocationAssignment_1; }
		
		//(ExplicitProcedureInvocation | ImplicitProcedureInvocation)
		public Alternatives getInvocationAlternatives_1_0() { return cInvocationAlternatives_1_0; }
		
		//ExplicitProcedureInvocation
		public RuleCall getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0() { return cInvocationExplicitProcedureInvocationParserRuleCall_1_0_0; }
		
		//ImplicitProcedureInvocation
		public RuleCall getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1() { return cInvocationImplicitProcedureInvocationParserRuleCall_1_0_1; }
		
		//('YIELD' yieldItems=YieldItems)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'YIELD'
		public Keyword getYIELDKeyword_2_0() { return cYIELDKeyword_2_0; }
		
		//yieldItems=YieldItems
		public Assignment getYieldItemsAssignment_2_1() { return cYieldItemsAssignment_2_1; }
		
		//YieldItems
		public RuleCall getYieldItemsYieldItemsParserRuleCall_2_1_0() { return cYieldItemsYieldItemsParserRuleCall_2_1_0; }
	}
	public class YieldItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.YieldItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYieldItemsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cItemsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cItemsYieldItemParserRuleCall_1_0_0_0 = (RuleCall)cItemsAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cItemsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cItemsYieldItemParserRuleCall_1_0_1_1_0 = (RuleCall)cItemsAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//YieldItems:
		///*
		// * oC_YieldItems : ( oC_YieldItem ( SP? ',' SP? oC_YieldItem )* )
		// *               | '-'
		// *               ;
		// */
		//    {YieldItems} ((items+=YieldItem (',' items+=YieldItem)*) | '-');
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_YieldItems : ( oC_YieldItem ( SP? ',' SP? oC_YieldItem )* )
		// *               | '-'
		// *               ;
		// */
		//    {YieldItems} ((items+=YieldItem (',' items+=YieldItem)*) | '-')
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_YieldItems : ( oC_YieldItem ( SP? ',' SP? oC_YieldItem )* )
		// *               | '-'
		// *               ;
		// */
		//    {YieldItems}
		public Action getYieldItemsAction_0() { return cYieldItemsAction_0; }
		
		//((items+=YieldItem (',' items+=YieldItem)*) | '-')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(items+=YieldItem (',' items+=YieldItem)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//items+=YieldItem
		public Assignment getItemsAssignment_1_0_0() { return cItemsAssignment_1_0_0; }
		
		//YieldItem
		public RuleCall getItemsYieldItemParserRuleCall_1_0_0_0() { return cItemsYieldItemParserRuleCall_1_0_0_0; }
		
		//(',' items+=YieldItem)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }
		
		//items+=YieldItem
		public Assignment getItemsAssignment_1_0_1_1() { return cItemsAssignment_1_0_1_1; }
		
		//YieldItem
		public RuleCall getItemsYieldItemParserRuleCall_1_0_1_1_0() { return cItemsYieldItemParserRuleCall_1_0_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}
	public class YieldItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.YieldItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFieldProcedureResultFieldParserRuleCall_0_0_0 = (RuleCall)cFieldAssignment_0_0.eContents().get(0);
		private final Keyword cASKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//YieldItem:
		///*
		// * oC_YieldItem : ( oC_ProcedureResultField SP AS SP )? oC_Variable ;
		// */
		//    (field=ProcedureResultField 'AS')? variable=VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_YieldItem : ( oC_ProcedureResultField SP AS SP )? oC_Variable ;
		// */
		//    (field=ProcedureResultField 'AS')? variable=VariableDeclaration
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_YieldItem : ( oC_ProcedureResultField SP AS SP )? oC_Variable ;
		// */
		//    (field=ProcedureResultField 'AS')?
		public Group getGroup_0() { return cGroup_0; }
		
		//field=ProcedureResultField
		public Assignment getFieldAssignment_0_0() { return cFieldAssignment_0_0; }
		
		//ProcedureResultField
		public RuleCall getFieldProcedureResultFieldParserRuleCall_0_0_0() { return cFieldProcedureResultFieldParserRuleCall_0_0_0; }
		
		//'AS'
		public Keyword getASKeyword_0_1() { return cASKeyword_0_1; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0() { return cVariableVariableDeclarationParserRuleCall_1_0; }
	}
	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWITHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnBodyReturnBodyParserRuleCall_1_0 = (RuleCall)cReturnBodyAssignment_1.eContents().get(0);
		private final Assignment cWhereAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereWhereParserRuleCall_2_0 = (RuleCall)cWhereAssignment_2.eContents().get(0);
		
		//With:
		///*
		// * oC_With : WITH ( SP? DISTINCT )? SP oC_ReturnBody ( SP? oC_Where )? ;
		// */
		//    'WITH' returnBody=ReturnBody where=Where?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_With : WITH ( SP? DISTINCT )? SP oC_ReturnBody ( SP? oC_Where )? ;
		// */
		//    'WITH' returnBody=ReturnBody where=Where?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_With : WITH ( SP? DISTINCT )? SP oC_ReturnBody ( SP? oC_Where )? ;
		// */
		//    'WITH'
		public Keyword getWITHKeyword_0() { return cWITHKeyword_0; }
		
		//returnBody=ReturnBody
		public Assignment getReturnBodyAssignment_1() { return cReturnBodyAssignment_1; }
		
		//ReturnBody
		public RuleCall getReturnBodyReturnBodyParserRuleCall_1_0() { return cReturnBodyReturnBodyParserRuleCall_1_0; }
		
		//where=Where?
		public Assignment getWhereAssignment_2() { return cWhereAssignment_2; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_2_0() { return cWhereWhereParserRuleCall_2_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReturnRETURNKeyword_0_0 = (Keyword)cReturnAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyReturnBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Return:
		///*
		// * oC_Return : RETURN ( SP? DISTINCT )? SP oC_ReturnBody ;
		// */
		//    (return='RETURN'  body=ReturnBody);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Return : RETURN ( SP? DISTINCT )? SP oC_ReturnBody ;
		// */
		//    (return='RETURN'  body=ReturnBody)
		public Group getGroup() { return cGroup; }
		
		//return='RETURN'
		public Assignment getReturnAssignment_0() { return cReturnAssignment_0; }
		
		//'RETURN'
		public Keyword getReturnRETURNKeyword_0_0() { return cReturnRETURNKeyword_0_0; }
		
		//body=ReturnBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ReturnBody
		public RuleCall getBodyReturnBodyParserRuleCall_1_0() { return cBodyReturnBodyParserRuleCall_1_0; }
	}
	public class ReturnBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ReturnBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDistinctAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDistinctDISTINCTKeyword_0_0 = (Keyword)cDistinctAssignment_0.eContents().get(0);
		private final Assignment cReturnItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnItemsReturnItemsParserRuleCall_1_0 = (RuleCall)cReturnItemsAssignment_1.eContents().get(0);
		private final Assignment cOrderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderOrderParserRuleCall_2_0 = (RuleCall)cOrderAssignment_2.eContents().get(0);
		private final Assignment cSkipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSkipSkipParserRuleCall_3_0 = (RuleCall)cSkipAssignment_3.eContents().get(0);
		private final Assignment cLimitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLimitLimitParserRuleCall_4_0 = (RuleCall)cLimitAssignment_4.eContents().get(0);
		
		//ReturnBody:
		///*
		// * oC_ReturnBody : oC_ReturnItems ( SP oC_Order )? ( SP oC_Skip )? ( SP oC_Limit )? ;
		// */
		//    distinct?='DISTINCT'? returnItems=ReturnItems (order=Order)? (skip=Skip)? (limit=Limit)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ReturnBody : oC_ReturnItems ( SP oC_Order )? ( SP oC_Skip )? ( SP oC_Limit )? ;
		// */
		//    distinct?='DISTINCT'? returnItems=ReturnItems (order=Order)? (skip=Skip)? (limit=Limit)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ReturnBody : oC_ReturnItems ( SP oC_Order )? ( SP oC_Skip )? ( SP oC_Limit )? ;
		// */
		//    distinct?='DISTINCT'?
		public Assignment getDistinctAssignment_0() { return cDistinctAssignment_0; }
		
		//'DISTINCT'
		public Keyword getDistinctDISTINCTKeyword_0_0() { return cDistinctDISTINCTKeyword_0_0; }
		
		//returnItems=ReturnItems
		public Assignment getReturnItemsAssignment_1() { return cReturnItemsAssignment_1; }
		
		//ReturnItems
		public RuleCall getReturnItemsReturnItemsParserRuleCall_1_0() { return cReturnItemsReturnItemsParserRuleCall_1_0; }
		
		//(order=Order)?
		public Assignment getOrderAssignment_2() { return cOrderAssignment_2; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_2_0() { return cOrderOrderParserRuleCall_2_0; }
		
		//(skip=Skip)?
		public Assignment getSkipAssignment_3() { return cSkipAssignment_3; }
		
		//Skip
		public RuleCall getSkipSkipParserRuleCall_3_0() { return cSkipSkipParserRuleCall_3_0; }
		
		//(limit=Limit)?
		public Assignment getLimitAssignment_4() { return cLimitAssignment_4; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_4_0() { return cLimitLimitParserRuleCall_4_0; }
	}
	public class ReturnItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ReturnItems");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReturnItemsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cAllAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_1_0_0 = (Keyword)cAllAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cItemsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cItemsReturnItemParserRuleCall_0_1_1_1_0 = (RuleCall)cItemsAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cItemsReturnItemParserRuleCall_1_0_0 = (RuleCall)cItemsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cItemsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cItemsReturnItemParserRuleCall_1_1_1_0 = (RuleCall)cItemsAssignment_1_1_1.eContents().get(0);
		
		//ReturnItems:
		///*
		// * oC_ReturnItems : ( '*' ( SP? ',' SP? oC_ReturnItem )* )
		// *                | ( oC_ReturnItem ( SP? ',' SP? oC_ReturnItem )* )
		// *                ;
		// */
		//    {ReturnItems} (all='*' (',' items+=ReturnItem)*) | (items+=ReturnItem (',' items+=ReturnItem)*);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ReturnItems : ( '*' ( SP? ',' SP? oC_ReturnItem )* )
		// *                | ( oC_ReturnItem ( SP? ',' SP? oC_ReturnItem )* )
		// *                ;
		// */
		//    {ReturnItems} (all='*' (',' items+=ReturnItem)*) | (items+=ReturnItem (',' items+=ReturnItem)*)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_ReturnItems : ( '*' ( SP? ',' SP? oC_ReturnItem )* )
		// *                | ( oC_ReturnItem ( SP? ',' SP? oC_ReturnItem )* )
		// *                ;
		// */
		//    {ReturnItems} (all='*' (',' items+=ReturnItem)*)
		public Group getGroup_0() { return cGroup_0; }
		
		///*
		// * oC_ReturnItems : ( '*' ( SP? ',' SP? oC_ReturnItem )* )
		// *                | ( oC_ReturnItem ( SP? ',' SP? oC_ReturnItem )* )
		// *                ;
		// */
		//    {ReturnItems}
		public Action getReturnItemsAction_0_0() { return cReturnItemsAction_0_0; }
		
		//(all='*' (',' items+=ReturnItem)*)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//all='*'
		public Assignment getAllAssignment_0_1_0() { return cAllAssignment_0_1_0; }
		
		//'*'
		public Keyword getAllAsteriskKeyword_0_1_0_0() { return cAllAsteriskKeyword_0_1_0_0; }
		
		//(',' items+=ReturnItem)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }
		
		//items+=ReturnItem
		public Assignment getItemsAssignment_0_1_1_1() { return cItemsAssignment_0_1_1_1; }
		
		//ReturnItem
		public RuleCall getItemsReturnItemParserRuleCall_0_1_1_1_0() { return cItemsReturnItemParserRuleCall_0_1_1_1_0; }
		
		//(items+=ReturnItem (',' items+=ReturnItem)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//items+=ReturnItem
		public Assignment getItemsAssignment_1_0() { return cItemsAssignment_1_0; }
		
		//ReturnItem
		public RuleCall getItemsReturnItemParserRuleCall_1_0_0() { return cItemsReturnItemParserRuleCall_1_0_0; }
		
		//(',' items+=ReturnItem)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//items+=ReturnItem
		public Assignment getItemsAssignment_1_1_1() { return cItemsAssignment_1_1_1; }
		
		//ReturnItem
		public RuleCall getItemsReturnItemParserRuleCall_1_1_1_0() { return cItemsReturnItemParserRuleCall_1_1_1_0; }
	}
	public class ReturnItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ReturnItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasVariableDeclarationParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//ReturnItem:
		///*
		// * oC_ReturnItem : ( oC_Expression SP AS SP oC_Variable )
		// *               | oC_Expression
		// *               ;
		// */
		//    expression=Expression ('AS' alias=VariableDeclaration)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ReturnItem : ( oC_Expression SP AS SP oC_Variable )
		// *               | oC_Expression
		// *               ;
		// */
		//    expression=Expression ('AS' alias=VariableDeclaration)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ReturnItem : ( oC_Expression SP AS SP oC_Variable )
		// *               | oC_Expression
		// *               ;
		// */
		//    expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//('AS' alias=VariableDeclaration)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=VariableDeclaration
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//VariableDeclaration
		public RuleCall getAliasVariableDeclarationParserRuleCall_1_1_0() { return cAliasVariableDeclarationParserRuleCall_1_1_0; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Order");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORDERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderByAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderBySortItemParserRuleCall_2_0 = (RuleCall)cOrderByAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrderByAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrderBySortItemParserRuleCall_3_1_0 = (RuleCall)cOrderByAssignment_3_1.eContents().get(0);
		
		//Order:
		///*
		// * oC_Order : ORDER SP BY SP oC_SortItem ( ',' SP? oC_SortItem )* ;
		// */
		//    'ORDER' 'BY' orderBy+=SortItem (',' orderBy+=SortItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Order : ORDER SP BY SP oC_SortItem ( ',' SP? oC_SortItem )* ;
		// */
		//    'ORDER' 'BY' orderBy+=SortItem (',' orderBy+=SortItem)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Order : ORDER SP BY SP oC_SortItem ( ',' SP? oC_SortItem )* ;
		// */
		//    'ORDER'
		public Keyword getORDERKeyword_0() { return cORDERKeyword_0; }
		
		//'BY'
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }
		
		//orderBy+=SortItem
		public Assignment getOrderByAssignment_2() { return cOrderByAssignment_2; }
		
		//SortItem
		public RuleCall getOrderBySortItemParserRuleCall_2_0() { return cOrderBySortItemParserRuleCall_2_0; }
		
		//(',' orderBy+=SortItem)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//orderBy+=SortItem
		public Assignment getOrderByAssignment_3_1() { return cOrderByAssignment_3_1; }
		
		//SortItem
		public RuleCall getOrderBySortItemParserRuleCall_3_1_0() { return cOrderBySortItemParserRuleCall_3_1_0; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKIPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSkipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSkipExpressionParserRuleCall_1_0 = (RuleCall)cSkipAssignment_1.eContents().get(0);
		
		//Skip:
		///*
		// * oC_Skip : L_SKIP SP oC_Expression ;
		// */
		//    'SKIP' skip=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Skip : L_SKIP SP oC_Expression ;
		// */
		//    'SKIP' skip=Expression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Skip : L_SKIP SP oC_Expression ;
		// */
		//    'SKIP'
		public Keyword getSKIPKeyword_0() { return cSKIPKeyword_0; }
		
		//skip=Expression
		public Assignment getSkipAssignment_1() { return cSkipAssignment_1; }
		
		//Expression
		public RuleCall getSkipExpressionParserRuleCall_1_0() { return cSkipExpressionParserRuleCall_1_0; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLIMITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitExpressionParserRuleCall_1_0 = (RuleCall)cLimitAssignment_1.eContents().get(0);
		
		//Limit:
		///*
		// * oC_Limit : LIMIT SP oC_Expression ;
		// */
		//    'LIMIT' limit=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Limit : LIMIT SP oC_Expression ;
		// */
		//    'LIMIT' limit=Expression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Limit : LIMIT SP oC_Expression ;
		// */
		//    'LIMIT'
		public Keyword getLIMITKeyword_0() { return cLIMITKeyword_0; }
		
		//limit=Expression
		public Assignment getLimitAssignment_1() { return cLimitAssignment_1; }
		
		//Expression
		public RuleCall getLimitExpressionParserRuleCall_1_0() { return cLimitExpressionParserRuleCall_1_0; }
	}
	public class SortItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.SortItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cSortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSortAlternatives_1_0 = (Alternatives)cSortAssignment_1.eContents().get(0);
		private final Keyword cSortDESCENDINGKeyword_1_0_0 = (Keyword)cSortAlternatives_1_0.eContents().get(0);
		private final Keyword cSortDESCKeyword_1_0_1 = (Keyword)cSortAlternatives_1_0.eContents().get(1);
		private final Keyword cSortASCENDINGKeyword_1_0_2 = (Keyword)cSortAlternatives_1_0.eContents().get(2);
		private final Keyword cSortASCKeyword_1_0_3 = (Keyword)cSortAlternatives_1_0.eContents().get(3);
		
		//SortItem:
		///*
		// * oC_SortItem : oC_Expression ( SP? ( ASCENDING | ASC | DESCENDING | DESC ) )? ;
		// */
		//    (expression=Expression sort=('DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC')?);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_SortItem : oC_Expression ( SP? ( ASCENDING | ASC | DESCENDING | DESC ) )? ;
		// */
		//    (expression=Expression sort=('DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC')?)
		public Group getGroup() { return cGroup; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//sort=('DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC')?
		public Assignment getSortAssignment_1() { return cSortAssignment_1; }
		
		//('DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC')
		public Alternatives getSortAlternatives_1_0() { return cSortAlternatives_1_0; }
		
		//'DESCENDING'
		public Keyword getSortDESCENDINGKeyword_1_0_0() { return cSortDESCENDINGKeyword_1_0_0; }
		
		//'DESC'
		public Keyword getSortDESCKeyword_1_0_1() { return cSortDESCKeyword_1_0_1; }
		
		//'ASCENDING'
		public Keyword getSortASCENDINGKeyword_1_0_2() { return cSortASCENDINGKeyword_1_0_2; }
		
		//'ASC'
		public Keyword getSortASCKeyword_1_0_3() { return cSortASCKeyword_1_0_3; }
	}
	public class HintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Hint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIndexHintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cUSINGKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cINDEXKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Assignment cVariableAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_0_5_0 = (RuleCall)cVariableAssignment_0_5.eContents().get(0);
		private final Assignment cNodeLabelAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cNodeLabelNodeLabelParserRuleCall_0_6_0 = (RuleCall)cNodeLabelAssignment_0_6.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_7 = (RuleCall)cGroup_0.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Assignment cPropertyKeyNameAssignment_0_9 = (Assignment)cGroup_0.eContents().get(9);
		private final RuleCall cPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0 = (RuleCall)cPropertyKeyNameAssignment_0_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_10 = (Keyword)cGroup_0.eContents().get(10);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cJoinHintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cUSINGKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cJOINKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Keyword cONKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cVariablesAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_1_5_0 = (RuleCall)cVariablesAssignment_1_1_5.eContents().get(0);
		private final Group cGroup_1_1_6 = (Group)cGroup_1_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_1_6_0 = (Keyword)cGroup_1_1_6.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1_6_1 = (Assignment)cGroup_1_1_6.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_1_6_1_0 = (RuleCall)cVariablesAssignment_1_1_6_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cScanHintAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cUSINGKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cSCANKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Assignment cVariableAssignment_2_1_4 = (Assignment)cGroup_2_1.eContents().get(4);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_2_1_4_0 = (RuleCall)cVariableAssignment_2_1_4.eContents().get(0);
		private final Assignment cNodeLabelAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cNodeLabelNodeLabelParserRuleCall_2_1_5_0 = (RuleCall)cNodeLabelAssignment_2_1_5.eContents().get(0);
		
		//Hint hidden():
		///*
		// * oC_Hint : SP? ( ( USING SP INDEX SP oC_Variable oC_NodeLabel '(' oC_PropertyKeyName ')' ) | ( USING SP JOIN SP ON SP oC_Variable ( SP? ',' SP? oC_Variable )* ) | ( USING SP SCAN SP oC_Variable oC_NodeLabel ) ) ;
		// */
		//    {IndexHint} 'USING' WS 'INDEX' WS variable=VariableDeclaration nodeLabel=NodeLabel WS '('
		//    propertyKeyName=PropertyKeyName ')' | {JoinHint} ('USING' WS 'JOIN' WS 'ON' variables+=VariableDeclaration (','
		//    variables+=VariableDeclaration)*) | {ScanHint} ('USING' WS 'SCAN' WS variable=VariableDeclaration
		//    nodeLabel=NodeLabel);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Hint : SP? ( ( USING SP INDEX SP oC_Variable oC_NodeLabel '(' oC_PropertyKeyName ')' ) | ( USING SP JOIN SP ON SP oC_Variable ( SP? ',' SP? oC_Variable )* ) | ( USING SP SCAN SP oC_Variable oC_NodeLabel ) ) ;
		// */
		//    {IndexHint} 'USING' WS 'INDEX' WS variable=VariableDeclaration nodeLabel=NodeLabel WS '('
		//    propertyKeyName=PropertyKeyName ')' | {JoinHint} ('USING' WS 'JOIN' WS 'ON' variables+=VariableDeclaration (','
		//    variables+=VariableDeclaration)*) | {ScanHint} ('USING' WS 'SCAN' WS variable=VariableDeclaration
		//    nodeLabel=NodeLabel)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Hint : SP? ( ( USING SP INDEX SP oC_Variable oC_NodeLabel '(' oC_PropertyKeyName ')' ) | ( USING SP JOIN SP ON SP oC_Variable ( SP? ',' SP? oC_Variable )* ) | ( USING SP SCAN SP oC_Variable oC_NodeLabel ) ) ;
		// */
		//    {IndexHint} 'USING' WS 'INDEX' WS variable=VariableDeclaration nodeLabel=NodeLabel WS '('
		//    propertyKeyName=PropertyKeyName ')'
		public Group getGroup_0() { return cGroup_0; }
		
		///*
		// * oC_Hint : SP? ( ( USING SP INDEX SP oC_Variable oC_NodeLabel '(' oC_PropertyKeyName ')' ) | ( USING SP JOIN SP ON SP oC_Variable ( SP? ',' SP? oC_Variable )* ) | ( USING SP SCAN SP oC_Variable oC_NodeLabel ) ) ;
		// */
		//    {IndexHint}
		public Action getIndexHintAction_0_0() { return cIndexHintAction_0_0; }
		
		//'USING'
		public Keyword getUSINGKeyword_0_1() { return cUSINGKeyword_0_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_0_2() { return cWSTerminalRuleCall_0_2; }
		
		//'INDEX'
		public Keyword getINDEXKeyword_0_3() { return cINDEXKeyword_0_3; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_0_5() { return cVariableAssignment_0_5; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_0_5_0() { return cVariableVariableDeclarationParserRuleCall_0_5_0; }
		
		//nodeLabel=NodeLabel
		public Assignment getNodeLabelAssignment_0_6() { return cNodeLabelAssignment_0_6; }
		
		//NodeLabel
		public RuleCall getNodeLabelNodeLabelParserRuleCall_0_6_0() { return cNodeLabelNodeLabelParserRuleCall_0_6_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_0_7() { return cWSTerminalRuleCall_0_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_8() { return cLeftParenthesisKeyword_0_8; }
		
		//propertyKeyName=PropertyKeyName
		public Assignment getPropertyKeyNameAssignment_0_9() { return cPropertyKeyNameAssignment_0_9; }
		
		//PropertyKeyName
		public RuleCall getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0() { return cPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_10() { return cRightParenthesisKeyword_0_10; }
		
		//{JoinHint} ('USING' WS 'JOIN' WS 'ON' variables+=VariableDeclaration (','
		//   variables+=VariableDeclaration)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//{JoinHint}
		public Action getJoinHintAction_1_0() { return cJoinHintAction_1_0; }
		
		//('USING' WS 'JOIN' WS 'ON' variables+=VariableDeclaration (','
		//   variables+=VariableDeclaration)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'USING'
		public Keyword getUSINGKeyword_1_1_0() { return cUSINGKeyword_1_1_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_1_1() { return cWSTerminalRuleCall_1_1_1; }
		
		//'JOIN'
		public Keyword getJOINKeyword_1_1_2() { return cJOINKeyword_1_1_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_1_3() { return cWSTerminalRuleCall_1_1_3; }
		
		//'ON'
		public Keyword getONKeyword_1_1_4() { return cONKeyword_1_1_4; }
		
		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1_1_5() { return cVariablesAssignment_1_1_5; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_1_5_0() { return cVariablesVariableDeclarationParserRuleCall_1_1_5_0; }
		
		//(','
		//   variables+=VariableDeclaration)*
		public Group getGroup_1_1_6() { return cGroup_1_1_6; }
		
		//','
		public Keyword getCommaKeyword_1_1_6_0() { return cCommaKeyword_1_1_6_0; }
		
		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1_1_6_1() { return cVariablesAssignment_1_1_6_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_1_6_1_0; }
		
		//{ScanHint} ('USING' WS 'SCAN' WS variable=VariableDeclaration
		//   nodeLabel=NodeLabel)
		public Group getGroup_2() { return cGroup_2; }
		
		//{ScanHint}
		public Action getScanHintAction_2_0() { return cScanHintAction_2_0; }
		
		//('USING' WS 'SCAN' WS variable=VariableDeclaration
		//   nodeLabel=NodeLabel)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'USING'
		public Keyword getUSINGKeyword_2_1_0() { return cUSINGKeyword_2_1_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_2_1_1() { return cWSTerminalRuleCall_2_1_1; }
		
		//'SCAN'
		public Keyword getSCANKeyword_2_1_2() { return cSCANKeyword_2_1_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_2_1_3() { return cWSTerminalRuleCall_2_1_3; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_2_1_4() { return cVariableAssignment_2_1_4; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_2_1_4_0() { return cVariableVariableDeclarationParserRuleCall_2_1_4_0; }
		
		//nodeLabel=NodeLabel
		public Assignment getNodeLabelAssignment_2_1_5() { return cNodeLabelAssignment_2_1_5; }
		
		//NodeLabel
		public RuleCall getNodeLabelNodeLabelParserRuleCall_2_1_5_0() { return cNodeLabelNodeLabelParserRuleCall_2_1_5_0; }
	}
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTARTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartPointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartPointStartPointParserRuleCall_1_0 = (RuleCall)cStartPointAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStartPointAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStartPointStartPointParserRuleCall_2_1_0 = (RuleCall)cStartPointAssignment_2_1.eContents().get(0);
		private final Assignment cWhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereWhereParserRuleCall_3_0 = (RuleCall)cWhereAssignment_3.eContents().get(0);
		
		//Start:
		///*
		// * oC_Start : START SP oC_StartPoint ( SP? ',' SP? oC_StartPoint )* oC_Where? ;
		// */
		//    'START' startPoint+=StartPoint (',' startPoint+=StartPoint)* where=Where?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Start : START SP oC_StartPoint ( SP? ',' SP? oC_StartPoint )* oC_Where? ;
		// */
		//    'START' startPoint+=StartPoint (',' startPoint+=StartPoint)* where=Where?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Start : START SP oC_StartPoint ( SP? ',' SP? oC_StartPoint )* oC_Where? ;
		// */
		//    'START'
		public Keyword getSTARTKeyword_0() { return cSTARTKeyword_0; }
		
		//startPoint+=StartPoint
		public Assignment getStartPointAssignment_1() { return cStartPointAssignment_1; }
		
		//StartPoint
		public RuleCall getStartPointStartPointParserRuleCall_1_0() { return cStartPointStartPointParserRuleCall_1_0; }
		
		//(',' startPoint+=StartPoint)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//startPoint+=StartPoint
		public Assignment getStartPointAssignment_2_1() { return cStartPointAssignment_2_1; }
		
		//StartPoint
		public RuleCall getStartPointStartPointParserRuleCall_2_1_0() { return cStartPointStartPointParserRuleCall_2_1_0; }
		
		//where=Where?
		public Assignment getWhereAssignment_3() { return cWhereAssignment_3; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_3_0() { return cWhereWhereParserRuleCall_3_0; }
	}
	public class StartPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.StartPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLookupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLookupLookupParserRuleCall_2_0 = (RuleCall)cLookupAssignment_2.eContents().get(0);
		
		//StartPoint:
		///*
		// * oC_StartPoint : oC_Variable SP? '=' SP? oC_Lookup ;
		// */
		//    variable=VariableDeclaration '=' lookup=Lookup;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_StartPoint : oC_Variable SP? '=' SP? oC_Lookup ;
		// */
		//    variable=VariableDeclaration '=' lookup=Lookup
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_StartPoint : oC_Variable SP? '=' SP? oC_Lookup ;
		// */
		//    variable=VariableDeclaration
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_0_0() { return cVariableVariableDeclarationParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//lookup=Lookup
		public Assignment getLookupAssignment_2() { return cLookupAssignment_2; }
		
		//Lookup
		public RuleCall getLookupLookupParserRuleCall_2_0() { return cLookupLookupParserRuleCall_2_0; }
	}
	public class LookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Lookup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeLookupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipLookupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Lookup:
		///*
		// * oC_Lookup : oC_NodeLookup
		// *           | oC_RelationshipLookup
		// *           ;
		// */
		//    NodeLookup | RelationshipLookup;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Lookup : oC_NodeLookup
		// *           | oC_RelationshipLookup
		// *           ;
		// */
		//    NodeLookup | RelationshipLookup
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Lookup : oC_NodeLookup
		// *           | oC_RelationshipLookup
		// *           ;
		// */
		//    NodeLookup
		public RuleCall getNodeLookupParserRuleCall_0() { return cNodeLookupParserRuleCall_0; }
		
		//RelationshipLookup
		public RuleCall getRelationshipLookupParserRuleCall_1() { return cRelationshipLookupParserRuleCall_1; }
	}
	public class NodeLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NodeLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIdentifiedIndexLookupParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIndexQueryParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cIdLookupParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//NodeLookup:
		///*
		// * oC_NodeLookup : NODE SP? ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
		// */
		//    'NODE' (IdentifiedIndexLookup | IndexQuery | IdLookup);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NodeLookup : NODE SP? ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
		// */
		//    'NODE' (IdentifiedIndexLookup | IndexQuery | IdLookup)
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_NodeLookup : NODE SP? ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
		// */
		//    'NODE'
		public Keyword getNODEKeyword_0() { return cNODEKeyword_0; }
		
		//(IdentifiedIndexLookup | IndexQuery | IdLookup)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//IdentifiedIndexLookup
		public RuleCall getIdentifiedIndexLookupParserRuleCall_1_0() { return cIdentifiedIndexLookupParserRuleCall_1_0; }
		
		//IndexQuery
		public RuleCall getIndexQueryParserRuleCall_1_1() { return cIndexQueryParserRuleCall_1_1; }
		
		//IdLookup
		public RuleCall getIdLookupParserRuleCall_1_2() { return cIdLookupParserRuleCall_1_2; }
	}
	public class RelationshipLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRELATIONSHIPKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRELKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIdentifiedIndexLookupParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIndexQueryParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cIdLookupParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//RelationshipLookup:
		///*
		// * oC_RelationshipLookup : ( RELATIONSHIP | REL ) ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
		// */
		//    ('RELATIONSHIP' | 'REL') (IdentifiedIndexLookup | IndexQuery | IdLookup);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipLookup : ( RELATIONSHIP | REL ) ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
		// */
		//    ('RELATIONSHIP' | 'REL') (IdentifiedIndexLookup | IndexQuery | IdLookup)
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelationshipLookup : ( RELATIONSHIP | REL ) ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
		// */
		//    ('RELATIONSHIP' | 'REL')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'RELATIONSHIP'
		public Keyword getRELATIONSHIPKeyword_0_0() { return cRELATIONSHIPKeyword_0_0; }
		
		//'REL'
		public Keyword getRELKeyword_0_1() { return cRELKeyword_0_1; }
		
		//(IdentifiedIndexLookup | IndexQuery | IdLookup)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//IdentifiedIndexLookup
		public RuleCall getIdentifiedIndexLookupParserRuleCall_1_0() { return cIdentifiedIndexLookupParserRuleCall_1_0; }
		
		//IndexQuery
		public RuleCall getIndexQueryParserRuleCall_1_1() { return cIndexQueryParserRuleCall_1_1; }
		
		//IdLookup
		public RuleCall getIdLookupParserRuleCall_1_2() { return cIdLookupParserRuleCall_1_2; }
	}
	public class IdentifiedIndexLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.IdentifiedIndexLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0 = (RuleCall)cIndexNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeySYMBOLIC_NAME_XParserRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_5_0_0 = (RuleCall)cValueAssignment_5_0.eContents().get(0);
		private final Assignment cLegacyParameterAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cLegacyParameterLegacyParameterParserRuleCall_5_1_0 = (RuleCall)cLegacyParameterAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IdentifiedIndexLookup:
		///*
		// * oC_IdentifiedIndexLookup : ':' oC_SymbolicName '(' oC_SymbolicName '=' ( StringLiteral | oC_LegacyParameter ) ')' ;
		// */
		//    ':' indexName=SYMBOLIC_NAME_X '(' key=SYMBOLIC_NAME_X '=' (value=STRING_LITERAL | legacyParameter=LegacyParameter)
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_IdentifiedIndexLookup : ':' oC_SymbolicName '(' oC_SymbolicName '=' ( StringLiteral | oC_LegacyParameter ) ')' ;
		// */
		//    ':' indexName=SYMBOLIC_NAME_X '(' key=SYMBOLIC_NAME_X '=' (value=STRING_LITERAL | legacyParameter=LegacyParameter)
		//    ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_IdentifiedIndexLookup : ':' oC_SymbolicName '(' oC_SymbolicName '=' ( StringLiteral | oC_LegacyParameter ) ')' ;
		// */
		//    ':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//indexName=SYMBOLIC_NAME_X
		public Assignment getIndexNameAssignment_1() { return cIndexNameAssignment_1; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0() { return cIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//key=SYMBOLIC_NAME_X
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getKeySYMBOLIC_NAME_XParserRuleCall_3_0() { return cKeySYMBOLIC_NAME_XParserRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//(value=STRING_LITERAL | legacyParameter=LegacyParameter)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//value=STRING_LITERAL
		public Assignment getValueAssignment_5_0() { return cValueAssignment_5_0; }
		
		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_5_0_0() { return cValueSTRING_LITERALTerminalRuleCall_5_0_0; }
		
		//legacyParameter=LegacyParameter
		public Assignment getLegacyParameterAssignment_5_1() { return cLegacyParameterAssignment_5_1; }
		
		//LegacyParameter
		public RuleCall getLegacyParameterLegacyParameterParserRuleCall_5_1_0() { return cLegacyParameterLegacyParameterParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class IndexQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.IndexQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0 = (RuleCall)cIndexNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cQueryAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cQuerySTRING_LITERALTerminalRuleCall_3_0_0 = (RuleCall)cQueryAssignment_3_0.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndexQuery:
		///*
		// * oC_IndexQuery : ':' oC_SymbolicName '(' ( StringLiteral | oC_LegacyParameter ) ')' ;
		// */
		//    ':' indexName=SYMBOLIC_NAME_X '(' (query=STRING_LITERAL | parameter=Parameter) ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_IndexQuery : ':' oC_SymbolicName '(' ( StringLiteral | oC_LegacyParameter ) ')' ;
		// */
		//    ':' indexName=SYMBOLIC_NAME_X '(' (query=STRING_LITERAL | parameter=Parameter) ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_IndexQuery : ':' oC_SymbolicName '(' ( StringLiteral | oC_LegacyParameter ) ')' ;
		// */
		//    ':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//indexName=SYMBOLIC_NAME_X
		public Assignment getIndexNameAssignment_1() { return cIndexNameAssignment_1; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0() { return cIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(query=STRING_LITERAL | parameter=Parameter)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//query=STRING_LITERAL
		public Assignment getQueryAssignment_3_0() { return cQueryAssignment_3_0; }
		
		//STRING_LITERAL
		public RuleCall getQuerySTRING_LITERALTerminalRuleCall_3_0_0() { return cQuerySTRING_LITERALTerminalRuleCall_3_0_0; }
		
		//parameter=Parameter
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0() { return cParameterParameterParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IdLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.IdLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdsLiteralIdsParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Assignment cLegacyParameterAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLegacyParameterParameterParserRuleCall_1_1_0 = (RuleCall)cLegacyParameterAssignment_1_1.eContents().get(0);
		private final Assignment cWildcardAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cWildcardAsteriskKeyword_1_2_0 = (Keyword)cWildcardAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IdLookup:
		///*
		// * oC_IdLookup : '(' ( oC_LiteralIds | oC_LegacyParameter | '*' ) ')' ;
		// */
		//    '(' (ids=LiteralIds | legacyParameter=Parameter | wildcard='*') ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_IdLookup : '(' ( oC_LiteralIds | oC_LegacyParameter | '*' ) ')' ;
		// */
		//    '(' (ids=LiteralIds | legacyParameter=Parameter | wildcard='*') ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_IdLookup : '(' ( oC_LiteralIds | oC_LegacyParameter | '*' ) ')' ;
		// */
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ids=LiteralIds | legacyParameter=Parameter | wildcard='*')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ids=LiteralIds
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }
		
		//LiteralIds
		public RuleCall getIdsLiteralIdsParserRuleCall_1_0_0() { return cIdsLiteralIdsParserRuleCall_1_0_0; }
		
		//legacyParameter=Parameter
		public Assignment getLegacyParameterAssignment_1_1() { return cLegacyParameterAssignment_1_1; }
		
		//Parameter
		public RuleCall getLegacyParameterParameterParserRuleCall_1_1_0() { return cLegacyParameterParameterParserRuleCall_1_1_0; }
		
		//wildcard='*'
		public Assignment getWildcardAssignment_1_2() { return cWildcardAssignment_1_2; }
		
		//'*'
		public Keyword getWildcardAsteriskKeyword_1_2_0() { return cWildcardAsteriskKeyword_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LiteralIdsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LiteralIds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsDecimalIntegerParserRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdsDecimalIntegerParserRuleCall_1_1_0 = (RuleCall)cIdsAssignment_1_1.eContents().get(0);
		
		//LiteralIds:
		///*
		// * oC_LiteralIds : oC_IntegerLiteral ( SP? ',' SP? oC_IntegerLiteral )* ;
		// */
		//    ids+=DecimalInteger (',' ids+=DecimalInteger)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_LiteralIds : oC_IntegerLiteral ( SP? ',' SP? oC_IntegerLiteral )* ;
		// */
		//    ids+=DecimalInteger (',' ids+=DecimalInteger)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_LiteralIds : oC_IntegerLiteral ( SP? ',' SP? oC_IntegerLiteral )* ;
		// */
		//    ids+=DecimalInteger
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }
		
		//DecimalInteger
		public RuleCall getIdsDecimalIntegerParserRuleCall_0_0() { return cIdsDecimalIntegerParserRuleCall_0_0; }
		
		//(',' ids+=DecimalInteger)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ids+=DecimalInteger
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//DecimalInteger
		public RuleCall getIdsDecimalIntegerParserRuleCall_1_1_0() { return cIdsDecimalIntegerParserRuleCall_1_1_0; }
	}
	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Where:
		///*
		// * oC_Where : WHERE SP oC_Expression ;
		// */
		//    'WHERE' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Where : WHERE SP oC_Expression ;
		// */
		//    'WHERE' expression=Expression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Where : WHERE SP oC_Expression ;
		// */
		//    'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternsPatternPartParserRuleCall_0_0 = (RuleCall)cPatternsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPatternsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPatternsPatternPartParserRuleCall_1_1_0 = (RuleCall)cPatternsAssignment_1_1.eContents().get(0);
		
		//Pattern:
		///*
		// * oC_Pattern : oC_PatternPart ( SP? ',' SP? oC_PatternPart )* ;
		// */
		//    patterns+=PatternPart (',' patterns+=PatternPart)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Pattern : oC_PatternPart ( SP? ',' SP? oC_PatternPart )* ;
		// */
		//    patterns+=PatternPart (',' patterns+=PatternPart)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Pattern : oC_PatternPart ( SP? ',' SP? oC_PatternPart )* ;
		// */
		//    patterns+=PatternPart
		public Assignment getPatternsAssignment_0() { return cPatternsAssignment_0; }
		
		//PatternPart
		public RuleCall getPatternsPatternPartParserRuleCall_0_0() { return cPatternsPatternPartParserRuleCall_0_0; }
		
		//(',' patterns+=PatternPart)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//patterns+=PatternPart
		public Assignment getPatternsAssignment_1_1() { return cPatternsAssignment_1_1; }
		
		//PatternPart
		public RuleCall getPatternsPatternPartParserRuleCall_1_1_0() { return cPatternsPatternPartParserRuleCall_1_1_0; }
	}
	public class PatternPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PatternPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarVariableDeclarationParserRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPartAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPartAnonymousPatternPartParserRuleCall_0_2_0 = (RuleCall)cPartAssignment_0_2.eContents().get(0);
		private final RuleCall cAnonymousPatternPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternPart:
		///*
		// * oC_PatternPart : ( oC_Variable SP? '=' SP? oC_AnonymousPatternPart )
		// *                | oC_AnonymousPatternPart
		// *                ;
		// */
		//    (var=VariableDeclaration '=' part=AnonymousPatternPart) | AnonymousPatternPart;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PatternPart : ( oC_Variable SP? '=' SP? oC_AnonymousPatternPart )
		// *                | oC_AnonymousPatternPart
		// *                ;
		// */
		//    (var=VariableDeclaration '=' part=AnonymousPatternPart) | AnonymousPatternPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_PatternPart : ( oC_Variable SP? '=' SP? oC_AnonymousPatternPart )
		// *                | oC_AnonymousPatternPart
		// *                ;
		// */
		//    (var=VariableDeclaration '=' part=AnonymousPatternPart)
		public Group getGroup_0() { return cGroup_0; }
		
		//var=VariableDeclaration
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }
		
		//VariableDeclaration
		public RuleCall getVarVariableDeclarationParserRuleCall_0_0_0() { return cVarVariableDeclarationParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//part=AnonymousPatternPart
		public Assignment getPartAssignment_0_2() { return cPartAssignment_0_2; }
		
		//AnonymousPatternPart
		public RuleCall getPartAnonymousPatternPartParserRuleCall_0_2_0() { return cPartAnonymousPatternPartParserRuleCall_0_2_0; }
		
		//AnonymousPatternPart
		public RuleCall getAnonymousPatternPartParserRuleCall_1() { return cAnonymousPatternPartParserRuleCall_1; }
	}
	public class AnonymousPatternPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.AnonymousPatternPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShortestPathPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnonymousPatternPart:
		///*
		// * oC_AnonymousPatternPart : oC_ShortestPathPattern
		// *                         | oC_PatternElement
		// *                         ;
		// */
		//    ShortestPathPattern | PatternElement;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_AnonymousPatternPart : oC_ShortestPathPattern
		// *                         | oC_PatternElement
		// *                         ;
		// */
		//    ShortestPathPattern | PatternElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_AnonymousPatternPart : oC_ShortestPathPattern
		// *                         | oC_PatternElement
		// *                         ;
		// */
		//    ShortestPathPattern
		public RuleCall getShortestPathPatternParserRuleCall_0() { return cShortestPathPatternParserRuleCall_0; }
		
		//PatternElement
		public RuleCall getPatternElementParserRuleCall_1() { return cPatternElementParserRuleCall_1; }
	}
	public class ShortestPathPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ShortestPathPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cShortestPathAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSHORTESTPATHKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cPatternElementAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPatternElementPatternElementParserRuleCall_0_3_0 = (RuleCall)cPatternElementAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAllShortestPathsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cALLSHORTESTPATHSKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPatternElementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPatternElementPatternElementParserRuleCall_1_3_0 = (RuleCall)cPatternElementAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ShortestPathPattern:
		///*
		// * oC_ShortestPathPattern : ( SHORTESTPATH '(' oC_PatternElement ')' )
		// *                        | ( ALLSHORTESTPATHS '(' oC_PatternElement ')' )
		// *                        ;
		// */
		//    {ShortestPath} 'SHORTESTPATH' '(' patternElement=PatternElement ')' | {AllShortestPaths} 'ALLSHORTESTPATHS' '('
		//    patternElement=PatternElement ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ShortestPathPattern : ( SHORTESTPATH '(' oC_PatternElement ')' )
		// *                        | ( ALLSHORTESTPATHS '(' oC_PatternElement ')' )
		// *                        ;
		// */
		//    {ShortestPath} 'SHORTESTPATH' '(' patternElement=PatternElement ')' | {AllShortestPaths} 'ALLSHORTESTPATHS' '('
		//    patternElement=PatternElement ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_ShortestPathPattern : ( SHORTESTPATH '(' oC_PatternElement ')' )
		// *                        | ( ALLSHORTESTPATHS '(' oC_PatternElement ')' )
		// *                        ;
		// */
		//    {ShortestPath} 'SHORTESTPATH' '(' patternElement=PatternElement ')'
		public Group getGroup_0() { return cGroup_0; }
		
		///*
		// * oC_ShortestPathPattern : ( SHORTESTPATH '(' oC_PatternElement ')' )
		// *                        | ( ALLSHORTESTPATHS '(' oC_PatternElement ')' )
		// *                        ;
		// */
		//    {ShortestPath}
		public Action getShortestPathAction_0_0() { return cShortestPathAction_0_0; }
		
		//'SHORTESTPATH'
		public Keyword getSHORTESTPATHKeyword_0_1() { return cSHORTESTPATHKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//patternElement=PatternElement
		public Assignment getPatternElementAssignment_0_3() { return cPatternElementAssignment_0_3; }
		
		//PatternElement
		public RuleCall getPatternElementPatternElementParserRuleCall_0_3_0() { return cPatternElementPatternElementParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{AllShortestPaths} 'ALLSHORTESTPATHS' '('
		//   patternElement=PatternElement ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{AllShortestPaths}
		public Action getAllShortestPathsAction_1_0() { return cAllShortestPathsAction_1_0; }
		
		//'ALLSHORTESTPATHS'
		public Keyword getALLSHORTESTPATHSKeyword_1_1() { return cALLSHORTESTPATHSKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//patternElement=PatternElement
		public Assignment getPatternElementAssignment_1_3() { return cPatternElementAssignment_1_3; }
		
		//PatternElement
		public RuleCall getPatternElementPatternElementParserRuleCall_1_3_0() { return cPatternElementPatternElementParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class PatternElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PatternElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNodepatternAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNodepatternNodePatternParserRuleCall_0_0_0 = (RuleCall)cNodepatternAssignment_0_0.eContents().get(0);
		private final Assignment cChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cChainPatternElementChainParserRuleCall_0_1_0 = (RuleCall)cChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPatternElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PatternElement:
		///*
		// * oC_PatternElement : ( oC_NodePattern ( SP? oC_PatternElementChain )* )
		// *                   | ( '(' oC_PatternElement ')' )
		// *                   ;
		// */
		//    (nodepattern=NodePattern (chain+=PatternElementChain)*) | '(' PatternElement ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PatternElement : ( oC_NodePattern ( SP? oC_PatternElementChain )* )
		// *                   | ( '(' oC_PatternElement ')' )
		// *                   ;
		// */
		//    (nodepattern=NodePattern (chain+=PatternElementChain)*) | '(' PatternElement ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_PatternElement : ( oC_NodePattern ( SP? oC_PatternElementChain )* )
		// *                   | ( '(' oC_PatternElement ')' )
		// *                   ;
		// */
		//    (nodepattern=NodePattern (chain+=PatternElementChain)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//nodepattern=NodePattern
		public Assignment getNodepatternAssignment_0_0() { return cNodepatternAssignment_0_0; }
		
		//NodePattern
		public RuleCall getNodepatternNodePatternParserRuleCall_0_0_0() { return cNodepatternNodePatternParserRuleCall_0_0_0; }
		
		//(chain+=PatternElementChain)*
		public Assignment getChainAssignment_0_1() { return cChainAssignment_0_1; }
		
		//PatternElementChain
		public RuleCall getChainPatternElementChainParserRuleCall_0_1_0() { return cChainPatternElementChainParserRuleCall_0_1_0; }
		
		//'(' PatternElement ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//PatternElement
		public RuleCall getPatternElementParserRuleCall_1_1() { return cPatternElementParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class NodePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NodePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodePatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cNodeLabelsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NodePattern:
		///*
		// * oC_NodePattern : '(' SP? ( oC_Variable SP? )? ( oC_NodeLabels SP? )? ( oC_Properties SP? )? ')' ;
		// */
		//    {NodePattern} '(' variable=VariableDeclaration? NodeLabels? properties=Properties? ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NodePattern : '(' SP? ( oC_Variable SP? )? ( oC_NodeLabels SP? )? ( oC_Properties SP? )? ')' ;
		// */
		//    {NodePattern} '(' variable=VariableDeclaration? NodeLabels? properties=Properties? ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_NodePattern : '(' SP? ( oC_Variable SP? )? ( oC_NodeLabels SP? )? ( oC_Properties SP? )? ')' ;
		// */
		//    {NodePattern}
		public Action getNodePatternAction_0() { return cNodePatternAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=VariableDeclaration?
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_2_0() { return cVariableVariableDeclarationParserRuleCall_2_0; }
		
		//NodeLabels?
		public RuleCall getNodeLabelsParserRuleCall_3() { return cNodeLabelsParserRuleCall_3; }
		
		//properties=Properties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_4_0() { return cPropertiesPropertiesParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PatternElementChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PatternElementChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationshipPatternRelationshipPatternParserRuleCall_0_0 = (RuleCall)cRelationshipPatternAssignment_0.eContents().get(0);
		private final Assignment cNodePatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodePatternNodePatternParserRuleCall_1_0 = (RuleCall)cNodePatternAssignment_1.eContents().get(0);
		
		//PatternElementChain:
		///*
		// * oC_PatternElementChain : oC_RelationshipPattern SP? oC_NodePattern ;
		// */
		//    relationshipPattern=RelationshipPattern nodePattern=NodePattern;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PatternElementChain : oC_RelationshipPattern SP? oC_NodePattern ;
		// */
		//    relationshipPattern=RelationshipPattern nodePattern=NodePattern
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PatternElementChain : oC_RelationshipPattern SP? oC_NodePattern ;
		// */
		//    relationshipPattern=RelationshipPattern
		public Assignment getRelationshipPatternAssignment_0() { return cRelationshipPatternAssignment_0; }
		
		//RelationshipPattern
		public RuleCall getRelationshipPatternRelationshipPatternParserRuleCall_0_0() { return cRelationshipPatternRelationshipPatternParserRuleCall_0_0; }
		
		//nodePattern=NodePattern
		public Assignment getNodePatternAssignment_1() { return cNodePatternAssignment_1; }
		
		//NodePattern
		public RuleCall getNodePatternNodePatternParserRuleCall_1_0() { return cNodePatternNodePatternParserRuleCall_1_0; }
	}
	public class RelationshipPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIncomingAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIncomingLeftArrowHeadParserRuleCall_1_0_0 = (RuleCall)cIncomingAssignment_1_0.eContents().get(0);
		private final RuleCall cDashParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cDetailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDetailRelationshipDetailParserRuleCall_1_2_0 = (RuleCall)cDetailAssignment_1_2.eContents().get(0);
		private final RuleCall cDashParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cOutgoingAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOutgoingRightArrowHeadParserRuleCall_1_4_0 = (RuleCall)cOutgoingAssignment_1_4.eContents().get(0);
		
		//RelationshipPattern:
		///*
		// * oC_RelationshipPattern : ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
		// *                        | ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
		// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
		// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
		// *                        ;
		// */
		//    {RelationshipPattern} (incoming?=LeftArrowHead? Dash detail=RelationshipDetail? Dash outgoing?=RightArrowHead?);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipPattern : ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
		// *                        | ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
		// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
		// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
		// *                        ;
		// */
		//    {RelationshipPattern} (incoming?=LeftArrowHead? Dash detail=RelationshipDetail? Dash outgoing?=RightArrowHead?)
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelationshipPattern : ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
		// *                        | ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
		// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
		// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
		// *                        ;
		// */
		//    {RelationshipPattern}
		public Action getRelationshipPatternAction_0() { return cRelationshipPatternAction_0; }
		
		//(incoming?=LeftArrowHead? Dash detail=RelationshipDetail? Dash outgoing?=RightArrowHead?)
		public Group getGroup_1() { return cGroup_1; }
		
		//incoming?=LeftArrowHead?
		public Assignment getIncomingAssignment_1_0() { return cIncomingAssignment_1_0; }
		
		//LeftArrowHead
		public RuleCall getIncomingLeftArrowHeadParserRuleCall_1_0_0() { return cIncomingLeftArrowHeadParserRuleCall_1_0_0; }
		
		//Dash
		public RuleCall getDashParserRuleCall_1_1() { return cDashParserRuleCall_1_1; }
		
		//detail=RelationshipDetail?
		public Assignment getDetailAssignment_1_2() { return cDetailAssignment_1_2; }
		
		//RelationshipDetail
		public RuleCall getDetailRelationshipDetailParserRuleCall_1_2_0() { return cDetailRelationshipDetailParserRuleCall_1_2_0; }
		
		//Dash
		public RuleCall getDashParserRuleCall_1_3() { return cDashParserRuleCall_1_3; }
		
		//outgoing?=RightArrowHead?
		public Assignment getOutgoingAssignment_1_4() { return cOutgoingAssignment_1_4; }
		
		//RightArrowHead
		public RuleCall getOutgoingRightArrowHeadParserRuleCall_1_4_0() { return cOutgoingRightArrowHeadParserRuleCall_1_4_0; }
	}
	public class RelationshipDetailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipDetail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipDetailAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cOptionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cOptionalQuestionMarkKeyword_3_0 = (Keyword)cOptionalAssignment_3.eContents().get(0);
		private final RuleCall cRelationshipTypesParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeRangeLiteralParserRuleCall_5_0 = (RuleCall)cRangeAssignment_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertiesParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RelationshipDetail:
		///*
		// * oC_RelationshipDetail : '[' SP? ( oC_Variable SP? )? ( oC_RelationshipTypes SP? )? oC_RangeLiteral? ( oC_Properties SP? )? ']' ;
		// */
		//    {RelationshipDetail} '[' variable=VariableDeclaration? optional?='?'? RelationshipTypes? (range=RangeLiteral)?
		//    properties=Properties? ']';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipDetail : '[' SP? ( oC_Variable SP? )? ( oC_RelationshipTypes SP? )? oC_RangeLiteral? ( oC_Properties SP? )? ']' ;
		// */
		//    {RelationshipDetail} '[' variable=VariableDeclaration? optional?='?'? RelationshipTypes? (range=RangeLiteral)?
		//    properties=Properties? ']'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelationshipDetail : '[' SP? ( oC_Variable SP? )? ( oC_RelationshipTypes SP? )? oC_RangeLiteral? ( oC_Properties SP? )? ']' ;
		// */
		//    {RelationshipDetail}
		public Action getRelationshipDetailAction_0() { return cRelationshipDetailAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//variable=VariableDeclaration?
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_2_0() { return cVariableVariableDeclarationParserRuleCall_2_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_3() { return cOptionalAssignment_3; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_3_0() { return cOptionalQuestionMarkKeyword_3_0; }
		
		//RelationshipTypes?
		public RuleCall getRelationshipTypesParserRuleCall_4() { return cRelationshipTypesParserRuleCall_4; }
		
		//(range=RangeLiteral)?
		public Assignment getRangeAssignment_5() { return cRangeAssignment_5; }
		
		//RangeLiteral
		public RuleCall getRangeRangeLiteralParserRuleCall_5_0() { return cRangeRangeLiteralParserRuleCall_5_0; }
		
		//properties=Properties?
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_6_0() { return cPropertiesPropertiesParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Properties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMapLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLegacyParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Properties:
		///*
		// * oC_Properties : oC_MapLiteral
		// *               | oC_Parameter
		// *               | oC_LegacyParameter
		// *               ;
		// */
		//    MapLiteral | Parameter | LegacyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Properties : oC_MapLiteral
		// *               | oC_Parameter
		// *               | oC_LegacyParameter
		// *               ;
		// */
		//    MapLiteral | Parameter | LegacyParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Properties : oC_MapLiteral
		// *               | oC_Parameter
		// *               | oC_LegacyParameter
		// *               ;
		// */
		//    MapLiteral
		public RuleCall getMapLiteralParserRuleCall_0() { return cMapLiteralParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
		
		//LegacyParameter
		public RuleCall getLegacyParameterParserRuleCall_2() { return cLegacyParameterParserRuleCall_2; }
	}
	public class RelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RelType:
		///*
		// * oC_RelType : ':' SP? oC_RelTypeName ;
		// */
		//    ':' RelTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelType : ':' SP? oC_RelTypeName ;
		// */
		//    ':' RelTypeName
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelType : ':' SP? oC_RelTypeName ;
		// */
		//    ':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//RelTypeName
		public RuleCall getRelTypeNameParserRuleCall_1() { return cRelTypeNameParserRuleCall_1; }
	}
	public class RelationshipTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelTypeNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelTypeNamesRelTypeNameParserRuleCall_1_0 = (RuleCall)cRelTypeNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRelTypeNamesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRelTypeNamesRelTypeNameParserRuleCall_2_2_0 = (RuleCall)cRelTypeNamesAssignment_2_2.eContents().get(0);
		
		//fragment RelationshipTypes:
		///*
		// * oC_RelationshipTypes : ':' SP? oC_RelTypeName ( SP? '|' ':'? SP? oC_RelTypeName )* ;
		// */
		//    ':' relTypeNames+=RelTypeName ('|' ':'? relTypeNames+=RelTypeName)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipTypes : ':' SP? oC_RelTypeName ( SP? '|' ':'? SP? oC_RelTypeName )* ;
		// */
		//    ':' relTypeNames+=RelTypeName ('|' ':'? relTypeNames+=RelTypeName)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelationshipTypes : ':' SP? oC_RelTypeName ( SP? '|' ':'? SP? oC_RelTypeName )* ;
		// */
		//    ':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//relTypeNames+=RelTypeName
		public Assignment getRelTypeNamesAssignment_1() { return cRelTypeNamesAssignment_1; }
		
		//RelTypeName
		public RuleCall getRelTypeNamesRelTypeNameParserRuleCall_1_0() { return cRelTypeNamesRelTypeNameParserRuleCall_1_0; }
		
		//('|' ':'? relTypeNames+=RelTypeName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//':'?
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//relTypeNames+=RelTypeName
		public Assignment getRelTypeNamesAssignment_2_2() { return cRelTypeNamesAssignment_2_2; }
		
		//RelTypeName
		public RuleCall getRelTypeNamesRelTypeNameParserRuleCall_2_2_0() { return cRelTypeNamesRelTypeNameParserRuleCall_2_2_0; }
	}
	public class NodeLabelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NodeLabels");
		private final Assignment cNodeLabelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNodeLabelsNodeLabelParserRuleCall_0 = (RuleCall)cNodeLabelsAssignment.eContents().get(0);
		
		//fragment NodeLabels:
		///*
		// * oC_NodeLabels : oC_NodeLabel ( SP? oC_NodeLabel )* ;
		// */
		//    nodeLabels+=NodeLabel+;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NodeLabels : oC_NodeLabel ( SP? oC_NodeLabel )* ;
		// */
		//    nodeLabels+=NodeLabel+
		public Assignment getNodeLabelsAssignment() { return cNodeLabelsAssignment; }
		
		//NodeLabel
		public RuleCall getNodeLabelsNodeLabelParserRuleCall_0() { return cNodeLabelsNodeLabelParserRuleCall_0; }
	}
	public class NodeLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NodeLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelNameLabelNameParserRuleCall_1_0 = (RuleCall)cLabelNameAssignment_1.eContents().get(0);
		
		//NodeLabel:
		///*
		// * oC_NodeLabel : ':' SP? oC_LabelName ;
		// */
		//    ':' labelName=LabelName;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NodeLabel : ':' SP? oC_LabelName ;
		// */
		//    ':' labelName=LabelName
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_NodeLabel : ':' SP? oC_LabelName ;
		// */
		//    ':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//labelName=LabelName
		public Assignment getLabelNameAssignment_1() { return cLabelNameAssignment_1; }
		
		//LabelName
		public RuleCall getLabelNameLabelNameParserRuleCall_1_0() { return cLabelNameLabelNameParserRuleCall_1_0; }
	}
	public class RangeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RangeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLowerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLowerNumberParserRuleCall_2_0_0 = (RuleCall)cLowerAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cVariableLengthAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cVariableLengthFullStopFullStopKeyword_2_1_0_0 = (Keyword)cVariableLengthAssignment_2_1_0.eContents().get(0);
		private final Assignment cUpperAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cUpperNumberParserRuleCall_2_1_1_0 = (RuleCall)cUpperAssignment_2_1_1.eContents().get(0);
		
		//RangeLiteral:
		///*
		// * oC_RangeLiteral : '*' SP? ( oC_IntegerLiteral SP? )? ( '..' SP? ( oC_IntegerLiteral SP? )? )? ;
		// *
		// * Comment: Format of IntegerLiteral is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkRangeLiteralFormat(RangeLiteral)
		// */
		//    {RangeLiteral} '*' (lower=Number? (variableLength?='..' upper=Number?)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RangeLiteral : '*' SP? ( oC_IntegerLiteral SP? )? ( '..' SP? ( oC_IntegerLiteral SP? )? )? ;
		// *
		// * Comment: Format of IntegerLiteral is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkRangeLiteralFormat(RangeLiteral)
		// */
		//    {RangeLiteral} '*' (lower=Number? (variableLength?='..' upper=Number?)?)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RangeLiteral : '*' SP? ( oC_IntegerLiteral SP? )? ( '..' SP? ( oC_IntegerLiteral SP? )? )? ;
		// *
		// * Comment: Format of IntegerLiteral is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkRangeLiteralFormat(RangeLiteral)
		// */
		//    {RangeLiteral}
		public Action getRangeLiteralAction_0() { return cRangeLiteralAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//(lower=Number? (variableLength?='..' upper=Number?)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//lower=Number?
		public Assignment getLowerAssignment_2_0() { return cLowerAssignment_2_0; }
		
		//Number
		public RuleCall getLowerNumberParserRuleCall_2_0_0() { return cLowerNumberParserRuleCall_2_0_0; }
		
		//(variableLength?='..' upper=Number?)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//variableLength?='..'
		public Assignment getVariableLengthAssignment_2_1_0() { return cVariableLengthAssignment_2_1_0; }
		
		//'..'
		public Keyword getVariableLengthFullStopFullStopKeyword_2_1_0_0() { return cVariableLengthFullStopFullStopKeyword_2_1_0_0; }
		
		//upper=Number?
		public Assignment getUpperAssignment_2_1_1() { return cUpperAssignment_2_1_1; }
		
		//Number
		public RuleCall getUpperNumberParserRuleCall_2_1_1_0() { return cUpperNumberParserRuleCall_2_1_1_0; }
	}
	public class LabelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LabelName");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LabelName:
		///*
		// * oC_LabelName : oC_SchemaName ;
		// */
		//// TODO
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_LabelName : oC_SchemaName ;
		// */
		//// TODO
		//    SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class RelTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelTypeName");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RelTypeName:
		///*
		// * oC_RelTypeName : oC_SchemaName ;
		// */
		//// TODO
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelTypeName : oC_SchemaName ;
		// */
		//// TODO
		//    SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		///*
		// * oC_Expression : oC_OrExpression ;
		// */
		//    OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Expression : oC_OrExpression ;
		// */
		//    OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorORKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		///*
		// * oC_OrExpression : oC_XorExpression ( SP OR SP oC_XorExpression )* ;
		// */
		//    XorExpression ({OrExpression.left=current} operator='OR' right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_OrExpression : oC_XorExpression ( SP OR SP oC_XorExpression )* ;
		// */
		//    XorExpression ({OrExpression.left=current} operator='OR' right=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_OrExpression : oC_XorExpression ( SP OR SP oC_XorExpression )* ;
		// */
		//    XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} operator='OR' right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//operator='OR'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'OR'
		public Keyword getOperatorORKeyword_1_1_0() { return cOperatorORKeyword_1_1_0; }
		
		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorXORKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression returns Expression:
		///*
		// * oC_XorExpression : oC_AndExpression ( SP XOR SP oC_AndExpression )* ;
		// */
		//    AndExpression ({XorExpression.left=current} operator='XOR' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_XorExpression : oC_AndExpression ( SP XOR SP oC_AndExpression )* ;
		// */
		//    AndExpression ({XorExpression.left=current} operator='XOR' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_XorExpression : oC_AndExpression ( SP XOR SP oC_AndExpression )* ;
		// */
		//    AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({XorExpression.left=current} operator='XOR' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XorExpression.left=current}
		public Action getXorExpressionLeftAction_1_0() { return cXorExpressionLeftAction_1_0; }
		
		//operator='XOR'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'XOR'
		public Keyword getOperatorXORKeyword_1_1_0() { return cOperatorXORKeyword_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorANDKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		///*
		// * oC_AndExpression : oC_NotExpression ( SP AND SP oC_NotExpression )* ;
		// */
		//    NotExpression ({AndExpression.left=current} operator='AND' right=NotExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_AndExpression : oC_NotExpression ( SP AND SP oC_NotExpression )* ;
		// */
		//    NotExpression ({AndExpression.left=current} operator='AND' right=NotExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_AndExpression : oC_NotExpression ( SP AND SP oC_NotExpression )* ;
		// */
		//    NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} operator='AND' right=NotExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//operator='AND'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'AND'
		public Keyword getOperatorANDKeyword_1_1_0() { return cOperatorANDKeyword_1_1_0; }
		
		//right=NotExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NotExpression
		public RuleCall getRightNotExpressionParserRuleCall_1_2_0() { return cRightNotExpressionParserRuleCall_1_2_0; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperatorNOTKeyword_0_1_0 = (Keyword)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftNotExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftAssignment_0_2.eContents().get(0);
		private final RuleCall cComparisonExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NotExpression returns Expression:
		///*
		// * oC_NotExpression : ( NOT SP? )* oC_ComparisonExpression ;
		// *
		// * Comment: Clause is modeled on the former antlr clause 'expression9 : ( sp NOT sp expression9 ) | expression8;'
		// * We should eventually adjust this...
		// */
		////TODO
		//    ({NotExpression} operator='NOT' left=NotExpression) | ComparisonExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NotExpression : ( NOT SP? )* oC_ComparisonExpression ;
		// *
		// * Comment: Clause is modeled on the former antlr clause 'expression9 : ( sp NOT sp expression9 ) | expression8;'
		// * We should eventually adjust this...
		// */
		////TODO
		//    ({NotExpression} operator='NOT' left=NotExpression) | ComparisonExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_NotExpression : ( NOT SP? )* oC_ComparisonExpression ;
		// *
		// * Comment: Clause is modeled on the former antlr clause 'expression9 : ( sp NOT sp expression9 ) | expression8;'
		// * We should eventually adjust this...
		// */
		////TODO
		//    ({NotExpression} operator='NOT' left=NotExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotExpression}
		public Action getNotExpressionAction_0_0() { return cNotExpressionAction_0_0; }
		
		//operator='NOT'
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//'NOT'
		public Keyword getOperatorNOTKeyword_0_1_0() { return cOperatorNOTKeyword_0_1_0; }
		
		//left=NotExpression
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }
		
		//NotExpression
		public RuleCall getLeftNotExpressionParserRuleCall_0_2_0() { return cLeftNotExpressionParserRuleCall_0_2_0; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_1() { return cComparisonExpressionParserRuleCall_1; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddOrSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddOrSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression returns Expression:
		///*
		// * oC_ComparisonExpression : oC_AddOrSubtractExpression ( SP? oC_PartialComparisonExpression )* ;
		// *
		// * oC_PartialComparisonExpression : ( '=' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<>' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<' SP? oC_AddOrSubtractExpression )
		// *                                | ( '>' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<=' SP? oC_AddOrSubtractExpression )
		// *                                | ( '>=' SP? oC_AddOrSubtractExpression )
		// *                                ;
		// *
		// * Comment: combined clause for 'oC_ComparisonExpression' and 'oC_PartialComparisonExpression'
		// */
		//    AddOrSubtractExpression ({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		//    right=AddOrSubtractExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ComparisonExpression : oC_AddOrSubtractExpression ( SP? oC_PartialComparisonExpression )* ;
		// *
		// * oC_PartialComparisonExpression : ( '=' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<>' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<' SP? oC_AddOrSubtractExpression )
		// *                                | ( '>' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<=' SP? oC_AddOrSubtractExpression )
		// *                                | ( '>=' SP? oC_AddOrSubtractExpression )
		// *                                ;
		// *
		// * Comment: combined clause for 'oC_ComparisonExpression' and 'oC_PartialComparisonExpression'
		// */
		//    AddOrSubtractExpression ({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		//    right=AddOrSubtractExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ComparisonExpression : oC_AddOrSubtractExpression ( SP? oC_PartialComparisonExpression )* ;
		// *
		// * oC_PartialComparisonExpression : ( '=' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<>' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<' SP? oC_AddOrSubtractExpression )
		// *                                | ( '>' SP? oC_AddOrSubtractExpression )
		// *                                | ( '<=' SP? oC_AddOrSubtractExpression )
		// *                                | ( '>=' SP? oC_AddOrSubtractExpression )
		// *                                ;
		// *
		// * Comment: combined clause for 'oC_ComparisonExpression' and 'oC_PartialComparisonExpression'
		// */
		//    AddOrSubtractExpression
		public RuleCall getAddOrSubtractExpressionParserRuleCall_0() { return cAddOrSubtractExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		//   right=AddOrSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('=' | '<>' | '<' | '>' | '<=' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'<>'
		public Keyword getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_2() { return cOperatorLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignKeyword_1_1_0_3; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_4() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_4; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5; }
		
		//right=AddOrSubtractExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddOrSubtractExpression
		public RuleCall getRightAddOrSubtractExpressionParserRuleCall_1_2_0() { return cRightAddOrSubtractExpressionParserRuleCall_1_2_0; }
	}
	public class AddOrSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.AddOrSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyDivideModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddOrSubtractExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddOrSubtractExpression returns Expression:
		///*
		// * oC_AddOrSubtractExpression : oC_MultiplyDivideModuloExpression ( ( SP? '+' SP? oC_MultiplyDivideModuloExpression ) | ( SP? '-' SP? oC_MultiplyDivideModuloExpression ) )* ;
		// */
		//    MultiplyDivideModuloExpression ({AddOrSubtractExpression.left=current} operator=('+' | '-')
		//    right=MultiplyDivideModuloExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_AddOrSubtractExpression : oC_MultiplyDivideModuloExpression ( ( SP? '+' SP? oC_MultiplyDivideModuloExpression ) | ( SP? '-' SP? oC_MultiplyDivideModuloExpression ) )* ;
		// */
		//    MultiplyDivideModuloExpression ({AddOrSubtractExpression.left=current} operator=('+' | '-')
		//    right=MultiplyDivideModuloExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_AddOrSubtractExpression : oC_MultiplyDivideModuloExpression ( ( SP? '+' SP? oC_MultiplyDivideModuloExpression ) | ( SP? '-' SP? oC_MultiplyDivideModuloExpression ) )* ;
		// */
		//    MultiplyDivideModuloExpression
		public RuleCall getMultiplyDivideModuloExpressionParserRuleCall_0() { return cMultiplyDivideModuloExpressionParserRuleCall_0; }
		
		//({AddOrSubtractExpression.left=current} operator=('+' | '-')
		//   right=MultiplyDivideModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AddOrSubtractExpression.left=current}
		public Action getAddOrSubtractExpressionLeftAction_1_0() { return cAddOrSubtractExpressionLeftAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right=MultiplyDivideModuloExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplyDivideModuloExpression
		public RuleCall getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0() { return cRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplyDivideModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.MultiplyDivideModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerOfExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplyDivideModuloExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowerOfExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplyDivideModuloExpression returns Expression:
		///*
		// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
		// */
		//    PowerOfExpression ({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
		// */
		//    PowerOfExpression ({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
		// */
		//    PowerOfExpression
		public RuleCall getPowerOfExpressionParserRuleCall_0() { return cPowerOfExpressionParserRuleCall_0; }
		
		//({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplyDivideModuloExpression.left=current}
		public Action getMultiplyDivideModuloExpressionLeftAction_1_0() { return cMultiplyDivideModuloExpressionLeftAction_1_0; }
		
		//operator=('*' | '/' | '%')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOperatorPercentSignKeyword_1_1_0_2() { return cOperatorPercentSignKeyword_1_1_0_2; }
		
		//right=PowerOfExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PowerOfExpression
		public RuleCall getRightPowerOfExpressionParserRuleCall_1_2_0() { return cRightPowerOfExpressionParserRuleCall_1_2_0; }
	}
	public class PowerOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PowerOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryAddOrSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerOfExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PowerOfExpression returns Expression:
		///*
		// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
		// */
		//    UnaryAddOrSubtractExpression ({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
		// */
		//    UnaryAddOrSubtractExpression ({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
		// */
		//    UnaryAddOrSubtractExpression
		public RuleCall getUnaryAddOrSubtractExpressionParserRuleCall_0() { return cUnaryAddOrSubtractExpressionParserRuleCall_0; }
		
		//({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PowerOfExpression.left=current}
		public Action getPowerOfExpressionLeftAction_1_0() { return cPowerOfExpressionLeftAction_1_0; }
		
		//operator='^'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'^'
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }
		
		//right=UnaryAddOrSubtractExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryAddOrSubtractExpression
		public RuleCall getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0() { return cRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryAddOrSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.UnaryAddOrSubtractExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringListNullOperatorExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryAddOrSubtractExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		
		//UnaryAddOrSubtractExpression returns Expression:
		///*
		// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
		// */
		//    StringListNullOperatorExpression | {UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
		// */
		//    StringListNullOperatorExpression | {UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
		// */
		//    StringListNullOperatorExpression
		public RuleCall getStringListNullOperatorExpressionParserRuleCall_0() { return cStringListNullOperatorExpressionParserRuleCall_0; }
		
		//{UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryAddOrSubtractExpression}
		public Action getUnaryAddOrSubtractExpressionAction_1_0() { return cUnaryAddOrSubtractExpressionAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//left=UnaryAddOrSubtractExpression
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }
		
		//UnaryAddOrSubtractExpression
		public RuleCall getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0() { return cLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0; }
	}
	public class StringListNullOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.StringListNullOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyOrLabelsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStringListNullOperatorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_1_1_0 = (Alternatives)cExpressionsAssignment_1_1.eContents().get(0);
		private final RuleCall cExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsListOperatorExpressionParserRuleCall_1_1_0_1 = (RuleCall)cExpressionsAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2 = (RuleCall)cExpressionsAlternatives_1_1_0.eContents().get(2);
		
		//StringListNullOperatorExpression returns Expression:
		///*
		// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
		// */
		//    PropertyOrLabelsExpression ( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | ListOperatorExpression | NullOperatorExpression) )*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
		// */
		//    PropertyOrLabelsExpression ( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | ListOperatorExpression | NullOperatorExpression) )*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
		// */
		//    PropertyOrLabelsExpression
		public RuleCall getPropertyOrLabelsExpressionParserRuleCall_0() { return cPropertyOrLabelsExpressionParserRuleCall_0; }
		
		//( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | ListOperatorExpression | NullOperatorExpression) )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringListNullOperatorExpression.left=current }
		public Action getStringListNullOperatorExpressionLeftAction_1_0() { return cStringListNullOperatorExpressionLeftAction_1_0; }
		
		//expressions+=( StringOperatorExpression | ListOperatorExpression | NullOperatorExpression)
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }
		
		//( StringOperatorExpression | ListOperatorExpression | NullOperatorExpression)
		public Alternatives getExpressionsAlternatives_1_1_0() { return cExpressionsAlternatives_1_1_0; }
		
		//StringOperatorExpression
		public RuleCall getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0() { return cExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0; }
		
		//ListOperatorExpression
		public RuleCall getExpressionsListOperatorExpressionParserRuleCall_1_1_0_1() { return cExpressionsListOperatorExpressionParserRuleCall_1_1_0_1; }
		
		//NullOperatorExpression
		public RuleCall getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2() { return cExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2; }
	}
	public class ListOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ListOperatorExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIndexLookupExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIndexRangeExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLowerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLowerExpressionParserRuleCall_1_2_0 = (RuleCall)cLowerAssignment_1_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cUpperAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cUpperExpressionParserRuleCall_1_4_0 = (RuleCall)cUpperAssignment_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//ListOperatorExpression returns Expression:
		///*
		// * oC_ListOperatorExpression : ( SP? '[' oC_Expression ']' )
		// *                           | ( SP? '[' oC_Expression? '..' oC_Expression? ']' )
		// *                           ;
		// */
		//      ( {IndexLookupExpression} '[' expression=Expression ']') |
		//    ( {IndexRangeExpression} '[' (lower=Expression)? '..' (upper=Expression)? ']')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ListOperatorExpression : ( SP? '[' oC_Expression ']' )
		// *                           | ( SP? '[' oC_Expression? '..' oC_Expression? ']' )
		// *                           ;
		// */
		//      ( {IndexLookupExpression} '[' expression=Expression ']') |
		//    ( {IndexRangeExpression} '[' (lower=Expression)? '..' (upper=Expression)? ']')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_ListOperatorExpression : ( SP? '[' oC_Expression ']' )
		// *                           | ( SP? '[' oC_Expression? '..' oC_Expression? ']' )
		// *                           ;
		// */
		//      ( {IndexLookupExpression} '[' expression=Expression ']')
		public Group getGroup_0() { return cGroup_0; }
		
		//{IndexLookupExpression}
		public Action getIndexLookupExpressionAction_0_0() { return cIndexLookupExpressionAction_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//( {IndexRangeExpression} '[' (lower=Expression)? '..' (upper=Expression)? ']')
		public Group getGroup_1() { return cGroup_1; }
		
		//{IndexRangeExpression}
		public Action getIndexRangeExpressionAction_1_0() { return cIndexRangeExpressionAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//(lower=Expression)?
		public Assignment getLowerAssignment_1_2() { return cLowerAssignment_1_2; }
		
		//Expression
		public RuleCall getLowerExpressionParserRuleCall_1_2_0() { return cLowerExpressionParserRuleCall_1_2_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_3() { return cFullStopFullStopKeyword_1_3; }
		
		//(upper=Expression)?
		public Assignment getUpperAssignment_1_4() { return cUpperAssignment_1_4; }
		
		//Expression
		public RuleCall getUpperExpressionParserRuleCall_1_4_0() { return cUpperExpressionParserRuleCall_1_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}
	public class StringOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.StringOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cRegExpMatchingExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignTildeKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cInCollectionExpressionAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cINKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cStartsWithExpressionAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cSTARTSKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cWITHKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cEndsWithExpressionAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Keyword cENDSKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Keyword cWITHKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Action cContainsExpressionAction_0_4_0 = (Action)cGroup_0_4.eContents().get(0);
		private final Keyword cCONTAINSKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPropertyOrLabelsExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//StringOperatorExpression returns Expression:
		///*
		// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
		// */
		//    ( ( {RegExpMatchingExpression} '=~' ) |
		//      ( {InCollectionExpression} 'IN' ) |
		//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
		//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
		//      ( {ContainsExpression} 'CONTAINS' ) )
		//    right=PropertyOrLabelsExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
		// */
		//    ( ( {RegExpMatchingExpression} '=~' ) |
		//      ( {InCollectionExpression} 'IN' ) |
		//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
		//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
		//      ( {ContainsExpression} 'CONTAINS' ) )
		//    right=PropertyOrLabelsExpression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
		// */
		//    ( ( {RegExpMatchingExpression} '=~' ) |
		//      ( {InCollectionExpression} 'IN' ) |
		//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
		//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
		//      ( {ContainsExpression} 'CONTAINS' ) )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//( {RegExpMatchingExpression} '=~' )
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{RegExpMatchingExpression}
		public Action getRegExpMatchingExpressionAction_0_0_0() { return cRegExpMatchingExpressionAction_0_0_0; }
		
		//'=~'
		public Keyword getEqualsSignTildeKeyword_0_0_1() { return cEqualsSignTildeKeyword_0_0_1; }
		
		//( {InCollectionExpression} 'IN' )
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{InCollectionExpression}
		public Action getInCollectionExpressionAction_0_1_0() { return cInCollectionExpressionAction_0_1_0; }
		
		//'IN'
		public Keyword getINKeyword_0_1_1() { return cINKeyword_0_1_1; }
		
		//( {StartsWithExpression} 'STARTS' 'WITH' )
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{StartsWithExpression}
		public Action getStartsWithExpressionAction_0_2_0() { return cStartsWithExpressionAction_0_2_0; }
		
		//'STARTS'
		public Keyword getSTARTSKeyword_0_2_1() { return cSTARTSKeyword_0_2_1; }
		
		//'WITH'
		public Keyword getWITHKeyword_0_2_2() { return cWITHKeyword_0_2_2; }
		
		//( {EndsWithExpression} 'ENDS' 'WITH' )
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//{EndsWithExpression}
		public Action getEndsWithExpressionAction_0_3_0() { return cEndsWithExpressionAction_0_3_0; }
		
		//'ENDS'
		public Keyword getENDSKeyword_0_3_1() { return cENDSKeyword_0_3_1; }
		
		//'WITH'
		public Keyword getWITHKeyword_0_3_2() { return cWITHKeyword_0_3_2; }
		
		//( {ContainsExpression} 'CONTAINS' )
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//{ContainsExpression}
		public Action getContainsExpressionAction_0_4_0() { return cContainsExpressionAction_0_4_0; }
		
		//'CONTAINS'
		public Keyword getCONTAINSKeyword_0_4_1() { return cCONTAINSKeyword_0_4_1; }
		
		//right=PropertyOrLabelsExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//PropertyOrLabelsExpression
		public RuleCall getRightPropertyOrLabelsExpressionParserRuleCall_1_0() { return cRightPropertyOrLabelsExpressionParserRuleCall_1_0; }
	}
	public class NullOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NullOperatorExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIsNullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cISKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cNULLKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIsNotNullExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cISKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cNOTKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cNULLKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NullOperatorExpression returns Expression:
		///*
		// * oC_NullOperatorExpression : ( SP IS SP NULL )
		// *                           | ( SP IS SP NOT SP NULL )
		// *                           ;
		// */
		//    ( {IsNullExpression} 'IS' 'NULL') |
		//    ( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NullOperatorExpression : ( SP IS SP NULL )
		// *                           | ( SP IS SP NOT SP NULL )
		// *                           ;
		// */
		//    ( {IsNullExpression} 'IS' 'NULL') |
		//    ( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_NullOperatorExpression : ( SP IS SP NULL )
		// *                           | ( SP IS SP NOT SP NULL )
		// *                           ;
		// */
		//    ( {IsNullExpression} 'IS' 'NULL')
		public Group getGroup_0() { return cGroup_0; }
		
		//{IsNullExpression}
		public Action getIsNullExpressionAction_0_0() { return cIsNullExpressionAction_0_0; }
		
		//'IS'
		public Keyword getISKeyword_0_1() { return cISKeyword_0_1; }
		
		//'NULL'
		public Keyword getNULLKeyword_0_2() { return cNULLKeyword_0_2; }
		
		//( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
		public Group getGroup_1() { return cGroup_1; }
		
		//{IsNotNullExpression}
		public Action getIsNotNullExpressionAction_1_0() { return cIsNotNullExpressionAction_1_0; }
		
		//'IS'
		public Keyword getISKeyword_1_1() { return cISKeyword_1_1; }
		
		//'NOT'
		public Keyword getNOTKeyword_1_2() { return cNOTKeyword_1_2; }
		
		//'NULL'
		public Keyword getNULLKeyword_1_3() { return cNULLKeyword_1_3; }
	}
	public class PropertyOrLabelsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PropertyOrLabelsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPropertyLookupExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPropertyLookupsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyLookupsPropertyLookupParserRuleCall_1_1_0 = (RuleCall)cPropertyLookupsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cNodeLabelsExpressionLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cNodeLabelsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PropertyOrLabelsExpression returns Expression:
		///*
		// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
		// *
		// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
		// * appear in the AST iff property lookups and node label constraints were given, respectively
		// */
		//    Atom ({PropertyLookupExpression.left=current} propertyLookups+=PropertyLookup+)?
		//         ({NodeLabelsExpression.left=current} NodeLabels)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
		// *
		// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
		// * appear in the AST iff property lookups and node label constraints were given, respectively
		// */
		//    Atom ({PropertyLookupExpression.left=current} propertyLookups+=PropertyLookup+)?
		//         ({NodeLabelsExpression.left=current} NodeLabels)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
		// *
		// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
		// * appear in the AST iff property lookups and node label constraints were given, respectively
		// */
		//    Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//({PropertyLookupExpression.left=current} propertyLookups+=PropertyLookup+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PropertyLookupExpression.left=current}
		public Action getPropertyLookupExpressionLeftAction_1_0() { return cPropertyLookupExpressionLeftAction_1_0; }
		
		//propertyLookups+=PropertyLookup+
		public Assignment getPropertyLookupsAssignment_1_1() { return cPropertyLookupsAssignment_1_1; }
		
		//PropertyLookup
		public RuleCall getPropertyLookupsPropertyLookupParserRuleCall_1_1_0() { return cPropertyLookupsPropertyLookupParserRuleCall_1_1_0; }
		
		//({NodeLabelsExpression.left=current} NodeLabels)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{NodeLabelsExpression.left=current}
		public Action getNodeLabelsExpressionLeftAction_2_0() { return cNodeLabelsExpressionLeftAction_2_0; }
		
		//NodeLabels
		public RuleCall getNodeLabelsParserRuleCall_2_1() { return cNodeLabelsParserRuleCall_2_1; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLegacyParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCaseExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCountAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cCOUNTKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cAsteriskKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cListComprehensionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPatternComprehensionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cFilterAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cFILTERKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cFilterExpressionAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_7_3_0 = (RuleCall)cFilterExpressionAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExtractAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cEXTRACTKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cFilterExpressionAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_8_3_0 = (RuleCall)cFilterExpressionAssignment_8_3.eContents().get(0);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Keyword cVerticalLineKeyword_8_4_0 = (Keyword)cGroup_8_4.eContents().get(0);
		private final Assignment cExpressionAssignment_8_4_1 = (Assignment)cGroup_8_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_8_4_1_0 = (RuleCall)cExpressionAssignment_8_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final RuleCall cReduceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cAllAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cALLKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cFilterExpressionAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_10_3_0 = (RuleCall)cFilterExpressionAssignment_10_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cAnyAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cANYKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cFilterExpressionAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_11_3_0 = (RuleCall)cFilterExpressionAssignment_11_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cNoneAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cNONEKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cFilterExpressionAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_12_3_0 = (RuleCall)cFilterExpressionAssignment_12_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cSingleAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cSINGLEKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cFilterExpressionAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_13_3_0 = (RuleCall)cFilterExpressionAssignment_13_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final RuleCall cShortestPathPatternParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRelationshipsPatternParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cParenthesizedExpressionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cFunctionInvocationParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cVariableRefAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Assignment cVariableRefAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cVariableRefVariableDeclarationParserRuleCall_18_1_0 = (RuleCall)cVariableRefAssignment_18_1.eContents().get(0);
		
		//Atom returns Expression:
		///*
		// * oC_Atom : oC_Literal
		// *         | oC_Parameter
		// *         | oC_LegacyParameter
		// *         | oC_CaseExpression
		// *         | ( COUNT SP? '(' SP? '*' SP? ')' )
		// *         | oC_ListComprehension
		// *         | oC_PatternComprehension
		// *         | ( FILTER SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( EXTRACT SP? '(' SP? oC_FilterExpression SP? ( SP? '|' oC_Expression )? ')' )
		// *         | oC_Reduce
		// *         | ( ALL SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( ANY SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( NONE SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( SINGLE SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | oC_ShortestPathPattern
		// *         | oC_RelationshipsPattern
		// *         | oC_ParenthesizedExpression
		// *         | oC_FunctionInvocation
		// *         | oC_Variable
		// *         ;
		// */
		//    Literal | Parameter | LegacyParameter | CaseExpression | {Count} 'COUNT' '(' '*' ')' | ListComprehension |
		//    PatternComprehension | {Filter} 'FILTER' '(' filterExpression=FilterExpression ')' | {Extract} 'EXTRACT' '('
		//    filterExpression=FilterExpression ('|' expression=Expression)? ')' | Reduce | {All} 'ALL' '('
		//    filterExpression=FilterExpression ')' | {Any} 'ANY' '(' filterExpression=FilterExpression ')' | {None} 'NONE' '('
		//    filterExpression=FilterExpression ')' | {Single} 'SINGLE' '(' filterExpression=FilterExpression ')' |
		//    ShortestPathPattern | RelationshipsPattern | ParenthesizedExpression | FunctionInvocation |
		//    // TODO, changed
		//    {VariableRef} variableRef=VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Atom : oC_Literal
		// *         | oC_Parameter
		// *         | oC_LegacyParameter
		// *         | oC_CaseExpression
		// *         | ( COUNT SP? '(' SP? '*' SP? ')' )
		// *         | oC_ListComprehension
		// *         | oC_PatternComprehension
		// *         | ( FILTER SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( EXTRACT SP? '(' SP? oC_FilterExpression SP? ( SP? '|' oC_Expression )? ')' )
		// *         | oC_Reduce
		// *         | ( ALL SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( ANY SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( NONE SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( SINGLE SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | oC_ShortestPathPattern
		// *         | oC_RelationshipsPattern
		// *         | oC_ParenthesizedExpression
		// *         | oC_FunctionInvocation
		// *         | oC_Variable
		// *         ;
		// */
		//    Literal | Parameter | LegacyParameter | CaseExpression | {Count} 'COUNT' '(' '*' ')' | ListComprehension |
		//    PatternComprehension | {Filter} 'FILTER' '(' filterExpression=FilterExpression ')' | {Extract} 'EXTRACT' '('
		//    filterExpression=FilterExpression ('|' expression=Expression)? ')' | Reduce | {All} 'ALL' '('
		//    filterExpression=FilterExpression ')' | {Any} 'ANY' '(' filterExpression=FilterExpression ')' | {None} 'NONE' '('
		//    filterExpression=FilterExpression ')' | {Single} 'SINGLE' '(' filterExpression=FilterExpression ')' |
		//    ShortestPathPattern | RelationshipsPattern | ParenthesizedExpression | FunctionInvocation |
		//    // TODO, changed
		//    {VariableRef} variableRef=VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Atom : oC_Literal
		// *         | oC_Parameter
		// *         | oC_LegacyParameter
		// *         | oC_CaseExpression
		// *         | ( COUNT SP? '(' SP? '*' SP? ')' )
		// *         | oC_ListComprehension
		// *         | oC_PatternComprehension
		// *         | ( FILTER SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( EXTRACT SP? '(' SP? oC_FilterExpression SP? ( SP? '|' oC_Expression )? ')' )
		// *         | oC_Reduce
		// *         | ( ALL SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( ANY SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( NONE SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | ( SINGLE SP? '(' SP? oC_FilterExpression SP? ')' )
		// *         | oC_ShortestPathPattern
		// *         | oC_RelationshipsPattern
		// *         | oC_ParenthesizedExpression
		// *         | oC_FunctionInvocation
		// *         | oC_Variable
		// *         ;
		// */
		//    Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
		
		//LegacyParameter
		public RuleCall getLegacyParameterParserRuleCall_2() { return cLegacyParameterParserRuleCall_2; }
		
		//CaseExpression
		public RuleCall getCaseExpressionParserRuleCall_3() { return cCaseExpressionParserRuleCall_3; }
		
		//{Count} 'COUNT' '(' '*' ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Count}
		public Action getCountAction_4_0() { return cCountAction_4_0; }
		
		//'COUNT'
		public Keyword getCOUNTKeyword_4_1() { return cCOUNTKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_4_3() { return cAsteriskKeyword_4_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//ListComprehension
		public RuleCall getListComprehensionParserRuleCall_5() { return cListComprehensionParserRuleCall_5; }
		
		//PatternComprehension
		public RuleCall getPatternComprehensionParserRuleCall_6() { return cPatternComprehensionParserRuleCall_6; }
		
		//{Filter} 'FILTER' '(' filterExpression=FilterExpression ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Filter}
		public Action getFilterAction_7_0() { return cFilterAction_7_0; }
		
		//'FILTER'
		public Keyword getFILTERKeyword_7_1() { return cFILTERKeyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_7_3() { return cFilterExpressionAssignment_7_3; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_7_3_0() { return cFilterExpressionFilterExpressionParserRuleCall_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//{Extract} 'EXTRACT' '('
		//   filterExpression=FilterExpression ('|' expression=Expression)? ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{Extract}
		public Action getExtractAction_8_0() { return cExtractAction_8_0; }
		
		//'EXTRACT'
		public Keyword getEXTRACTKeyword_8_1() { return cEXTRACTKeyword_8_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_8_3() { return cFilterExpressionAssignment_8_3; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_8_3_0() { return cFilterExpressionFilterExpressionParserRuleCall_8_3_0; }
		
		//('|' expression=Expression)?
		public Group getGroup_8_4() { return cGroup_8_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_8_4_0() { return cVerticalLineKeyword_8_4_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_8_4_1() { return cExpressionAssignment_8_4_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_4_1_0() { return cExpressionExpressionParserRuleCall_8_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_5() { return cRightParenthesisKeyword_8_5; }
		
		//Reduce
		public RuleCall getReduceParserRuleCall_9() { return cReduceParserRuleCall_9; }
		
		//{All} 'ALL' '('
		//   filterExpression=FilterExpression ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//{All}
		public Action getAllAction_10_0() { return cAllAction_10_0; }
		
		//'ALL'
		public Keyword getALLKeyword_10_1() { return cALLKeyword_10_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_10_3() { return cFilterExpressionAssignment_10_3; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_10_3_0() { return cFilterExpressionFilterExpressionParserRuleCall_10_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }
		
		//{Any} 'ANY' '(' filterExpression=FilterExpression ')'
		public Group getGroup_11() { return cGroup_11; }
		
		//{Any}
		public Action getAnyAction_11_0() { return cAnyAction_11_0; }
		
		//'ANY'
		public Keyword getANYKeyword_11_1() { return cANYKeyword_11_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_11_3() { return cFilterExpressionAssignment_11_3; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_11_3_0() { return cFilterExpressionFilterExpressionParserRuleCall_11_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11_4() { return cRightParenthesisKeyword_11_4; }
		
		//{None} 'NONE' '('
		//   filterExpression=FilterExpression ')'
		public Group getGroup_12() { return cGroup_12; }
		
		//{None}
		public Action getNoneAction_12_0() { return cNoneAction_12_0; }
		
		//'NONE'
		public Keyword getNONEKeyword_12_1() { return cNONEKeyword_12_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_12_3() { return cFilterExpressionAssignment_12_3; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_12_3_0() { return cFilterExpressionFilterExpressionParserRuleCall_12_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12_4() { return cRightParenthesisKeyword_12_4; }
		
		//{Single} 'SINGLE' '(' filterExpression=FilterExpression ')'
		public Group getGroup_13() { return cGroup_13; }
		
		//{Single}
		public Action getSingleAction_13_0() { return cSingleAction_13_0; }
		
		//'SINGLE'
		public Keyword getSINGLEKeyword_13_1() { return cSINGLEKeyword_13_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_2() { return cLeftParenthesisKeyword_13_2; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_13_3() { return cFilterExpressionAssignment_13_3; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_13_3_0() { return cFilterExpressionFilterExpressionParserRuleCall_13_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_4() { return cRightParenthesisKeyword_13_4; }
		
		//ShortestPathPattern
		public RuleCall getShortestPathPatternParserRuleCall_14() { return cShortestPathPatternParserRuleCall_14; }
		
		//RelationshipsPattern
		public RuleCall getRelationshipsPatternParserRuleCall_15() { return cRelationshipsPatternParserRuleCall_15; }
		
		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_16() { return cParenthesizedExpressionParserRuleCall_16; }
		
		//FunctionInvocation
		public RuleCall getFunctionInvocationParserRuleCall_17() { return cFunctionInvocationParserRuleCall_17; }
		
		//// TODO, changed
		//{VariableRef} variableRef=VariableDeclaration
		public Group getGroup_18() { return cGroup_18; }
		
		//// TODO, changed
		//{VariableRef}
		public Action getVariableRefAction_18_0() { return cVariableRefAction_18_0; }
		
		//variableRef=VariableDeclaration
		public Assignment getVariableRefAssignment_18_1() { return cVariableRefAssignment_18_1; }
		
		//VariableDeclaration
		public RuleCall getVariableRefVariableDeclarationParserRuleCall_18_1_0() { return cVariableRefVariableDeclarationParserRuleCall_18_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNULLAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNULLKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMapLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cListLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Literal:
		///*
		// * oC_Literal : oC_NumberLiteral
		// *            | StringLiteral
		// *            | oC_BooleanLiteral
		// *            | NULL
		// *            | oC_MapLiteral
		// *            | oC_ListLiteral
		// *            ;
		// */
		//    NumberLiteral | StringLiteral | {NULL} 'NULL' | BooleanLiteral | MapLiteral | ListLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Literal : oC_NumberLiteral
		// *            | StringLiteral
		// *            | oC_BooleanLiteral
		// *            | NULL
		// *            | oC_MapLiteral
		// *            | oC_ListLiteral
		// *            ;
		// */
		//    NumberLiteral | StringLiteral | {NULL} 'NULL' | BooleanLiteral | MapLiteral | ListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_Literal : oC_NumberLiteral
		// *            | StringLiteral
		// *            | oC_BooleanLiteral
		// *            | NULL
		// *            | oC_MapLiteral
		// *            | oC_ListLiteral
		// *            ;
		// */
		//    NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
		
		//{NULL} 'NULL'
		public Group getGroup_2() { return cGroup_2; }
		
		//{NULL}
		public Action getNULLAction_2_0() { return cNULLAction_2_0; }
		
		//'NULL'
		public Keyword getNULLKeyword_2_1() { return cNULLKeyword_2_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
		
		//MapLiteral
		public RuleCall getMapLiteralParserRuleCall_4() { return cMapLiteralParserRuleCall_4; }
		
		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_5() { return cListLiteralParserRuleCall_5; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BooleanLiteral:
		///*
		// * oC_BooleanLiteral : TRUE
		// *                   | FALSE
		// *                   ;
		// */
		//    {BooleanLiteral} value=('TRUE' | 'FALSE');
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_BooleanLiteral : TRUE
		// *                   | FALSE
		// *                   ;
		// */
		//    {BooleanLiteral} value=('TRUE' | 'FALSE')
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_BooleanLiteral : TRUE
		// *                   | FALSE
		// *                   ;
		// */
		//    {BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }
		
		//value=('TRUE' | 'FALSE')
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_1_0_0() { return cValueTRUEKeyword_1_0_0; }
		
		//'FALSE'
		public Keyword getValueFALSEKeyword_1_0_1() { return cValueFALSEKeyword_1_0_1; }
	}
	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpressionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListLiteral:
		///*
		// * oC_ListLiteral : '[' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ']' ;
		// */
		//    {ListLiteral} '[' (expressions+=Expression (',' expressions+=Expression)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ListLiteral : '[' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ']' ;
		// */
		//    {ListLiteral} '[' (expressions+=Expression (',' expressions+=Expression)*)? ']'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ListLiteral : '[' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ']' ;
		// */
		//    {ListLiteral}
		public Action getListLiteralAction_0() { return cListLiteralAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(expressions+=Expression (',' expressions+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0_0() { return cExpressionsExpressionParserRuleCall_2_0_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_1_1() { return cExpressionsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_1_1_0() { return cExpressionsExpressionParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ReduceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Reduce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREDUCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAccumulatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccumulatorVariableDeclarationParserRuleCall_2_0 = (RuleCall)cAccumulatorAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAccumulatorExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAccumulatorExpressionExpressionParserRuleCall_4_0 = (RuleCall)cAccumulatorExpressionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIdInCollAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIdInCollIdInCollParserRuleCall_6_0 = (RuleCall)cIdInCollAssignment_6.eContents().get(0);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionExpressionParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Reduce:
		///*
		// * REDUCE SP? '(' oC_Variable '=' oC_Expression ',' oC_IdInColl '|' oC_Expression ')' ;
		// */
		//    'REDUCE' '(' accumulator=VariableDeclaration '=' accumulatorExpression=Expression ',' idInColl=IdInColl '|'
		//    expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * REDUCE SP? '(' oC_Variable '=' oC_Expression ',' oC_IdInColl '|' oC_Expression ')' ;
		// */
		//    'REDUCE' '(' accumulator=VariableDeclaration '=' accumulatorExpression=Expression ',' idInColl=IdInColl '|'
		//    expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * REDUCE SP? '(' oC_Variable '=' oC_Expression ',' oC_IdInColl '|' oC_Expression ')' ;
		// */
		//    'REDUCE'
		public Keyword getREDUCEKeyword_0() { return cREDUCEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//accumulator=VariableDeclaration
		public Assignment getAccumulatorAssignment_2() { return cAccumulatorAssignment_2; }
		
		//VariableDeclaration
		public RuleCall getAccumulatorVariableDeclarationParserRuleCall_2_0() { return cAccumulatorVariableDeclarationParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//accumulatorExpression=Expression
		public Assignment getAccumulatorExpressionAssignment_4() { return cAccumulatorExpressionAssignment_4; }
		
		//Expression
		public RuleCall getAccumulatorExpressionExpressionParserRuleCall_4_0() { return cAccumulatorExpressionExpressionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//idInColl=IdInColl
		public Assignment getIdInCollAssignment_6() { return cIdInCollAssignment_6; }
		
		//IdInColl
		public RuleCall getIdInCollIdInCollParserRuleCall_6_0() { return cIdInCollIdInCollParserRuleCall_6_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_0() { return cExpressionExpressionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression:
		///*
		// * oC_ParenthesizedExpression : '(' SP? oC_Expression SP? ')' ;
		// */
		//    '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ParenthesizedExpression : '(' SP? oC_Expression SP? ')' ;
		// */
		//    '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ParenthesizedExpression : '(' SP? oC_Expression SP? ')' ;
		// */
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class RelationshipsPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RelationshipsPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodePatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodePatternNodePatternParserRuleCall_0_0 = (RuleCall)cNodePatternAssignment_0.eContents().get(0);
		private final Assignment cChainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChainPatternElementChainParserRuleCall_1_0 = (RuleCall)cChainAssignment_1.eContents().get(0);
		
		//RelationshipsPattern:
		///*
		// * oC_RelationshipsPattern : oC_NodePattern ( SP? oC_PatternElementChain )+ ;
		// */
		//    nodePattern=NodePattern (chain+=PatternElementChain)+;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_RelationshipsPattern : oC_NodePattern ( SP? oC_PatternElementChain )+ ;
		// */
		//    nodePattern=NodePattern (chain+=PatternElementChain)+
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_RelationshipsPattern : oC_NodePattern ( SP? oC_PatternElementChain )+ ;
		// */
		//    nodePattern=NodePattern
		public Assignment getNodePatternAssignment_0() { return cNodePatternAssignment_0; }
		
		//NodePattern
		public RuleCall getNodePatternNodePatternParserRuleCall_0_0() { return cNodePatternNodePatternParserRuleCall_0_0; }
		
		//(chain+=PatternElementChain)+
		public Assignment getChainAssignment_1() { return cChainAssignment_1; }
		
		//PatternElementChain
		public RuleCall getChainPatternElementChainParserRuleCall_1_0() { return cChainPatternElementChainParserRuleCall_1_0; }
	}
	public class FilterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.FilterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdInCollAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdInCollIdInCollParserRuleCall_0_0 = (RuleCall)cIdInCollAssignment_0.eContents().get(0);
		private final Assignment cWhereAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhereWhereParserRuleCall_1_0 = (RuleCall)cWhereAssignment_1.eContents().get(0);
		
		//FilterExpression:
		///*
		// * oC_FilterExpression : oC_IdInColl ( SP? oC_Where )? ;
		// */
		//    idInColl=IdInColl (where=Where)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_FilterExpression : oC_IdInColl ( SP? oC_Where )? ;
		// */
		//    idInColl=IdInColl (where=Where)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_FilterExpression : oC_IdInColl ( SP? oC_Where )? ;
		// */
		//    idInColl=IdInColl
		public Assignment getIdInCollAssignment_0() { return cIdInCollAssignment_0; }
		
		//IdInColl
		public RuleCall getIdInCollIdInCollParserRuleCall_0_0() { return cIdInCollIdInCollParserRuleCall_0_0; }
		
		//(where=Where)?
		public Assignment getWhereAssignment_1() { return cWhereAssignment_1; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_1_0() { return cWhereWhereParserRuleCall_1_0; }
	}
	public class IdInCollElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.IdInColl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//IdInColl:
		///*
		// * oC_IdInColl : oC_Variable SP IN SP oC_Expression ;
		// */
		//    variable=VariableDeclaration 'IN' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_IdInColl : oC_Variable SP IN SP oC_Expression ;
		// */
		//    variable=VariableDeclaration 'IN' expression=Expression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_IdInColl : oC_Variable SP IN SP oC_Expression ;
		// */
		//    variable=VariableDeclaration
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_0_0() { return cVariableVariableDeclarationParserRuleCall_0_0; }
		
		//'IN'
		public Keyword getINKeyword_1() { return cINKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class FunctionInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.FunctionInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_0_0 = (RuleCall)cFunctionNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistinctAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDistinctDISTINCTKeyword_2_0 = (Keyword)cDistinctAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterExpressionParserRuleCall_3_0_0 = (RuleCall)cParameterAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_3_1_1_0 = (RuleCall)cParameterAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionInvocation:
		///*
		// * oC_FunctionInvocation : oC_FunctionName SP? '(' SP? ( DISTINCT SP? )? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
		// */
		//    functionName=FunctionName '(' distinct?='DISTINCT'? (parameter+=Expression (',' parameter+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_FunctionInvocation : oC_FunctionName SP? '(' SP? ( DISTINCT SP? )? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
		// */
		//    functionName=FunctionName '(' distinct?='DISTINCT'? (parameter+=Expression (',' parameter+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_FunctionInvocation : oC_FunctionName SP? '(' SP? ( DISTINCT SP? )? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
		// */
		//    functionName=FunctionName
		public Assignment getFunctionNameAssignment_0() { return cFunctionNameAssignment_0; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_0_0() { return cFunctionNameFunctionNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distinct?='DISTINCT'?
		public Assignment getDistinctAssignment_2() { return cDistinctAssignment_2; }
		
		//'DISTINCT'
		public Keyword getDistinctDISTINCTKeyword_2_0() { return cDistinctDISTINCTKeyword_2_0; }
		
		//(parameter+=Expression (',' parameter+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_3_0() { return cParameterAssignment_3_0; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_3_0_0() { return cParameterExpressionParserRuleCall_3_0_0; }
		
		//(',' parameter+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_3_1_1() { return cParameterAssignment_3_1_1; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_3_1_1_0() { return cParameterExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.FunctionName");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName:
		///*
		// * oC_FunctionName : oC_SymbolicName
		// *                 | EXISTS
		// *                 ;
		// */
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_FunctionName : oC_SymbolicName
		// *                 | EXISTS
		// *                 ;
		// */
		//    SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class ExplicitProcedureInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ExplicitProcedureInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcedureNameProcedureNameParserRuleCall_0_0 = (RuleCall)cProcedureNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterExpressionParserRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExplicitProcedureInvocation:
		///*
		// * oC_ExplicitProcedureInvocation : oC_ProcedureName SP? '(' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
		// */
		//    procedureName=ProcedureName '(' (parameter+=Expression (',' parameter+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ExplicitProcedureInvocation : oC_ProcedureName SP? '(' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
		// */
		//    procedureName=ProcedureName '(' (parameter+=Expression (',' parameter+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ExplicitProcedureInvocation : oC_ProcedureName SP? '(' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
		// */
		//    procedureName=ProcedureName
		public Assignment getProcedureNameAssignment_0() { return cProcedureNameAssignment_0; }
		
		//ProcedureName
		public RuleCall getProcedureNameProcedureNameParserRuleCall_0_0() { return cProcedureNameProcedureNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameter+=Expression (',' parameter+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_2_0_0() { return cParameterExpressionParserRuleCall_2_0_0; }
		
		//(',' parameter+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_2_1_1_0() { return cParameterExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ImplicitProcedureInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ImplicitProcedureInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplicitProcedureInvocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProcedureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcedureNameProcedureNameParserRuleCall_1_0 = (RuleCall)cProcedureNameAssignment_1.eContents().get(0);
		
		//ImplicitProcedureInvocation:
		///*
		// * oC_ImplicitProcedureInvocation : oC_ProcedureName ;
		// */
		//    {ImplicitProcedureInvocation} procedureName=ProcedureName;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ImplicitProcedureInvocation : oC_ProcedureName ;
		// */
		//    {ImplicitProcedureInvocation} procedureName=ProcedureName
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ImplicitProcedureInvocation : oC_ProcedureName ;
		// */
		//    {ImplicitProcedureInvocation}
		public Action getImplicitProcedureInvocationAction_0() { return cImplicitProcedureInvocationAction_0; }
		
		//procedureName=ProcedureName
		public Assignment getProcedureNameAssignment_1() { return cProcedureNameAssignment_1; }
		
		//ProcedureName
		public RuleCall getProcedureNameProcedureNameParserRuleCall_1_0() { return cProcedureNameProcedureNameParserRuleCall_1_0; }
	}
	public class ProcedureResultFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ProcedureResultField");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ProcedureResultField:
		///*
		// * oC_ProcedureResultField : oC_SymbolicName ;
		// */
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ProcedureResultField : oC_SymbolicName ;
		// */
		//    SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class ProcedureNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ProcedureName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceNamespaceParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSYMBOLIC_NAME_XParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProcedureName:
		///*
		// * oC_ProcedureName : oC_Namespace oC_SymbolicName ;
		// */
		//    namespace=Namespace name=SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ProcedureName : oC_Namespace oC_SymbolicName ;
		// */
		//    namespace=Namespace name=SYMBOLIC_NAME_X
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ProcedureName : oC_Namespace oC_SymbolicName ;
		// */
		//    namespace=Namespace
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }
		
		//Namespace
		public RuleCall getNamespaceNamespaceParserRuleCall_0_0() { return cNamespaceNamespaceParserRuleCall_0_0; }
		
		//name=SYMBOLIC_NAME_X
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getNameSYMBOLIC_NAME_XParserRuleCall_1_0() { return cNameSYMBOLIC_NAME_XParserRuleCall_1_0; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Namespace:
		///**
		// * oC_Namespace : ( oC_SymbolicName '.' )* ;
		// */
		//    (SYMBOLIC_NAME_X '.')*;
		@Override public ParserRule getRule() { return rule; }
		
		///**
		// * oC_Namespace : ( oC_SymbolicName '.' )* ;
		// */
		//    (SYMBOLIC_NAME_X '.')*
		public Group getGroup() { return cGroup; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall_0() { return cSYMBOLIC_NAME_XParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class ListComprehensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ListComprehension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilterExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterExpressionFilterExpressionParserRuleCall_1_0 = (RuleCall)cFilterExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListComprehension:
		///*
		// * oC_ListComprehension : '[' SP? oC_FilterExpression ( SP? '|' SP? oC_Expression )? SP? ']' ;
		// */
		//    '[' filterExpression=FilterExpression ('|' expression=Expression)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_ListComprehension : '[' SP? oC_FilterExpression ( SP? '|' SP? oC_Expression )? SP? ']' ;
		// */
		//    '[' filterExpression=FilterExpression ('|' expression=Expression)? ']'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_ListComprehension : '[' SP? oC_FilterExpression ( SP? '|' SP? oC_Expression )? SP? ']' ;
		// */
		//    '['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//filterExpression=FilterExpression
		public Assignment getFilterExpressionAssignment_1() { return cFilterExpressionAssignment_1; }
		
		//FilterExpression
		public RuleCall getFilterExpressionFilterExpressionParserRuleCall_1_0() { return cFilterExpressionFilterExpressionParserRuleCall_1_0; }
		
		//('|' expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PatternComprehensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PatternComprehension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPathVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPathVariableVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cPathVariableAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternRelationshipsPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Assignment cWhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereWhereParserRuleCall_3_0 = (RuleCall)cWhereAssignment_3.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PatternComprehension:
		///*
		// * oC_PatternComprehension : '[' SP? ( oC_Variable SP? '=' SP? )? oC_RelationshipsPattern SP? ( WHERE SP? oC_Expression SP? )? '|' SP? oC_Expression SP? ']' ;
		// */
		//    '[' (pathVariable=VariableDeclaration '=')? pattern=RelationshipsPattern (where=Where)? '|' expression=Expression
		//    ']';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PatternComprehension : '[' SP? ( oC_Variable SP? '=' SP? )? oC_RelationshipsPattern SP? ( WHERE SP? oC_Expression SP? )? '|' SP? oC_Expression SP? ']' ;
		// */
		//    '[' (pathVariable=VariableDeclaration '=')? pattern=RelationshipsPattern (where=Where)? '|' expression=Expression
		//    ']'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PatternComprehension : '[' SP? ( oC_Variable SP? '=' SP? )? oC_RelationshipsPattern SP? ( WHERE SP? oC_Expression SP? )? '|' SP? oC_Expression SP? ']' ;
		// */
		//    '['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(pathVariable=VariableDeclaration '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//pathVariable=VariableDeclaration
		public Assignment getPathVariableAssignment_1_0() { return cPathVariableAssignment_1_0; }
		
		//VariableDeclaration
		public RuleCall getPathVariableVariableDeclarationParserRuleCall_1_0_0() { return cPathVariableVariableDeclarationParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//pattern=RelationshipsPattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//RelationshipsPattern
		public RuleCall getPatternRelationshipsPatternParserRuleCall_2_0() { return cPatternRelationshipsPatternParserRuleCall_2_0; }
		
		//(where=Where)?
		public Assignment getWhereAssignment_3() { return cWhereAssignment_3; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_3_0() { return cWhereWhereParserRuleCall_3_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class PropertyLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PropertyLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cPropertyKeyNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0 = (RuleCall)cPropertyKeyNameAssignment_1_0_0.eContents().get(0);
		private final Assignment cPropertyOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cPropertyOperatorAlternatives_1_0_1_0 = (Alternatives)cPropertyOperatorAssignment_1_0_1.eContents().get(0);
		private final Keyword cPropertyOperatorQuestionMarkKeyword_1_0_1_0_0 = (Keyword)cPropertyOperatorAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cPropertyOperatorExclamationMarkKeyword_1_0_1_0_1 = (Keyword)cPropertyOperatorAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cPropertyKeyNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0 = (RuleCall)cPropertyKeyNameAssignment_1_1.eContents().get(0);
		
		//PropertyLookup:
		///*
		// * oC_PropertyLookup : '.' SP? ( oC_PropertyKeyName ) ;
		// */
		//    '.' (propertyKeyName=PropertyKeyName propertyOperator=('?' | '!') | propertyKeyName=PropertyKeyName);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PropertyLookup : '.' SP? ( oC_PropertyKeyName ) ;
		// */
		//    '.' (propertyKeyName=PropertyKeyName propertyOperator=('?' | '!') | propertyKeyName=PropertyKeyName)
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PropertyLookup : '.' SP? ( oC_PropertyKeyName ) ;
		// */
		//    '.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//(propertyKeyName=PropertyKeyName propertyOperator=('?' | '!') | propertyKeyName=PropertyKeyName)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//propertyKeyName=PropertyKeyName propertyOperator=('?' | '!')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//propertyKeyName=PropertyKeyName
		public Assignment getPropertyKeyNameAssignment_1_0_0() { return cPropertyKeyNameAssignment_1_0_0; }
		
		//PropertyKeyName
		public RuleCall getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0() { return cPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0; }
		
		//propertyOperator=('?' | '!')
		public Assignment getPropertyOperatorAssignment_1_0_1() { return cPropertyOperatorAssignment_1_0_1; }
		
		//('?' | '!')
		public Alternatives getPropertyOperatorAlternatives_1_0_1_0() { return cPropertyOperatorAlternatives_1_0_1_0; }
		
		//'?'
		public Keyword getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0() { return cPropertyOperatorQuestionMarkKeyword_1_0_1_0_0; }
		
		//'!'
		public Keyword getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1() { return cPropertyOperatorExclamationMarkKeyword_1_0_1_0_1; }
		
		//propertyKeyName=PropertyKeyName
		public Assignment getPropertyKeyNameAssignment_1_1() { return cPropertyKeyNameAssignment_1_1; }
		
		//PropertyKeyName
		public RuleCall getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0() { return cPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0; }
	}
	public class CaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCASEKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cCaseAlternativesAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0 = (RuleCall)cCaseAlternativesAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cCASEKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cCaseExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cCaseExpressionExpressionParserRuleCall_0_1_1_0 = (RuleCall)cCaseExpressionAssignment_0_1_1.eContents().get(0);
		private final Assignment cCaseAlternativesAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0 = (RuleCall)cCaseAlternativesAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cELSEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElseExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElseExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cElseExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CaseExpression:
		///*
		// * oC_CaseExpression : ( ( CASE ( SP? oC_CaseAlternatives )+ ) | ( CASE SP? oC_Expression ( SP? oC_CaseAlternatives )+ ) ) ( SP? ELSE SP? oC_Expression )? SP? END ;
		// */
		//    (('CASE' (caseAlternatives+=CaseAlternatives)+) | ('CASE' caseExpression=Expression
		//    (caseAlternatives+=CaseAlternatives)+)) ('ELSE' elseExpression=Expression)? 'END';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CaseExpression : ( ( CASE ( SP? oC_CaseAlternatives )+ ) | ( CASE SP? oC_Expression ( SP? oC_CaseAlternatives )+ ) ) ( SP? ELSE SP? oC_Expression )? SP? END ;
		// */
		//    (('CASE' (caseAlternatives+=CaseAlternatives)+) | ('CASE' caseExpression=Expression
		//    (caseAlternatives+=CaseAlternatives)+)) ('ELSE' elseExpression=Expression)? 'END'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CaseExpression : ( ( CASE ( SP? oC_CaseAlternatives )+ ) | ( CASE SP? oC_Expression ( SP? oC_CaseAlternatives )+ ) ) ( SP? ELSE SP? oC_Expression )? SP? END ;
		// */
		//    (('CASE' (caseAlternatives+=CaseAlternatives)+) | ('CASE' caseExpression=Expression
		//    (caseAlternatives+=CaseAlternatives)+))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//('CASE' (caseAlternatives+=CaseAlternatives)+)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'CASE'
		public Keyword getCASEKeyword_0_0_0() { return cCASEKeyword_0_0_0; }
		
		//(caseAlternatives+=CaseAlternatives)+
		public Assignment getCaseAlternativesAssignment_0_0_1() { return cCaseAlternativesAssignment_0_0_1; }
		
		//CaseAlternatives
		public RuleCall getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0() { return cCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0; }
		
		//('CASE' caseExpression=Expression
		//   (caseAlternatives+=CaseAlternatives)+)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'CASE'
		public Keyword getCASEKeyword_0_1_0() { return cCASEKeyword_0_1_0; }
		
		//caseExpression=Expression
		public Assignment getCaseExpressionAssignment_0_1_1() { return cCaseExpressionAssignment_0_1_1; }
		
		//Expression
		public RuleCall getCaseExpressionExpressionParserRuleCall_0_1_1_0() { return cCaseExpressionExpressionParserRuleCall_0_1_1_0; }
		
		//(caseAlternatives+=CaseAlternatives)+
		public Assignment getCaseAlternativesAssignment_0_1_2() { return cCaseAlternativesAssignment_0_1_2; }
		
		//CaseAlternatives
		public RuleCall getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0() { return cCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0; }
		
		//('ELSE' elseExpression=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'ELSE'
		public Keyword getELSEKeyword_1_0() { return cELSEKeyword_1_0; }
		
		//elseExpression=Expression
		public Assignment getElseExpressionAssignment_1_1() { return cElseExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getElseExpressionExpressionParserRuleCall_1_1_0() { return cElseExpressionExpressionParserRuleCall_1_1_0; }
		
		//'END'
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}
	public class CaseAlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.CaseAlternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_1_0 = (RuleCall)cWhenAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//CaseAlternatives:
		///*
		// * oC_CaseAlternatives : WHEN SP? oC_Expression SP? THEN SP? oC_Expression ;
		// */
		//    'WHEN' when=Expression 'THEN' then=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_CaseAlternatives : WHEN SP? oC_Expression SP? THEN SP? oC_Expression ;
		// */
		//    'WHEN' when=Expression 'THEN' then=Expression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_CaseAlternatives : WHEN SP? oC_Expression SP? THEN SP? oC_Expression ;
		// */
		//    'WHEN'
		public Keyword getWHENKeyword_0() { return cWHENKeyword_0; }
		
		//when=Expression
		public Assignment getWhenAssignment_1() { return cWhenAssignment_1; }
		
		//Expression
		public RuleCall getWhenExpressionParserRuleCall_1_0() { return cWhenExpressionParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//then=Expression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0() { return cThenExpressionParserRuleCall_3_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSYMBOLIC_NAME_XParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableDeclaration returns VariableDeclaration:
		///*
		// * oC_Variable : oC_SymbolicName ;
		// */
		//    {VariableDeclaration} name=SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Variable : oC_SymbolicName ;
		// */
		//    {VariableDeclaration} name=SYMBOLIC_NAME_X
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Variable : oC_SymbolicName ;
		// */
		//    {VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }
		
		//name=SYMBOLIC_NAME_X
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getNameSYMBOLIC_NAME_XParserRuleCall_1_0() { return cNameSYMBOLIC_NAME_XParserRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		///*
		// * StringLiteral : ( '"' ( StringLiteral_0 | EscapedChar )* '"' )
		// *               | ( '\'' ( StringLiteral_1 | EscapedChar )* '\'' )
		// *               ;
		// */
		//    value=STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * StringLiteral : ( '"' ( StringLiteral_0 | EscapedChar )* '"' )
		// *               | ( '\'' ( StringLiteral_1 | EscapedChar )* '\'' )
		// *               ;
		// */
		//    value=STRING_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_0() { return cValueSTRING_LITERALTerminalRuleCall_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		///*
		// * oC_NumberLiteral : oC_DoubleLiteral
		// *                  | oC_IntegerLiteral
		// *                  ;
		// */
		//    value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NumberLiteral : oC_DoubleLiteral
		// *                  | oC_IntegerLiteral
		// *                  ;
		// */
		//    value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}
	public class MapLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.MapLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesMapLiteralEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesMapLiteralEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MapLiteral:
		///*
		// * oC_MapLiteral : '{' SP? ( oC_PropertyKeyName SP? ':' SP? oC_Expression SP? ( ',' SP? oC_PropertyKeyName SP? ':' SP? oC_Expression SP? )* )? '}' ;
		// *
		// * Comment: For simplicity we split up the antlr clause in 'MapLiteral' and 'MapLiteralEntry'
		// */
		//    {MapLiteral} '{' (entries+=MapLiteralEntry (',' entries+=MapLiteralEntry)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_MapLiteral : '{' SP? ( oC_PropertyKeyName SP? ':' SP? oC_Expression SP? ( ',' SP? oC_PropertyKeyName SP? ':' SP? oC_Expression SP? )* )? '}' ;
		// *
		// * Comment: For simplicity we split up the antlr clause in 'MapLiteral' and 'MapLiteralEntry'
		// */
		//    {MapLiteral} '{' (entries+=MapLiteralEntry (',' entries+=MapLiteralEntry)*)? '}'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_MapLiteral : '{' SP? ( oC_PropertyKeyName SP? ':' SP? oC_Expression SP? ( ',' SP? oC_PropertyKeyName SP? ':' SP? oC_Expression SP? )* )? '}' ;
		// *
		// * Comment: For simplicity we split up the antlr clause in 'MapLiteral' and 'MapLiteralEntry'
		// */
		//    {MapLiteral}
		public Action getMapLiteralAction_0() { return cMapLiteralAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entries+=MapLiteralEntry (',' entries+=MapLiteralEntry)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=MapLiteralEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//MapLiteralEntry
		public RuleCall getEntriesMapLiteralEntryParserRuleCall_2_0_0() { return cEntriesMapLiteralEntryParserRuleCall_2_0_0; }
		
		//(',' entries+=MapLiteralEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entries+=MapLiteralEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//MapLiteralEntry
		public RuleCall getEntriesMapLiteralEntryParserRuleCall_2_1_1_0() { return cEntriesMapLiteralEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MapLiteralEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.MapLiteralEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyPropertyKeyNameParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MapLiteralEntry:
		//    key=PropertyKeyName ':' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//key=PropertyKeyName ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//key=PropertyKeyName
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//PropertyKeyName
		public RuleCall getKeyPropertyKeyNameParserRuleCall_0_0() { return cKeyPropertyKeyNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class LegacyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LegacyParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cParameterAlternatives_1_0 = (Alternatives)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0 = (RuleCall)cParameterAlternatives_1_0.eContents().get(0);
		private final RuleCall cParameterNumberParserRuleCall_1_0_1 = (RuleCall)cParameterAlternatives_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LegacyParameter:
		///*
		// * oC_LegacyParameter : '{' SP? ( oC_SymbolicName | DecimalInteger ) SP? '}' ;
		// *
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkLegacyParameterFormat(LegacyParameter)
		// */
		//    '{' parameter=(SYMBOLIC_NAME_X | Number) '}';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_LegacyParameter : '{' SP? ( oC_SymbolicName | DecimalInteger ) SP? '}' ;
		// *
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkLegacyParameterFormat(LegacyParameter)
		// */
		//    '{' parameter=(SYMBOLIC_NAME_X | Number) '}'
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_LegacyParameter : '{' SP? ( oC_SymbolicName | DecimalInteger ) SP? '}' ;
		// *
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkLegacyParameterFormat(LegacyParameter)
		// */
		//    '{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//parameter=(SYMBOLIC_NAME_X | Number)
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//(SYMBOLIC_NAME_X | Number)
		public Alternatives getParameterAlternatives_1_0() { return cParameterAlternatives_1_0; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0() { return cParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0; }
		
		//Number
		public RuleCall getParameterNumberParserRuleCall_1_0_1() { return cParameterNumberParserRuleCall_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cParameterAlternatives_1_0 = (Alternatives)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0 = (RuleCall)cParameterAlternatives_1_0.eContents().get(0);
		private final RuleCall cParameterNumberParserRuleCall_1_0_1 = (RuleCall)cParameterAlternatives_1_0.eContents().get(1);
		
		//Parameter:
		///*
		// * oC_Parameter : '$' ( oC_SymbolicName | DecimalInteger ) ;
		// *
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkParameterFormat(Parameter)
		// */
		//    '$' parameter=(SYMBOLIC_NAME_X | Number);
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_Parameter : '$' ( oC_SymbolicName | DecimalInteger ) ;
		// *
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkParameterFormat(Parameter)
		// */
		//    '$' parameter=(SYMBOLIC_NAME_X | Number)
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_Parameter : '$' ( oC_SymbolicName | DecimalInteger ) ;
		// *
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkParameterFormat(Parameter)
		// */
		//    '$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//parameter=(SYMBOLIC_NAME_X | Number)
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//(SYMBOLIC_NAME_X | Number)
		public Alternatives getParameterAlternatives_1_0() { return cParameterAlternatives_1_0; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0() { return cParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0; }
		
		//Number
		public RuleCall getParameterNumberParserRuleCall_1_0_1() { return cParameterNumberParserRuleCall_1_0_1; }
	}
	public class PropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PropertyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPropertyLookupsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyLookupsPropertyLookupParserRuleCall_1_0 = (RuleCall)cPropertyLookupsAssignment_1.eContents().get(0);
		
		//PropertyExpression:
		///*
		// * oC_PropertyExpression : oC_Atom ( SP? oC_PropertyLookup )+ ;
		// */
		//    Atom (propertyLookups+=PropertyLookup)+;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PropertyExpression : oC_Atom ( SP? oC_PropertyLookup )+ ;
		// */
		//    Atom (propertyLookups+=PropertyLookup)+
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PropertyExpression : oC_Atom ( SP? oC_PropertyLookup )+ ;
		// */
		//    Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//(propertyLookups+=PropertyLookup)+
		public Assignment getPropertyLookupsAssignment_1() { return cPropertyLookupsAssignment_1; }
		
		//PropertyLookup
		public RuleCall getPropertyLookupsPropertyLookupParserRuleCall_1_0() { return cPropertyLookupsPropertyLookupParserRuleCall_1_0; }
	}
	public class PropertyKeyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.PropertyKeyName");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PropertyKeyName:
		///*
		// * oC_PropertyKeyName : oC_SchemaName ;
		// */
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PropertyKeyName : oC_SchemaName ;
		// */
		//    SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class LeftArrowHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.LeftArrowHead");
		private final Keyword cLessThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		///**
		//  {StringConstant} value=STRING_LITERAL |
		//  * {BoolConstant}
		//    value=('TRUE' | 'FALSE') | {NullConstant} 'NULL' |
		//    * MapLiteral |
		//    *
		//    */
		//LeftArrowHead:
		///*
		// * Comment: reduced character set
		// */
		//    '<';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * Comment: reduced character set
		// */
		//    '<'
		public Keyword getLessThanSignKeyword() { return cLessThanSignKeyword; }
	}
	public class RightArrowHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.RightArrowHead");
		private final Keyword cGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//RightArrowHead:
		///*
		// * Comment: reduced character set
		// */
		//    '>';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * Comment: reduced character set
		// */
		//    '>'
		public Keyword getGreaterThanSignKeyword() { return cGreaterThanSignKeyword; }
	}
	public class DashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Dash");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//Dash:
		///*
		// * Comment: reduced character set
		// */
		//    '-';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * Comment: reduced character set
		// */
		//    '-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class DecimalIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.DecimalInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecimalIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DecimalInteger:
		///*
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkDecimalIntegerFormat(DecimalInteger)
		// */
		//    {DecimalInteger} value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkDecimalIntegerFormat(DecimalInteger)
		// */
		//    {DecimalInteger} value=Number
		public Group getGroup() { return cGroup; }
		
		///*
		// * Comment: Format of DecimalInteger is checked via
		// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkDecimalIntegerFormat(DecimalInteger)
		// */
		//    {DecimalInteger}
		public Action getDecimalIntegerAction_0() { return cDecimalIntegerAction_0; }
		
		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden():
		//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
		@Override public ParserRule getRule() { return rule; }
		
		//HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }
		
		//(INT | DECIMAL) ('.' (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }
		
		//(INT | DECIMAL)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }
		
		//('.' (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//(INT | DECIMAL)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}
	public class SYMBOLIC_NAME_XElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cCYPHERKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEXPLAINKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPROFILEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUSINGKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPERIODICKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCOMMITKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUNIONKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cALLKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCREATEKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cINDEXKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cONKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDROPKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cCONSTRAINTKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cASSERTKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cISKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUNIQUEKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cEXISTSKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cLOADKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cCSVKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cWITHKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cHEADERSKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cFROMKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cASKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cFIELDTERMINATORKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cOPTIONALKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cMATCHKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cUNWINDKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cMERGEKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cSETKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cDELETEKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cDETACHKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cREMOVEKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cFOREACHKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cINKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cDISTINCTKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cRETURNKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cORDERKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cBYKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cSKIPKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cLIMITKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cDESCENDINGKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cDESCKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cASCENDINGKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cASCKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cJOINKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cSCANKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cSTARTKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cNODEKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cRELATIONSHIPKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cRELKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cWHEREKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cSHORTESTPATHKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cALLSHORTESTPATHSKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cORKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cXORKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cANDKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cNOTKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cSTARTSKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cENDSKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cCONTAINSKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cNULLKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cTRUEKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cFALSEKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cCOUNTKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cFILTERKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cEXTRACTKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cANYKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cNONEKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cSINGLEKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cREDUCEKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cCASEKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cELSEKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cENDKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cWHENKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cTHENKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		
		//SYMBOLIC_NAME_X:
		///*
		// * symbolicNameString : UnescapedSymbolicNameString
		// *                  | EscapedSymbolicNameString
		// *                  | CYPHER
		// *                  | EXPLAIN
		// *                  | PROFILE
		// *                  | USING
		// *                  | PERIODIC
		// *                  | COMMIT
		// *                  | UNION
		// *                  | ALL
		// *                  | CREATE
		// *                  | INDEX
		// *                  | ON
		// *                  | DROP
		// *                  | CONSTRAINT
		// *                  | ASSERT
		// *                  | IS
		// *                  | UNIQUE
		// *                  | EXISTS
		// *                  | LOAD
		// *                  | CSV
		// *                  | WITH
		// *                  | HEADERS
		// *                  | FROM
		// *                  | AS
		// *                  | FIELDTERMINATOR
		// *                  | OPTIONAL
		// *                  | MATCH
		// *                  | UNWIND
		// *                  | MERGE
		// *                  | SET
		// *                  | DELETE
		// *                  | DETACH
		// *                  | REMOVE
		// *                  | FOREACH
		// *                  | IN
		// *                  | DISTINCT
		// *                  | RETURN
		// *                  | ORDER
		// *                  | BY
		// *                  | L_SKIP
		// *                  | LIMIT
		// *                  | DESCENDING
		// *                  | DESC
		// *                  | ASCENDING
		// *                  | ASC
		// *                  | JOIN
		// *                  | SCAN
		// *                  | START
		// *                  | NODE
		// *                  | RELATIONSHIP
		// *                  | REL
		// *                  | WHERE
		// *                  | SHORTESTPATH
		// *                  | ALLSHORTESTPATHS
		// *                  | OR
		// *                  | XOR
		// *                  | AND
		// *                  | NOT
		// *                  | STARTS
		// *                  | ENDS
		// *                  | CONTAINS
		// *                  | NULL
		// *                  | TRUE
		// *                  | FALSE
		// *                  | COUNT
		// *                  | FILTER
		// *                  | EXTRACT
		// *                  | ANY
		// *                  | NONE
		// *                  | SINGLE
		// *                  | REDUCE
		// *                  | CASE
		// *                  | ELSE
		// *                  | END
		// *                  | WHEN
		// *                  | THEN
		// *                  | L_0X
		// *                   ;
		// */
		//    ID | 'CYPHER' | 'EXPLAIN' | 'PROFILE' | 'USING' | 'PERIODIC' | 'COMMIT' | 'UNION' | 'ALL' | 'CREATE' | 'INDEX' | 'ON'
		//    | 'DROP' | 'CONSTRAINT' | 'ASSERT' | 'IS' | 'UNIQUE' | 'EXISTS' | 'LOAD' | 'CSV' | 'WITH' | 'HEADERS' | 'FROM' | 'AS'
		//    | 'FIELDTERMINATOR' | 'OPTIONAL' | 'MATCH' | 'UNWIND' | 'MERGE' | 'SET' | 'DELETE' | 'DETACH' | 'REMOVE' | 'FOREACH'
		//    | 'IN' | 'DISTINCT' | 'RETURN' | 'ORDER' | 'BY' | 'SKIP' | 'LIMIT' | 'DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC' |
		//    'JOIN' | 'SCAN' | 'START' | 'NODE' | 'RELATIONSHIP' | 'REL' | 'WHERE' | 'SHORTESTPATH' | 'ALLSHORTESTPATHS' | 'OR' |
		//    'XOR' | 'AND' | 'NOT' | 'STARTS' | 'ENDS' | 'CONTAINS' | 'NULL' | 'TRUE' | 'FALSE' | 'COUNT' | 'FILTER' | 'EXTRACT' |
		//    'ANY' | 'NONE' | 'SINGLE' | 'REDUCE' | 'CASE' | 'ELSE' | 'END' | 'WHEN' | 'THEN';
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * symbolicNameString : UnescapedSymbolicNameString
		// *                  | EscapedSymbolicNameString
		// *                  | CYPHER
		// *                  | EXPLAIN
		// *                  | PROFILE
		// *                  | USING
		// *                  | PERIODIC
		// *                  | COMMIT
		// *                  | UNION
		// *                  | ALL
		// *                  | CREATE
		// *                  | INDEX
		// *                  | ON
		// *                  | DROP
		// *                  | CONSTRAINT
		// *                  | ASSERT
		// *                  | IS
		// *                  | UNIQUE
		// *                  | EXISTS
		// *                  | LOAD
		// *                  | CSV
		// *                  | WITH
		// *                  | HEADERS
		// *                  | FROM
		// *                  | AS
		// *                  | FIELDTERMINATOR
		// *                  | OPTIONAL
		// *                  | MATCH
		// *                  | UNWIND
		// *                  | MERGE
		// *                  | SET
		// *                  | DELETE
		// *                  | DETACH
		// *                  | REMOVE
		// *                  | FOREACH
		// *                  | IN
		// *                  | DISTINCT
		// *                  | RETURN
		// *                  | ORDER
		// *                  | BY
		// *                  | L_SKIP
		// *                  | LIMIT
		// *                  | DESCENDING
		// *                  | DESC
		// *                  | ASCENDING
		// *                  | ASC
		// *                  | JOIN
		// *                  | SCAN
		// *                  | START
		// *                  | NODE
		// *                  | RELATIONSHIP
		// *                  | REL
		// *                  | WHERE
		// *                  | SHORTESTPATH
		// *                  | ALLSHORTESTPATHS
		// *                  | OR
		// *                  | XOR
		// *                  | AND
		// *                  | NOT
		// *                  | STARTS
		// *                  | ENDS
		// *                  | CONTAINS
		// *                  | NULL
		// *                  | TRUE
		// *                  | FALSE
		// *                  | COUNT
		// *                  | FILTER
		// *                  | EXTRACT
		// *                  | ANY
		// *                  | NONE
		// *                  | SINGLE
		// *                  | REDUCE
		// *                  | CASE
		// *                  | ELSE
		// *                  | END
		// *                  | WHEN
		// *                  | THEN
		// *                  | L_0X
		// *                   ;
		// */
		//    ID | 'CYPHER' | 'EXPLAIN' | 'PROFILE' | 'USING' | 'PERIODIC' | 'COMMIT' | 'UNION' | 'ALL' | 'CREATE' | 'INDEX' | 'ON'
		//    | 'DROP' | 'CONSTRAINT' | 'ASSERT' | 'IS' | 'UNIQUE' | 'EXISTS' | 'LOAD' | 'CSV' | 'WITH' | 'HEADERS' | 'FROM' | 'AS'
		//    | 'FIELDTERMINATOR' | 'OPTIONAL' | 'MATCH' | 'UNWIND' | 'MERGE' | 'SET' | 'DELETE' | 'DETACH' | 'REMOVE' | 'FOREACH'
		//    | 'IN' | 'DISTINCT' | 'RETURN' | 'ORDER' | 'BY' | 'SKIP' | 'LIMIT' | 'DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC' |
		//    'JOIN' | 'SCAN' | 'START' | 'NODE' | 'RELATIONSHIP' | 'REL' | 'WHERE' | 'SHORTESTPATH' | 'ALLSHORTESTPATHS' | 'OR' |
		//    'XOR' | 'AND' | 'NOT' | 'STARTS' | 'ENDS' | 'CONTAINS' | 'NULL' | 'TRUE' | 'FALSE' | 'COUNT' | 'FILTER' | 'EXTRACT' |
		//    'ANY' | 'NONE' | 'SINGLE' | 'REDUCE' | 'CASE' | 'ELSE' | 'END' | 'WHEN' | 'THEN'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * symbolicNameString : UnescapedSymbolicNameString
		// *                  | EscapedSymbolicNameString
		// *                  | CYPHER
		// *                  | EXPLAIN
		// *                  | PROFILE
		// *                  | USING
		// *                  | PERIODIC
		// *                  | COMMIT
		// *                  | UNION
		// *                  | ALL
		// *                  | CREATE
		// *                  | INDEX
		// *                  | ON
		// *                  | DROP
		// *                  | CONSTRAINT
		// *                  | ASSERT
		// *                  | IS
		// *                  | UNIQUE
		// *                  | EXISTS
		// *                  | LOAD
		// *                  | CSV
		// *                  | WITH
		// *                  | HEADERS
		// *                  | FROM
		// *                  | AS
		// *                  | FIELDTERMINATOR
		// *                  | OPTIONAL
		// *                  | MATCH
		// *                  | UNWIND
		// *                  | MERGE
		// *                  | SET
		// *                  | DELETE
		// *                  | DETACH
		// *                  | REMOVE
		// *                  | FOREACH
		// *                  | IN
		// *                  | DISTINCT
		// *                  | RETURN
		// *                  | ORDER
		// *                  | BY
		// *                  | L_SKIP
		// *                  | LIMIT
		// *                  | DESCENDING
		// *                  | DESC
		// *                  | ASCENDING
		// *                  | ASC
		// *                  | JOIN
		// *                  | SCAN
		// *                  | START
		// *                  | NODE
		// *                  | RELATIONSHIP
		// *                  | REL
		// *                  | WHERE
		// *                  | SHORTESTPATH
		// *                  | ALLSHORTESTPATHS
		// *                  | OR
		// *                  | XOR
		// *                  | AND
		// *                  | NOT
		// *                  | STARTS
		// *                  | ENDS
		// *                  | CONTAINS
		// *                  | NULL
		// *                  | TRUE
		// *                  | FALSE
		// *                  | COUNT
		// *                  | FILTER
		// *                  | EXTRACT
		// *                  | ANY
		// *                  | NONE
		// *                  | SINGLE
		// *                  | REDUCE
		// *                  | CASE
		// *                  | ELSE
		// *                  | END
		// *                  | WHEN
		// *                  | THEN
		// *                  | L_0X
		// *                   ;
		// */
		//    ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'CYPHER'
		public Keyword getCYPHERKeyword_1() { return cCYPHERKeyword_1; }
		
		//'EXPLAIN'
		public Keyword getEXPLAINKeyword_2() { return cEXPLAINKeyword_2; }
		
		//'PROFILE'
		public Keyword getPROFILEKeyword_3() { return cPROFILEKeyword_3; }
		
		//'USING'
		public Keyword getUSINGKeyword_4() { return cUSINGKeyword_4; }
		
		//'PERIODIC'
		public Keyword getPERIODICKeyword_5() { return cPERIODICKeyword_5; }
		
		//'COMMIT'
		public Keyword getCOMMITKeyword_6() { return cCOMMITKeyword_6; }
		
		//'UNION'
		public Keyword getUNIONKeyword_7() { return cUNIONKeyword_7; }
		
		//'ALL'
		public Keyword getALLKeyword_8() { return cALLKeyword_8; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_9() { return cCREATEKeyword_9; }
		
		//'INDEX'
		public Keyword getINDEXKeyword_10() { return cINDEXKeyword_10; }
		
		//'ON'
		public Keyword getONKeyword_11() { return cONKeyword_11; }
		
		//'DROP'
		public Keyword getDROPKeyword_12() { return cDROPKeyword_12; }
		
		//'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_13() { return cCONSTRAINTKeyword_13; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_14() { return cASSERTKeyword_14; }
		
		//'IS'
		public Keyword getISKeyword_15() { return cISKeyword_15; }
		
		//'UNIQUE'
		public Keyword getUNIQUEKeyword_16() { return cUNIQUEKeyword_16; }
		
		//'EXISTS'
		public Keyword getEXISTSKeyword_17() { return cEXISTSKeyword_17; }
		
		//'LOAD'
		public Keyword getLOADKeyword_18() { return cLOADKeyword_18; }
		
		//'CSV'
		public Keyword getCSVKeyword_19() { return cCSVKeyword_19; }
		
		//'WITH'
		public Keyword getWITHKeyword_20() { return cWITHKeyword_20; }
		
		//'HEADERS'
		public Keyword getHEADERSKeyword_21() { return cHEADERSKeyword_21; }
		
		//'FROM'
		public Keyword getFROMKeyword_22() { return cFROMKeyword_22; }
		
		//'AS'
		public Keyword getASKeyword_23() { return cASKeyword_23; }
		
		//'FIELDTERMINATOR'
		public Keyword getFIELDTERMINATORKeyword_24() { return cFIELDTERMINATORKeyword_24; }
		
		//'OPTIONAL'
		public Keyword getOPTIONALKeyword_25() { return cOPTIONALKeyword_25; }
		
		//'MATCH'
		public Keyword getMATCHKeyword_26() { return cMATCHKeyword_26; }
		
		//'UNWIND'
		public Keyword getUNWINDKeyword_27() { return cUNWINDKeyword_27; }
		
		//'MERGE'
		public Keyword getMERGEKeyword_28() { return cMERGEKeyword_28; }
		
		//'SET'
		public Keyword getSETKeyword_29() { return cSETKeyword_29; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_30() { return cDELETEKeyword_30; }
		
		//'DETACH'
		public Keyword getDETACHKeyword_31() { return cDETACHKeyword_31; }
		
		//'REMOVE'
		public Keyword getREMOVEKeyword_32() { return cREMOVEKeyword_32; }
		
		//'FOREACH'
		public Keyword getFOREACHKeyword_33() { return cFOREACHKeyword_33; }
		
		//'IN'
		public Keyword getINKeyword_34() { return cINKeyword_34; }
		
		//'DISTINCT'
		public Keyword getDISTINCTKeyword_35() { return cDISTINCTKeyword_35; }
		
		//'RETURN'
		public Keyword getRETURNKeyword_36() { return cRETURNKeyword_36; }
		
		//'ORDER'
		public Keyword getORDERKeyword_37() { return cORDERKeyword_37; }
		
		//'BY'
		public Keyword getBYKeyword_38() { return cBYKeyword_38; }
		
		//'SKIP'
		public Keyword getSKIPKeyword_39() { return cSKIPKeyword_39; }
		
		//'LIMIT'
		public Keyword getLIMITKeyword_40() { return cLIMITKeyword_40; }
		
		//'DESCENDING'
		public Keyword getDESCENDINGKeyword_41() { return cDESCENDINGKeyword_41; }
		
		//'DESC'
		public Keyword getDESCKeyword_42() { return cDESCKeyword_42; }
		
		//'ASCENDING'
		public Keyword getASCENDINGKeyword_43() { return cASCENDINGKeyword_43; }
		
		//'ASC'
		public Keyword getASCKeyword_44() { return cASCKeyword_44; }
		
		//'JOIN'
		public Keyword getJOINKeyword_45() { return cJOINKeyword_45; }
		
		//'SCAN'
		public Keyword getSCANKeyword_46() { return cSCANKeyword_46; }
		
		//'START'
		public Keyword getSTARTKeyword_47() { return cSTARTKeyword_47; }
		
		//'NODE'
		public Keyword getNODEKeyword_48() { return cNODEKeyword_48; }
		
		//'RELATIONSHIP'
		public Keyword getRELATIONSHIPKeyword_49() { return cRELATIONSHIPKeyword_49; }
		
		//'REL'
		public Keyword getRELKeyword_50() { return cRELKeyword_50; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_51() { return cWHEREKeyword_51; }
		
		//'SHORTESTPATH'
		public Keyword getSHORTESTPATHKeyword_52() { return cSHORTESTPATHKeyword_52; }
		
		//'ALLSHORTESTPATHS'
		public Keyword getALLSHORTESTPATHSKeyword_53() { return cALLSHORTESTPATHSKeyword_53; }
		
		//'OR'
		public Keyword getORKeyword_54() { return cORKeyword_54; }
		
		//'XOR'
		public Keyword getXORKeyword_55() { return cXORKeyword_55; }
		
		//'AND'
		public Keyword getANDKeyword_56() { return cANDKeyword_56; }
		
		//'NOT'
		public Keyword getNOTKeyword_57() { return cNOTKeyword_57; }
		
		//'STARTS'
		public Keyword getSTARTSKeyword_58() { return cSTARTSKeyword_58; }
		
		//'ENDS'
		public Keyword getENDSKeyword_59() { return cENDSKeyword_59; }
		
		//'CONTAINS'
		public Keyword getCONTAINSKeyword_60() { return cCONTAINSKeyword_60; }
		
		//'NULL'
		public Keyword getNULLKeyword_61() { return cNULLKeyword_61; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_62() { return cTRUEKeyword_62; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_63() { return cFALSEKeyword_63; }
		
		//'COUNT'
		public Keyword getCOUNTKeyword_64() { return cCOUNTKeyword_64; }
		
		//'FILTER'
		public Keyword getFILTERKeyword_65() { return cFILTERKeyword_65; }
		
		//'EXTRACT'
		public Keyword getEXTRACTKeyword_66() { return cEXTRACTKeyword_66; }
		
		//'ANY'
		public Keyword getANYKeyword_67() { return cANYKeyword_67; }
		
		//'NONE'
		public Keyword getNONEKeyword_68() { return cNONEKeyword_68; }
		
		//'SINGLE'
		public Keyword getSINGLEKeyword_69() { return cSINGLEKeyword_69; }
		
		//'REDUCE'
		public Keyword getREDUCEKeyword_70() { return cREDUCEKeyword_70; }
		
		//'CASE'
		public Keyword getCASEKeyword_71() { return cCASEKeyword_71; }
		
		//'ELSE'
		public Keyword getELSEKeyword_72() { return cELSEKeyword_72; }
		
		//'END'
		public Keyword getENDKeyword_73() { return cENDKeyword_73; }
		
		//'WHEN'
		public Keyword getWHENKeyword_74() { return cWHENKeyword_74; }
		
		//'THEN'
		public Keyword getTHENKeyword_75() { return cTHENKeyword_75; }
	}
	
	
	private final CypherElements pCypher;
	private final QueryOptionsElements pQueryOptions;
	private final CypherOptionElements pCypherOption;
	private final VersionNumberElements pVersionNumber;
	private final ConfigurationOptionElements pConfigurationOption;
	private final StatementElements pStatement;
	private final QueryElements pQuery;
	private final RegularQueryElements pRegularQuery;
	private final BulkImportQueryElements pBulkImportQuery;
	private final PeriodicCommitHintElements pPeriodicCommitHint;
	private final LoadCSVQueryElements pLoadCSVQuery;
	private final UnionElements pUnion;
	private final SingleQueryElements pSingleQuery;
	private final SinglePartQueryElements pSinglePartQuery;
	private final MultiPartQueryElements pMultiPartQuery;
	private final MultiPartSubQueryElements pMultiPartSubQuery;
	private final ClauseElements pClause;
	private final UpdatingClauseElements pUpdatingClause;
	private final ReadingClauseElements pReadingClause;
	private final CommandElements pCommand;
	private final CreateUniqueConstraintElements pCreateUniqueConstraint;
	private final CreateNodePropertyExistenceConstraintElements pCreateNodePropertyExistenceConstraint;
	private final CreateRelationshipPropertyExistenceConstraintElements pCreateRelationshipPropertyExistenceConstraint;
	private final CreateIndexElements pCreateIndex;
	private final DropUniqueConstraintElements pDropUniqueConstraint;
	private final DropNodePropertyExistenceConstraintElements pDropNodePropertyExistenceConstraint;
	private final DropRelationshipPropertyExistenceConstraintElements pDropRelationshipPropertyExistenceConstraint;
	private final DropIndexElements pDropIndex;
	private final IndexElements pIndex;
	private final UniqueConstraintElements pUniqueConstraint;
	private final NodePropertyExistenceConstraintElements pNodePropertyExistenceConstraint;
	private final RelationshipPropertyExistenceConstraintElements pRelationshipPropertyExistenceConstraint;
	private final RelationshipPatternSyntaxElements pRelationshipPatternSyntax;
	private final LoadCSVElements pLoadCSV;
	private final LoadCSVWithHeadersElements pLoadCSVWithHeaders;
	private final MatchElements pMatch;
	private final UnwindElements pUnwind;
	private final MergeElements pMerge;
	private final MergeActionElements pMergeAction;
	private final CreateElements pCreate;
	private final SetElements pSet;
	private final SetItemElements pSetItem;
	private final DeleteElements pDelete;
	private final RemoveElements pRemove;
	private final RemoveItemElements pRemoveItem;
	private final ForeachElements pForeach;
	private final InQueryCallElements pInQueryCall;
	private final StandaloneCallElements pStandaloneCall;
	private final YieldItemsElements pYieldItems;
	private final YieldItemElements pYieldItem;
	private final WithElements pWith;
	private final ReturnElements pReturn;
	private final ReturnBodyElements pReturnBody;
	private final ReturnItemsElements pReturnItems;
	private final ReturnItemElements pReturnItem;
	private final OrderElements pOrder;
	private final SkipElements pSkip;
	private final LimitElements pLimit;
	private final SortItemElements pSortItem;
	private final HintElements pHint;
	private final StartElements pStart;
	private final StartPointElements pStartPoint;
	private final LookupElements pLookup;
	private final NodeLookupElements pNodeLookup;
	private final RelationshipLookupElements pRelationshipLookup;
	private final IdentifiedIndexLookupElements pIdentifiedIndexLookup;
	private final IndexQueryElements pIndexQuery;
	private final IdLookupElements pIdLookup;
	private final LiteralIdsElements pLiteralIds;
	private final WhereElements pWhere;
	private final PatternElements pPattern;
	private final PatternPartElements pPatternPart;
	private final AnonymousPatternPartElements pAnonymousPatternPart;
	private final ShortestPathPatternElements pShortestPathPattern;
	private final PatternElementElements pPatternElement;
	private final NodePatternElements pNodePattern;
	private final PatternElementChainElements pPatternElementChain;
	private final RelationshipPatternElements pRelationshipPattern;
	private final RelationshipDetailElements pRelationshipDetail;
	private final PropertiesElements pProperties;
	private final RelTypeElements pRelType;
	private final RelationshipTypesElements pRelationshipTypes;
	private final NodeLabelsElements pNodeLabels;
	private final NodeLabelElements pNodeLabel;
	private final RangeLiteralElements pRangeLiteral;
	private final LabelNameElements pLabelName;
	private final RelTypeNameElements pRelTypeName;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final XorExpressionElements pXorExpression;
	private final AndExpressionElements pAndExpression;
	private final NotExpressionElements pNotExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final AddOrSubtractExpressionElements pAddOrSubtractExpression;
	private final MultiplyDivideModuloExpressionElements pMultiplyDivideModuloExpression;
	private final PowerOfExpressionElements pPowerOfExpression;
	private final UnaryAddOrSubtractExpressionElements pUnaryAddOrSubtractExpression;
	private final StringListNullOperatorExpressionElements pStringListNullOperatorExpression;
	private final ListOperatorExpressionElements pListOperatorExpression;
	private final StringOperatorExpressionElements pStringOperatorExpression;
	private final NullOperatorExpressionElements pNullOperatorExpression;
	private final PropertyOrLabelsExpressionElements pPropertyOrLabelsExpression;
	private final AtomElements pAtom;
	private final LiteralElements pLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final ListLiteralElements pListLiteral;
	private final ReduceElements pReduce;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final RelationshipsPatternElements pRelationshipsPattern;
	private final FilterExpressionElements pFilterExpression;
	private final IdInCollElements pIdInColl;
	private final FunctionInvocationElements pFunctionInvocation;
	private final FunctionNameElements pFunctionName;
	private final ExplicitProcedureInvocationElements pExplicitProcedureInvocation;
	private final ImplicitProcedureInvocationElements pImplicitProcedureInvocation;
	private final ProcedureResultFieldElements pProcedureResultField;
	private final ProcedureNameElements pProcedureName;
	private final NamespaceElements pNamespace;
	private final ListComprehensionElements pListComprehension;
	private final PatternComprehensionElements pPatternComprehension;
	private final PropertyLookupElements pPropertyLookup;
	private final CaseExpressionElements pCaseExpression;
	private final CaseAlternativesElements pCaseAlternatives;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StringLiteralElements pStringLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final MapLiteralElements pMapLiteral;
	private final MapLiteralEntryElements pMapLiteralEntry;
	private final LegacyParameterElements pLegacyParameter;
	private final ParameterElements pParameter;
	private final PropertyExpressionElements pPropertyExpression;
	private final PropertyKeyNameElements pPropertyKeyName;
	private final LeftArrowHeadElements pLeftArrowHead;
	private final RightArrowHeadElements pRightArrowHead;
	private final DashElements pDash;
	private final DecimalIntegerElements pDecimalInteger;
	private final NumberElements pNumber;
	private final SYMBOLIC_NAME_XElements pSYMBOLIC_NAME_X;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tHEX;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CypherGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCypher = new CypherElements();
		this.pQueryOptions = new QueryOptionsElements();
		this.pCypherOption = new CypherOptionElements();
		this.pVersionNumber = new VersionNumberElements();
		this.pConfigurationOption = new ConfigurationOptionElements();
		this.pStatement = new StatementElements();
		this.pQuery = new QueryElements();
		this.pRegularQuery = new RegularQueryElements();
		this.pBulkImportQuery = new BulkImportQueryElements();
		this.pPeriodicCommitHint = new PeriodicCommitHintElements();
		this.pLoadCSVQuery = new LoadCSVQueryElements();
		this.pUnion = new UnionElements();
		this.pSingleQuery = new SingleQueryElements();
		this.pSinglePartQuery = new SinglePartQueryElements();
		this.pMultiPartQuery = new MultiPartQueryElements();
		this.pMultiPartSubQuery = new MultiPartSubQueryElements();
		this.pClause = new ClauseElements();
		this.pUpdatingClause = new UpdatingClauseElements();
		this.pReadingClause = new ReadingClauseElements();
		this.pCommand = new CommandElements();
		this.pCreateUniqueConstraint = new CreateUniqueConstraintElements();
		this.pCreateNodePropertyExistenceConstraint = new CreateNodePropertyExistenceConstraintElements();
		this.pCreateRelationshipPropertyExistenceConstraint = new CreateRelationshipPropertyExistenceConstraintElements();
		this.pCreateIndex = new CreateIndexElements();
		this.pDropUniqueConstraint = new DropUniqueConstraintElements();
		this.pDropNodePropertyExistenceConstraint = new DropNodePropertyExistenceConstraintElements();
		this.pDropRelationshipPropertyExistenceConstraint = new DropRelationshipPropertyExistenceConstraintElements();
		this.pDropIndex = new DropIndexElements();
		this.pIndex = new IndexElements();
		this.pUniqueConstraint = new UniqueConstraintElements();
		this.pNodePropertyExistenceConstraint = new NodePropertyExistenceConstraintElements();
		this.pRelationshipPropertyExistenceConstraint = new RelationshipPropertyExistenceConstraintElements();
		this.pRelationshipPatternSyntax = new RelationshipPatternSyntaxElements();
		this.pLoadCSV = new LoadCSVElements();
		this.pLoadCSVWithHeaders = new LoadCSVWithHeadersElements();
		this.pMatch = new MatchElements();
		this.pUnwind = new UnwindElements();
		this.pMerge = new MergeElements();
		this.pMergeAction = new MergeActionElements();
		this.pCreate = new CreateElements();
		this.pSet = new SetElements();
		this.pSetItem = new SetItemElements();
		this.pDelete = new DeleteElements();
		this.pRemove = new RemoveElements();
		this.pRemoveItem = new RemoveItemElements();
		this.pForeach = new ForeachElements();
		this.pInQueryCall = new InQueryCallElements();
		this.pStandaloneCall = new StandaloneCallElements();
		this.pYieldItems = new YieldItemsElements();
		this.pYieldItem = new YieldItemElements();
		this.pWith = new WithElements();
		this.pReturn = new ReturnElements();
		this.pReturnBody = new ReturnBodyElements();
		this.pReturnItems = new ReturnItemsElements();
		this.pReturnItem = new ReturnItemElements();
		this.pOrder = new OrderElements();
		this.pSkip = new SkipElements();
		this.pLimit = new LimitElements();
		this.pSortItem = new SortItemElements();
		this.pHint = new HintElements();
		this.pStart = new StartElements();
		this.pStartPoint = new StartPointElements();
		this.pLookup = new LookupElements();
		this.pNodeLookup = new NodeLookupElements();
		this.pRelationshipLookup = new RelationshipLookupElements();
		this.pIdentifiedIndexLookup = new IdentifiedIndexLookupElements();
		this.pIndexQuery = new IndexQueryElements();
		this.pIdLookup = new IdLookupElements();
		this.pLiteralIds = new LiteralIdsElements();
		this.pWhere = new WhereElements();
		this.pPattern = new PatternElements();
		this.pPatternPart = new PatternPartElements();
		this.pAnonymousPatternPart = new AnonymousPatternPartElements();
		this.pShortestPathPattern = new ShortestPathPatternElements();
		this.pPatternElement = new PatternElementElements();
		this.pNodePattern = new NodePatternElements();
		this.pPatternElementChain = new PatternElementChainElements();
		this.pRelationshipPattern = new RelationshipPatternElements();
		this.pRelationshipDetail = new RelationshipDetailElements();
		this.pProperties = new PropertiesElements();
		this.pRelType = new RelTypeElements();
		this.pRelationshipTypes = new RelationshipTypesElements();
		this.pNodeLabels = new NodeLabelsElements();
		this.pNodeLabel = new NodeLabelElements();
		this.pRangeLiteral = new RangeLiteralElements();
		this.pLabelName = new LabelNameElements();
		this.pRelTypeName = new RelTypeNameElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pXorExpression = new XorExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pAddOrSubtractExpression = new AddOrSubtractExpressionElements();
		this.pMultiplyDivideModuloExpression = new MultiplyDivideModuloExpressionElements();
		this.pPowerOfExpression = new PowerOfExpressionElements();
		this.pUnaryAddOrSubtractExpression = new UnaryAddOrSubtractExpressionElements();
		this.pStringListNullOperatorExpression = new StringListNullOperatorExpressionElements();
		this.pListOperatorExpression = new ListOperatorExpressionElements();
		this.pStringOperatorExpression = new StringOperatorExpressionElements();
		this.pNullOperatorExpression = new NullOperatorExpressionElements();
		this.pPropertyOrLabelsExpression = new PropertyOrLabelsExpressionElements();
		this.pAtom = new AtomElements();
		this.pLiteral = new LiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pListLiteral = new ListLiteralElements();
		this.pReduce = new ReduceElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pRelationshipsPattern = new RelationshipsPatternElements();
		this.pFilterExpression = new FilterExpressionElements();
		this.pIdInColl = new IdInCollElements();
		this.pFunctionInvocation = new FunctionInvocationElements();
		this.pFunctionName = new FunctionNameElements();
		this.pExplicitProcedureInvocation = new ExplicitProcedureInvocationElements();
		this.pImplicitProcedureInvocation = new ImplicitProcedureInvocationElements();
		this.pProcedureResultField = new ProcedureResultFieldElements();
		this.pProcedureName = new ProcedureNameElements();
		this.pNamespace = new NamespaceElements();
		this.pListComprehension = new ListComprehensionElements();
		this.pPatternComprehension = new PatternComprehensionElements();
		this.pPropertyLookup = new PropertyLookupElements();
		this.pCaseExpression = new CaseExpressionElements();
		this.pCaseAlternatives = new CaseAlternativesElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pMapLiteral = new MapLiteralElements();
		this.pMapLiteralEntry = new MapLiteralEntryElements();
		this.pLegacyParameter = new LegacyParameterElements();
		this.pParameter = new ParameterElements();
		this.pPropertyExpression = new PropertyExpressionElements();
		this.pPropertyKeyName = new PropertyKeyNameElements();
		this.pLeftArrowHead = new LeftArrowHeadElements();
		this.pRightArrowHead = new RightArrowHeadElements();
		this.pDash = new DashElements();
		this.pDecimalInteger = new DecimalIntegerElements();
		this.pNumber = new NumberElements();
		this.pSYMBOLIC_NAME_X = new SYMBOLIC_NAME_XElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.WS");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.STRING_LITERAL");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.HEX");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Cypher.DECIMAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Cypher".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// generate openCypher "http://www.codekontor.io/opencypher/xtext/OpenCypher"
	//Cypher:
	///*
	// * oC_Cypher : SP? oC_QueryOptions oC_Statement ( SP? ';' )? SP? EOF ;
	// */
	////    {Cypher} queryOptions=QueryOptions statement=Statement ';'?;
	//{Cypher} queryOptions=QueryOptions (statements+=Statement ';'?)*;
	public CypherElements getCypherAccess() {
		return pCypher;
	}
	
	public ParserRule getCypherRule() {
		return getCypherAccess().getRule();
	}
	
	//QueryOptions:
	///*
	// * oC_QueryOptions : ( oC_AnyCypherOption SP? )* ;
	// * oC_AnyCypherOption : oC_CypherOption
	// *                    | oC_Explain
	// *                    | oC_Profile
	// *                    ;
	// * oC_Explain : EXPLAIN ;
	// * oC_Profile : PROFILE ;
	// */
	//    {AllOptions} (explain?='EXPLAIN'? & profile?='PROFILE'? & cypherOption+=CypherOption*);
	public QueryOptionsElements getQueryOptionsAccess() {
		return pQueryOptions;
	}
	
	public ParserRule getQueryOptionsRule() {
		return getQueryOptionsAccess().getRule();
	}
	
	//CypherOption:
	///*
	// * oC_CypherOption : CYPHER ( SP oC_VersionNumber )? ( SP oC_ConfigurationOption )* ;
	// */
	//    {CypherOption} 'CYPHER' (versionNumber=VersionNumber)? (configurationOption+=ConfigurationOption)*;
	public CypherOptionElements getCypherOptionAccess() {
		return pCypherOption;
	}
	
	public ParserRule getCypherOptionRule() {
		return getCypherOptionAccess().getRule();
	}
	
	//VersionNumber:
	///*
	// * oC_VersionNumber : RegularDecimalReal ;
	// */
	//    versionNumber=Number;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//ConfigurationOption:
	///*
	// * oC_ConfigurationOption : oC_SymbolicName SP? '=' SP? oC_SymbolicName ;
	// */
	//    key=SYMBOLIC_NAME_X '=' value=SYMBOLIC_NAME_X;
	public ConfigurationOptionElements getConfigurationOptionAccess() {
		return pConfigurationOption;
	}
	
	public ParserRule getConfigurationOptionRule() {
		return getConfigurationOptionAccess().getRule();
	}
	
	//Statement:
	///*
	// * oC_Statement : oC_Command
	// *              | oC_Query
	// *              ;
	// */
	//    Command | Query;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Query:
	///*
	// * oC_Query : oC_RegularQuery
	// *          | oC_StandaloneCall
	// *          | oC_BulkImportQuery
	// *          ;
	// */
	//    RegularQuery | StandaloneCall | BulkImportQuery;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//RegularQuery:
	///*
	// * oC_RegularQuery : oC_SingleQuery ( SP? oC_Union )* ;
	// */
	//    SingleQuery ({CombinedQuery.singleQuery=current} (union+=Union)+)?;
	public RegularQueryElements getRegularQueryAccess() {
		return pRegularQuery;
	}
	
	public ParserRule getRegularQueryRule() {
		return getRegularQueryAccess().getRule();
	}
	
	//BulkImportQuery:
	///*
	// * oC_BulkImportQuery : oC_PeriodicCommitHint SP? oC_LoadCSVQuery ;
	// */
	//    periodicCommitHint=PeriodicCommitHint loadCSVQuery=LoadCSVQuery;
	public BulkImportQueryElements getBulkImportQueryAccess() {
		return pBulkImportQuery;
	}
	
	public ParserRule getBulkImportQueryRule() {
		return getBulkImportQueryAccess().getRule();
	}
	
	//PeriodicCommitHint:
	///*
	// * oC_PeriodicCommitHint : USING SP PERIODIC SP COMMIT ( SP oC_IntegerLiteral )? ;
	// */
	//    {PeriodicCommitHint} 'USING' 'PERIODIC' 'COMMIT' numberOfRowsPerCommit=DecimalInteger?;
	public PeriodicCommitHintElements getPeriodicCommitHintAccess() {
		return pPeriodicCommitHint;
	}
	
	public ParserRule getPeriodicCommitHintRule() {
		return getPeriodicCommitHintAccess().getRule();
	}
	
	//LoadCSVQuery:
	///*
	// * oC_LoadCSVQuery : oC_LoadCSV oC_SingleQuery ;
	// */
	//    loadCSV=LoadCSV singleQuery=SingleQuery;
	public LoadCSVQueryElements getLoadCSVQueryAccess() {
		return pLoadCSVQuery;
	}
	
	public ParserRule getLoadCSVQueryRule() {
		return getLoadCSVQueryAccess().getRule();
	}
	
	//Union:
	///*
	// * oC_Union : ( UNION SP ALL SP? oC_SingleQuery )
	// *          | ( UNION SP? oC_SingleQuery )
	// *          ;
	// */
	//    ('UNION' all?='ALL'? singleQuery=SingleQuery);
	public UnionElements getUnionAccess() {
		return pUnion;
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}
	
	//SingleQuery:
	///*
	// * oC_SingleQuery : oC_SinglePartQuery
	// *                | oC_MultiPartQuery
	// *                ;
	// *
	// * Comment: For some obscure reason the order is important here!
	// */
	//    MultiPartQuery | SinglePartQuery;
	public SingleQueryElements getSingleQueryAccess() {
		return pSingleQuery;
	}
	
	public ParserRule getSingleQueryRule() {
		return getSingleQueryAccess().getRule();
	}
	
	//SinglePartQuery:
	///*
	// * oC_SinglePartQuery : ( ( oC_ReadingClause SP? )* oC_Return )
	// *                    | ( ( oC_ReadingClause SP? )* oC_UpdatingClause ( SP? oC_UpdatingClause )* ( SP? oC_Return )? )
	// *                    ;
	// */
	//    (readingClauses+=ReadingClause)* return=Return |
	//    (readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)+ (return=Return)? ;
	public SinglePartQueryElements getSinglePartQueryAccess() {
		return pSinglePartQuery;
	}
	
	public ParserRule getSinglePartQueryRule() {
		return getSinglePartQueryAccess().getRule();
	}
	
	//MultiPartQuery:
	///*
	// * oC_MultiPartQuery : ( ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP? )+ oC_SinglePartQuery ;
	// *
	// * Comment: used the name 'withPart' instead of with as 'with' is a key word of xtext
	// * Comment: introduced MultiPartSubQuery to encapsulate the repeating group '( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?'
	// */
	//    (subQueries+=MultiPartSubQuery)+ singlePartQuery=SinglePartQuery;
	public MultiPartQueryElements getMultiPartQueryAccess() {
		return pMultiPartQuery;
	}
	
	public ParserRule getMultiPartQueryRule() {
		return getMultiPartQueryAccess().getRule();
	}
	
	//MultiPartSubQuery:
	///*
	// * ( oC_ReadingClause SP? )* ( oC_UpdatingClause SP? )* oC_With SP?
	// */
	//    (readingClauses+=ReadingClause)* (updatingClauses+=UpdatingClause)* withPart=With;
	public MultiPartSubQueryElements getMultiPartSubQueryAccess() {
		return pMultiPartSubQuery;
	}
	
	public ParserRule getMultiPartSubQueryRule() {
		return getMultiPartSubQueryAccess().getRule();
	}
	
	//Clause:
	///*
	// * Comment: introduced Clause to have a common superinterface for the different clause types. This comes handy when dealing with the ASG.
	// */
	//    UpdatingClause | ReadingClause | Return | With;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//UpdatingClause:
	///*
	// * oC_UpdatingClause : oC_Create
	// *                   | oC_Merge
	// *                   | oC_CreateUnique
	// *                   | oC_Foreach
	// *                   | oC_Delete
	// *                   | oC_Set
	// *                   | oC_Remove
	// *                   ;
	// *
	// * Comment: We handle both 'oC_Create' and 'oC_CreateUnique' in the 'Create' clause
	// */
	//    Create | Merge | Foreach | Delete | Set | Remove;
	public UpdatingClauseElements getUpdatingClauseAccess() {
		return pUpdatingClause;
	}
	
	public ParserRule getUpdatingClauseRule() {
		return getUpdatingClauseAccess().getRule();
	}
	
	//ReadingClause:
	///*
	// * oC_ReadingClause : oC_LoadCSV
	// *                  | oC_Start
	// *                  | oC_Match
	// *                  | oC_Unwind
	// *                  | oC_InQueryCall
	// *                  ;
	// */
	//    LoadCSV | Start | Match | Unwind | InQueryCall;
	public ReadingClauseElements getReadingClauseAccess() {
		return pReadingClause;
	}
	
	public ParserRule getReadingClauseRule() {
		return getReadingClauseAccess().getRule();
	}
	
	//Command:
	///*
	// * oC_Command : oC_CreateIndex
	// *            | oC_DropIndex
	// *            | oC_CreateUniqueConstraint
	// *            | oC_DropUniqueConstraint
	// *            | oC_CreateNodePropertyExistenceConstraint
	// *            | oC_DropNodePropertyExistenceConstraint
	// *            | oC_CreateRelationshipPropertyExistenceConstraint
	// *            | oC_DropRelationshipPropertyExistenceConstraint
	// *            ;
	// */
	//    CreateIndex | DropIndex | CreateUniqueConstraint | DropUniqueConstraint | CreateNodePropertyExistenceConstraint |
	//    DropNodePropertyExistenceConstraint | CreateRelationshipPropertyExistenceConstraint |
	//    DropRelationshipPropertyExistenceConstraint;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//CreateUniqueConstraint:
	///*
	// * oC_CreateUniqueConstraint : CREATE SP oC_UniqueConstraint ;
	// */
	//    'CREATE' UniqueConstraint;
	public CreateUniqueConstraintElements getCreateUniqueConstraintAccess() {
		return pCreateUniqueConstraint;
	}
	
	public ParserRule getCreateUniqueConstraintRule() {
		return getCreateUniqueConstraintAccess().getRule();
	}
	
	//CreateNodePropertyExistenceConstraint:
	///*
	// * oC_CreateNodePropertyExistenceConstraint : CREATE SP oC_NodePropertyExistenceConstraint ;
	// */
	//    'CREATE' NodePropertyExistenceConstraint;
	public CreateNodePropertyExistenceConstraintElements getCreateNodePropertyExistenceConstraintAccess() {
		return pCreateNodePropertyExistenceConstraint;
	}
	
	public ParserRule getCreateNodePropertyExistenceConstraintRule() {
		return getCreateNodePropertyExistenceConstraintAccess().getRule();
	}
	
	//CreateRelationshipPropertyExistenceConstraint:
	///*
	// * oC_CreateRelationshipPropertyExistenceConstraint : CREATE SP oC_RelationshipPropertyExistenceConstraint ;
	// */
	//    'CREATE' RelationshipPropertyExistenceConstraint;
	public CreateRelationshipPropertyExistenceConstraintElements getCreateRelationshipPropertyExistenceConstraintAccess() {
		return pCreateRelationshipPropertyExistenceConstraint;
	}
	
	public ParserRule getCreateRelationshipPropertyExistenceConstraintRule() {
		return getCreateRelationshipPropertyExistenceConstraintAccess().getRule();
	}
	
	//CreateIndex:
	///*
	// * oC_CreateIndex : CREATE SP oC_Index ;
	// */
	//    'CREATE' index=Index;
	public CreateIndexElements getCreateIndexAccess() {
		return pCreateIndex;
	}
	
	public ParserRule getCreateIndexRule() {
		return getCreateIndexAccess().getRule();
	}
	
	//DropUniqueConstraint:
	///*
	// * oC_DropUniqueConstraint : DROP SP oC_UniqueConstraint ;
	// */
	//    'DROP' uniqueConstraint=UniqueConstraint;
	public DropUniqueConstraintElements getDropUniqueConstraintAccess() {
		return pDropUniqueConstraint;
	}
	
	public ParserRule getDropUniqueConstraintRule() {
		return getDropUniqueConstraintAccess().getRule();
	}
	
	//DropNodePropertyExistenceConstraint:
	///*
	// * oC_DropNodePropertyExistenceConstraint : DROP SP oC_NodePropertyExistenceConstraint ;
	// */
	//    'DROP' nodePropertyExistenceConstraint=NodePropertyExistenceConstraint;
	public DropNodePropertyExistenceConstraintElements getDropNodePropertyExistenceConstraintAccess() {
		return pDropNodePropertyExistenceConstraint;
	}
	
	public ParserRule getDropNodePropertyExistenceConstraintRule() {
		return getDropNodePropertyExistenceConstraintAccess().getRule();
	}
	
	//DropRelationshipPropertyExistenceConstraint:
	///*
	// * oC_DropRelationshipPropertyExistenceConstraint : DROP SP oC_RelationshipPropertyExistenceConstraint ;
	// */
	//    'DROP' relationshipPropertyExistenceConstraint=RelationshipPropertyExistenceConstraint;
	public DropRelationshipPropertyExistenceConstraintElements getDropRelationshipPropertyExistenceConstraintAccess() {
		return pDropRelationshipPropertyExistenceConstraint;
	}
	
	public ParserRule getDropRelationshipPropertyExistenceConstraintRule() {
		return getDropRelationshipPropertyExistenceConstraintAccess().getRule();
	}
	
	//DropIndex:
	///*
	// * oC_DropIndex : DROP SP oC_Index ;
	// */
	//    'DROP' index=Index;
	public DropIndexElements getDropIndexAccess() {
		return pDropIndex;
	}
	
	public ParserRule getDropIndexRule() {
		return getDropIndexAccess().getRule();
	}
	
	//Index:
	///*
	// * oC_Index : INDEX SP ON SP? oC_NodeLabel '(' oC_PropertyKeyName ')' ;
	// */
	//    'INDEX' 'ON' nodeLabel=NodeLabel '(' propertyKeyName=PropertyKeyName ')';
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//UniqueConstraint:
	///*
	// * oC_UniqueConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP oC_PropertyExpression SP IS SP UNIQUE ;
	// */
	//    'CONSTRAINT' 'ON' '(' variable=VariableDeclaration nodeLabel=NodeLabel ')' 'ASSERT'
	//    propertyExpression=PropertyExpression 'IS' 'UNIQUE';
	public UniqueConstraintElements getUniqueConstraintAccess() {
		return pUniqueConstraint;
	}
	
	public ParserRule getUniqueConstraintRule() {
		return getUniqueConstraintAccess().getRule();
	}
	
	//NodePropertyExistenceConstraint:
	///*
	// * oC_NodePropertyExistenceConstraint : CONSTRAINT SP ON SP? '(' oC_Variable oC_NodeLabel ')' SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
	// */
	//    'CONSTRAINT' 'ON' '(' variable=VariableDeclaration nodeLabel=NodeLabel ')' 'ASSERT' 'EXISTS' '('
	//    propertyExpression=PropertyExpression ')';
	public NodePropertyExistenceConstraintElements getNodePropertyExistenceConstraintAccess() {
		return pNodePropertyExistenceConstraint;
	}
	
	public ParserRule getNodePropertyExistenceConstraintRule() {
		return getNodePropertyExistenceConstraintAccess().getRule();
	}
	
	//RelationshipPropertyExistenceConstraint:
	///*
	// * oC_RelationshipPropertyExistenceConstraint : CONSTRAINT SP ON SP? oC_RelationshipPatternSyntax SP? ASSERT SP EXISTS SP? '(' oC_PropertyExpression ')' ;
	// */
	//    'CONSTRAINT' 'ON' relationshipPattern=RelationshipPatternSyntax 'ASSERT' 'EXISTS' '('
	//    propertyExpression=PropertyExpression ')';
	public RelationshipPropertyExistenceConstraintElements getRelationshipPropertyExistenceConstraintAccess() {
		return pRelationshipPropertyExistenceConstraint;
	}
	
	public ParserRule getRelationshipPropertyExistenceConstraintRule() {
		return getRelationshipPropertyExistenceConstraintAccess().getRule();
	}
	
	//RelationshipPatternSyntax:
	///*
	// * oC_RelationshipPatternSyntax : ( '(' SP? ')' oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash '(' SP? ')' )
	// *                              | ( '(' SP? ')' oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash oC_RightArrowHead '(' SP? ')' )
	// *                              | ( '(' SP? ')' oC_LeftArrowHead oC_Dash '[' oC_Variable oC_RelType ']' oC_Dash '(' SP? ')' )
	// *                              ;
	// */
	//    ('(' ')' incoming?=LeftArrowHead? Dash '[' variable=VariableDeclaration relType=RelType ']' Dash
	//    outgoing?=RightArrowHead? '(' ')');
	public RelationshipPatternSyntaxElements getRelationshipPatternSyntaxAccess() {
		return pRelationshipPatternSyntax;
	}
	
	public ParserRule getRelationshipPatternSyntaxRule() {
		return getRelationshipPatternSyntaxAccess().getRule();
	}
	
	//LoadCSV:
	///*
	// * oC_LoadCSV : LOAD SP CSV SP ( WITH SP HEADERS SP )? FROM SP oC_Expression SP AS SP oC_Variable SP ( FIELDTERMINATOR SP StringLiteral )? ;
	// *
	// * Comment: For simplicity we split up the antlr clause in xtext clauses 'LoadCSV' and 'LoadCSVWithHeaders'
	// */
	//    {LoadCSV} 'LOAD' 'CSV' withHeaders?=LoadCSVWithHeaders? 'FROM' expression=Expression 'AS'
	//    variable=VariableDeclaration ('FIELDTERMINATOR' fieldterminator=STRING_LITERAL)?;
	public LoadCSVElements getLoadCSVAccess() {
		return pLoadCSV;
	}
	
	public ParserRule getLoadCSVRule() {
		return getLoadCSVAccess().getRule();
	}
	
	//LoadCSVWithHeaders:
	//    'WITH' 'HEADERS';
	public LoadCSVWithHeadersElements getLoadCSVWithHeadersAccess() {
		return pLoadCSVWithHeaders;
	}
	
	public ParserRule getLoadCSVWithHeadersRule() {
		return getLoadCSVWithHeadersAccess().getRule();
	}
	
	//Match:
	///*
	// * oC_Match : ( OPTIONAL SP )? MATCH SP? oC_Pattern ( oC_Hint )* ( SP? oC_Where )? ;
	// */
	//    optional?='OPTIONAL'? 'MATCH' pattern=Pattern (hints+=Hint)* where=Where?;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//Unwind:
	///*
	// * oC_Unwind : UNWIND SP? oC_Expression SP AS SP oC_Variable ;
	// */
	//    'UNWIND' expression=Expression 'AS' variable=VariableDeclaration;
	public UnwindElements getUnwindAccess() {
		return pUnwind;
	}
	
	public ParserRule getUnwindRule() {
		return getUnwindAccess().getRule();
	}
	
	//Merge:
	///*
	// * oC_Merge : MERGE SP? oC_PatternPart ( SP oC_MergeAction )* ;
	// */
	//    'MERGE' patternPart=PatternPart (mergeActions+=MergeAction)*;
	public MergeElements getMergeAccess() {
		return pMerge;
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}
	
	//MergeAction:
	///*
	// * oC_MergeAction : ( ON SP MATCH SP oC_Set )
	// *                | ( ON SP CREATE SP oC_Set )
	// *                ;
	// */
	//    'ON' action=('MATCH' | 'CREATE') set=Set;
	public MergeActionElements getMergeActionAccess() {
		return pMergeAction;
	}
	
	public ParserRule getMergeActionRule() {
		return getMergeActionAccess().getRule();
	}
	
	//Create:
	///*
	// * oC_Create : CREATE SP? oC_Pattern ;
	// * oC_CreateUnique : CREATE SP UNIQUE SP? oC_Pattern ;
	// */
	//    'CREATE' uniqueContraint?='UNIQUE'? pattern=Pattern;
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//Set:
	///*
	// * oC_Set : SET SP? oC_SetItem ( ',' oC_SetItem )* ;
	// */
	//    'SET' setItems+=SetItem (',' setItems+=SetItem)*;
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//SetItem:
	///*
	// * oC_SetItem : ( oC_PropertyExpression SP? '=' SP? oC_Expression )
	// *            | ( oC_Variable SP? '=' SP? oC_Expression )
	// *            | ( oC_Variable SP? '+=' SP? oC_Expression )
	// *            | ( oC_Variable SP? oC_NodeLabels )
	// *            ;
	// */
	//    (propertyExpression=PropertyExpression '=' expression=Expression) | (variable=VariableDeclaration '='
	//    expression=Expression) | (variable=VariableDeclaration '+=' expression=Expression) | (variable=VariableDeclaration
	//    NodeLabels);
	public SetItemElements getSetItemAccess() {
		return pSetItem;
	}
	
	public ParserRule getSetItemRule() {
		return getSetItemAccess().getRule();
	}
	
	//Delete:
	///*
	// * oC_Delete : ( DETACH SP )? DELETE SP? oC_Expression ( SP? ',' SP? oC_Expression )* ;
	// */
	//    (detach?='DETACH')? 'DELETE' expressions+=Expression (',' expressions+=Expression)*;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//Remove:
	///*
	// * oC_Remove : REMOVE SP oC_RemoveItem ( SP? ',' SP? oC_RemoveItem )* ;
	// */
	//    'REMOVE' removeItems+=RemoveItem (',' removeItems+=RemoveItem)*;
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//RemoveItem:
	///*
	// * oC_RemoveItem : ( oC_Variable oC_NodeLabels )
	// *               | oC_PropertyExpression
	// *               ;
	// */
	//    ({RemoveItemLabel} variable=VariableDeclaration NodeLabels) | {RemoveItemProperty} propertyExpression=PropertyExpression;
	public RemoveItemElements getRemoveItemAccess() {
		return pRemoveItem;
	}
	
	public ParserRule getRemoveItemRule() {
		return getRemoveItemAccess().getRule();
	}
	
	//Foreach:
	///*
	// * oC_Foreach : FOREACH SP? '(' SP? oC_Variable SP IN SP oC_Expression SP? '|' ( SP oC_UpdatingClause )+ SP? ')' ;
	// */
	//    'FOREACH' '(' variable=VariableDeclaration 'IN' expression=Expression '|' (updatingClauses+=UpdatingClause)+ ')';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//InQueryCall:
	///*
	// * oC_InQueryCall : CALL SP oC_ExplicitProcedureInvocation ( SP? YIELD SP oC_YieldItems )? ;
	// */
	//    'CALL' invocation=ExplicitProcedureInvocation ('YIELD' yieldItems=YieldItems)?;
	public InQueryCallElements getInQueryCallAccess() {
		return pInQueryCall;
	}
	
	public ParserRule getInQueryCallRule() {
		return getInQueryCallAccess().getRule();
	}
	
	//StandaloneCall:
	///*
	// * oC_StandaloneCall : CALL SP ( oC_ExplicitProcedureInvocation | oC_ImplicitProcedureInvocation ) ( SP YIELD SP oC_YieldItems )? ;
	// */
	//    'CALL' invocation=(ExplicitProcedureInvocation | ImplicitProcedureInvocation) ('YIELD' yieldItems=YieldItems)?;
	public StandaloneCallElements getStandaloneCallAccess() {
		return pStandaloneCall;
	}
	
	public ParserRule getStandaloneCallRule() {
		return getStandaloneCallAccess().getRule();
	}
	
	//YieldItems:
	///*
	// * oC_YieldItems : ( oC_YieldItem ( SP? ',' SP? oC_YieldItem )* )
	// *               | '-'
	// *               ;
	// */
	//    {YieldItems} ((items+=YieldItem (',' items+=YieldItem)*) | '-');
	public YieldItemsElements getYieldItemsAccess() {
		return pYieldItems;
	}
	
	public ParserRule getYieldItemsRule() {
		return getYieldItemsAccess().getRule();
	}
	
	//YieldItem:
	///*
	// * oC_YieldItem : ( oC_ProcedureResultField SP AS SP )? oC_Variable ;
	// */
	//    (field=ProcedureResultField 'AS')? variable=VariableDeclaration;
	public YieldItemElements getYieldItemAccess() {
		return pYieldItem;
	}
	
	public ParserRule getYieldItemRule() {
		return getYieldItemAccess().getRule();
	}
	
	//With:
	///*
	// * oC_With : WITH ( SP? DISTINCT )? SP oC_ReturnBody ( SP? oC_Where )? ;
	// */
	//    'WITH' returnBody=ReturnBody where=Where?;
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}
	
	//Return:
	///*
	// * oC_Return : RETURN ( SP? DISTINCT )? SP oC_ReturnBody ;
	// */
	//    (return='RETURN'  body=ReturnBody);
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//ReturnBody:
	///*
	// * oC_ReturnBody : oC_ReturnItems ( SP oC_Order )? ( SP oC_Skip )? ( SP oC_Limit )? ;
	// */
	//    distinct?='DISTINCT'? returnItems=ReturnItems (order=Order)? (skip=Skip)? (limit=Limit)?;
	public ReturnBodyElements getReturnBodyAccess() {
		return pReturnBody;
	}
	
	public ParserRule getReturnBodyRule() {
		return getReturnBodyAccess().getRule();
	}
	
	//ReturnItems:
	///*
	// * oC_ReturnItems : ( '*' ( SP? ',' SP? oC_ReturnItem )* )
	// *                | ( oC_ReturnItem ( SP? ',' SP? oC_ReturnItem )* )
	// *                ;
	// */
	//    {ReturnItems} (all='*' (',' items+=ReturnItem)*) | (items+=ReturnItem (',' items+=ReturnItem)*);
	public ReturnItemsElements getReturnItemsAccess() {
		return pReturnItems;
	}
	
	public ParserRule getReturnItemsRule() {
		return getReturnItemsAccess().getRule();
	}
	
	//ReturnItem:
	///*
	// * oC_ReturnItem : ( oC_Expression SP AS SP oC_Variable )
	// *               | oC_Expression
	// *               ;
	// */
	//    expression=Expression ('AS' alias=VariableDeclaration)?;
	public ReturnItemElements getReturnItemAccess() {
		return pReturnItem;
	}
	
	public ParserRule getReturnItemRule() {
		return getReturnItemAccess().getRule();
	}
	
	//Order:
	///*
	// * oC_Order : ORDER SP BY SP oC_SortItem ( ',' SP? oC_SortItem )* ;
	// */
	//    'ORDER' 'BY' orderBy+=SortItem (',' orderBy+=SortItem)*;
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//Skip:
	///*
	// * oC_Skip : L_SKIP SP oC_Expression ;
	// */
	//    'SKIP' skip=Expression;
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//Limit:
	///*
	// * oC_Limit : LIMIT SP oC_Expression ;
	// */
	//    'LIMIT' limit=Expression;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//SortItem:
	///*
	// * oC_SortItem : oC_Expression ( SP? ( ASCENDING | ASC | DESCENDING | DESC ) )? ;
	// */
	//    (expression=Expression sort=('DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC')?);
	public SortItemElements getSortItemAccess() {
		return pSortItem;
	}
	
	public ParserRule getSortItemRule() {
		return getSortItemAccess().getRule();
	}
	
	//Hint hidden():
	///*
	// * oC_Hint : SP? ( ( USING SP INDEX SP oC_Variable oC_NodeLabel '(' oC_PropertyKeyName ')' ) | ( USING SP JOIN SP ON SP oC_Variable ( SP? ',' SP? oC_Variable )* ) | ( USING SP SCAN SP oC_Variable oC_NodeLabel ) ) ;
	// */
	//    {IndexHint} 'USING' WS 'INDEX' WS variable=VariableDeclaration nodeLabel=NodeLabel WS '('
	//    propertyKeyName=PropertyKeyName ')' | {JoinHint} ('USING' WS 'JOIN' WS 'ON' variables+=VariableDeclaration (','
	//    variables+=VariableDeclaration)*) | {ScanHint} ('USING' WS 'SCAN' WS variable=VariableDeclaration
	//    nodeLabel=NodeLabel);
	public HintElements getHintAccess() {
		return pHint;
	}
	
	public ParserRule getHintRule() {
		return getHintAccess().getRule();
	}
	
	//Start:
	///*
	// * oC_Start : START SP oC_StartPoint ( SP? ',' SP? oC_StartPoint )* oC_Where? ;
	// */
	//    'START' startPoint+=StartPoint (',' startPoint+=StartPoint)* where=Where?;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//StartPoint:
	///*
	// * oC_StartPoint : oC_Variable SP? '=' SP? oC_Lookup ;
	// */
	//    variable=VariableDeclaration '=' lookup=Lookup;
	public StartPointElements getStartPointAccess() {
		return pStartPoint;
	}
	
	public ParserRule getStartPointRule() {
		return getStartPointAccess().getRule();
	}
	
	//Lookup:
	///*
	// * oC_Lookup : oC_NodeLookup
	// *           | oC_RelationshipLookup
	// *           ;
	// */
	//    NodeLookup | RelationshipLookup;
	public LookupElements getLookupAccess() {
		return pLookup;
	}
	
	public ParserRule getLookupRule() {
		return getLookupAccess().getRule();
	}
	
	//NodeLookup:
	///*
	// * oC_NodeLookup : NODE SP? ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
	// */
	//    'NODE' (IdentifiedIndexLookup | IndexQuery | IdLookup);
	public NodeLookupElements getNodeLookupAccess() {
		return pNodeLookup;
	}
	
	public ParserRule getNodeLookupRule() {
		return getNodeLookupAccess().getRule();
	}
	
	//RelationshipLookup:
	///*
	// * oC_RelationshipLookup : ( RELATIONSHIP | REL ) ( oC_IdentifiedIndexLookup | oC_IndexQuery | oC_IdLookup ) ;
	// */
	//    ('RELATIONSHIP' | 'REL') (IdentifiedIndexLookup | IndexQuery | IdLookup);
	public RelationshipLookupElements getRelationshipLookupAccess() {
		return pRelationshipLookup;
	}
	
	public ParserRule getRelationshipLookupRule() {
		return getRelationshipLookupAccess().getRule();
	}
	
	//IdentifiedIndexLookup:
	///*
	// * oC_IdentifiedIndexLookup : ':' oC_SymbolicName '(' oC_SymbolicName '=' ( StringLiteral | oC_LegacyParameter ) ')' ;
	// */
	//    ':' indexName=SYMBOLIC_NAME_X '(' key=SYMBOLIC_NAME_X '=' (value=STRING_LITERAL | legacyParameter=LegacyParameter)
	//    ')';
	public IdentifiedIndexLookupElements getIdentifiedIndexLookupAccess() {
		return pIdentifiedIndexLookup;
	}
	
	public ParserRule getIdentifiedIndexLookupRule() {
		return getIdentifiedIndexLookupAccess().getRule();
	}
	
	//IndexQuery:
	///*
	// * oC_IndexQuery : ':' oC_SymbolicName '(' ( StringLiteral | oC_LegacyParameter ) ')' ;
	// */
	//    ':' indexName=SYMBOLIC_NAME_X '(' (query=STRING_LITERAL | parameter=Parameter) ')';
	public IndexQueryElements getIndexQueryAccess() {
		return pIndexQuery;
	}
	
	public ParserRule getIndexQueryRule() {
		return getIndexQueryAccess().getRule();
	}
	
	//IdLookup:
	///*
	// * oC_IdLookup : '(' ( oC_LiteralIds | oC_LegacyParameter | '*' ) ')' ;
	// */
	//    '(' (ids=LiteralIds | legacyParameter=Parameter | wildcard='*') ')';
	public IdLookupElements getIdLookupAccess() {
		return pIdLookup;
	}
	
	public ParserRule getIdLookupRule() {
		return getIdLookupAccess().getRule();
	}
	
	//LiteralIds:
	///*
	// * oC_LiteralIds : oC_IntegerLiteral ( SP? ',' SP? oC_IntegerLiteral )* ;
	// */
	//    ids+=DecimalInteger (',' ids+=DecimalInteger)*;
	public LiteralIdsElements getLiteralIdsAccess() {
		return pLiteralIds;
	}
	
	public ParserRule getLiteralIdsRule() {
		return getLiteralIdsAccess().getRule();
	}
	
	//Where:
	///*
	// * oC_Where : WHERE SP oC_Expression ;
	// */
	//    'WHERE' expression=Expression;
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}
	
	//Pattern:
	///*
	// * oC_Pattern : oC_PatternPart ( SP? ',' SP? oC_PatternPart )* ;
	// */
	//    patterns+=PatternPart (',' patterns+=PatternPart)*;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//PatternPart:
	///*
	// * oC_PatternPart : ( oC_Variable SP? '=' SP? oC_AnonymousPatternPart )
	// *                | oC_AnonymousPatternPart
	// *                ;
	// */
	//    (var=VariableDeclaration '=' part=AnonymousPatternPart) | AnonymousPatternPart;
	public PatternPartElements getPatternPartAccess() {
		return pPatternPart;
	}
	
	public ParserRule getPatternPartRule() {
		return getPatternPartAccess().getRule();
	}
	
	//AnonymousPatternPart:
	///*
	// * oC_AnonymousPatternPart : oC_ShortestPathPattern
	// *                         | oC_PatternElement
	// *                         ;
	// */
	//    ShortestPathPattern | PatternElement;
	public AnonymousPatternPartElements getAnonymousPatternPartAccess() {
		return pAnonymousPatternPart;
	}
	
	public ParserRule getAnonymousPatternPartRule() {
		return getAnonymousPatternPartAccess().getRule();
	}
	
	//ShortestPathPattern:
	///*
	// * oC_ShortestPathPattern : ( SHORTESTPATH '(' oC_PatternElement ')' )
	// *                        | ( ALLSHORTESTPATHS '(' oC_PatternElement ')' )
	// *                        ;
	// */
	//    {ShortestPath} 'SHORTESTPATH' '(' patternElement=PatternElement ')' | {AllShortestPaths} 'ALLSHORTESTPATHS' '('
	//    patternElement=PatternElement ')';
	public ShortestPathPatternElements getShortestPathPatternAccess() {
		return pShortestPathPattern;
	}
	
	public ParserRule getShortestPathPatternRule() {
		return getShortestPathPatternAccess().getRule();
	}
	
	//PatternElement:
	///*
	// * oC_PatternElement : ( oC_NodePattern ( SP? oC_PatternElementChain )* )
	// *                   | ( '(' oC_PatternElement ')' )
	// *                   ;
	// */
	//    (nodepattern=NodePattern (chain+=PatternElementChain)*) | '(' PatternElement ')';
	public PatternElementElements getPatternElementAccess() {
		return pPatternElement;
	}
	
	public ParserRule getPatternElementRule() {
		return getPatternElementAccess().getRule();
	}
	
	//NodePattern:
	///*
	// * oC_NodePattern : '(' SP? ( oC_Variable SP? )? ( oC_NodeLabels SP? )? ( oC_Properties SP? )? ')' ;
	// */
	//    {NodePattern} '(' variable=VariableDeclaration? NodeLabels? properties=Properties? ')';
	public NodePatternElements getNodePatternAccess() {
		return pNodePattern;
	}
	
	public ParserRule getNodePatternRule() {
		return getNodePatternAccess().getRule();
	}
	
	//PatternElementChain:
	///*
	// * oC_PatternElementChain : oC_RelationshipPattern SP? oC_NodePattern ;
	// */
	//    relationshipPattern=RelationshipPattern nodePattern=NodePattern;
	public PatternElementChainElements getPatternElementChainAccess() {
		return pPatternElementChain;
	}
	
	public ParserRule getPatternElementChainRule() {
		return getPatternElementChainAccess().getRule();
	}
	
	//RelationshipPattern:
	///*
	// * oC_RelationshipPattern : ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
	// *                        | ( oC_LeftArrowHead SP? oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
	// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash SP? oC_RightArrowHead )
	// *                        | ( oC_Dash SP? oC_RelationshipDetail? SP? oC_Dash )
	// *                        ;
	// */
	//    {RelationshipPattern} (incoming?=LeftArrowHead? Dash detail=RelationshipDetail? Dash outgoing?=RightArrowHead?);
	public RelationshipPatternElements getRelationshipPatternAccess() {
		return pRelationshipPattern;
	}
	
	public ParserRule getRelationshipPatternRule() {
		return getRelationshipPatternAccess().getRule();
	}
	
	//RelationshipDetail:
	///*
	// * oC_RelationshipDetail : '[' SP? ( oC_Variable SP? )? ( oC_RelationshipTypes SP? )? oC_RangeLiteral? ( oC_Properties SP? )? ']' ;
	// */
	//    {RelationshipDetail} '[' variable=VariableDeclaration? optional?='?'? RelationshipTypes? (range=RangeLiteral)?
	//    properties=Properties? ']';
	public RelationshipDetailElements getRelationshipDetailAccess() {
		return pRelationshipDetail;
	}
	
	public ParserRule getRelationshipDetailRule() {
		return getRelationshipDetailAccess().getRule();
	}
	
	//Properties:
	///*
	// * oC_Properties : oC_MapLiteral
	// *               | oC_Parameter
	// *               | oC_LegacyParameter
	// *               ;
	// */
	//    MapLiteral | Parameter | LegacyParameter;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//RelType:
	///*
	// * oC_RelType : ':' SP? oC_RelTypeName ;
	// */
	//    ':' RelTypeName;
	public RelTypeElements getRelTypeAccess() {
		return pRelType;
	}
	
	public ParserRule getRelTypeRule() {
		return getRelTypeAccess().getRule();
	}
	
	//fragment RelationshipTypes:
	///*
	// * oC_RelationshipTypes : ':' SP? oC_RelTypeName ( SP? '|' ':'? SP? oC_RelTypeName )* ;
	// */
	//    ':' relTypeNames+=RelTypeName ('|' ':'? relTypeNames+=RelTypeName)*;
	public RelationshipTypesElements getRelationshipTypesAccess() {
		return pRelationshipTypes;
	}
	
	public ParserRule getRelationshipTypesRule() {
		return getRelationshipTypesAccess().getRule();
	}
	
	//fragment NodeLabels:
	///*
	// * oC_NodeLabels : oC_NodeLabel ( SP? oC_NodeLabel )* ;
	// */
	//    nodeLabels+=NodeLabel+;
	public NodeLabelsElements getNodeLabelsAccess() {
		return pNodeLabels;
	}
	
	public ParserRule getNodeLabelsRule() {
		return getNodeLabelsAccess().getRule();
	}
	
	//NodeLabel:
	///*
	// * oC_NodeLabel : ':' SP? oC_LabelName ;
	// */
	//    ':' labelName=LabelName;
	public NodeLabelElements getNodeLabelAccess() {
		return pNodeLabel;
	}
	
	public ParserRule getNodeLabelRule() {
		return getNodeLabelAccess().getRule();
	}
	
	//RangeLiteral:
	///*
	// * oC_RangeLiteral : '*' SP? ( oC_IntegerLiteral SP? )? ( '..' SP? ( oC_IntegerLiteral SP? )? )? ;
	// *
	// * Comment: Format of IntegerLiteral is checked via
	// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkRangeLiteralFormat(RangeLiteral)
	// */
	//    {RangeLiteral} '*' (lower=Number? (variableLength?='..' upper=Number?)?)?;
	public RangeLiteralElements getRangeLiteralAccess() {
		return pRangeLiteral;
	}
	
	public ParserRule getRangeLiteralRule() {
		return getRangeLiteralAccess().getRule();
	}
	
	//LabelName:
	///*
	// * oC_LabelName : oC_SchemaName ;
	// */
	//// TODO
	//    SYMBOLIC_NAME_X;
	public LabelNameElements getLabelNameAccess() {
		return pLabelName;
	}
	
	public ParserRule getLabelNameRule() {
		return getLabelNameAccess().getRule();
	}
	
	//RelTypeName:
	///*
	// * oC_RelTypeName : oC_SchemaName ;
	// */
	//// TODO
	//    SYMBOLIC_NAME_X;
	public RelTypeNameElements getRelTypeNameAccess() {
		return pRelTypeName;
	}
	
	public ParserRule getRelTypeNameRule() {
		return getRelTypeNameAccess().getRule();
	}
	
	//Expression:
	///*
	// * oC_Expression : oC_OrExpression ;
	// */
	//    OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression returns Expression:
	///*
	// * oC_OrExpression : oC_XorExpression ( SP OR SP oC_XorExpression )* ;
	// */
	//    XorExpression ({OrExpression.left=current} operator='OR' right=XorExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//XorExpression returns Expression:
	///*
	// * oC_XorExpression : oC_AndExpression ( SP XOR SP oC_AndExpression )* ;
	// */
	//    AndExpression ({XorExpression.left=current} operator='XOR' right=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	///*
	// * oC_AndExpression : oC_NotExpression ( SP AND SP oC_NotExpression )* ;
	// */
	//    NotExpression ({AndExpression.left=current} operator='AND' right=NotExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//NotExpression returns Expression:
	///*
	// * oC_NotExpression : ( NOT SP? )* oC_ComparisonExpression ;
	// *
	// * Comment: Clause is modeled on the former antlr clause 'expression9 : ( sp NOT sp expression9 ) | expression8;'
	// * We should eventually adjust this...
	// */
	////TODO
	//    ({NotExpression} operator='NOT' left=NotExpression) | ComparisonExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//ComparisonExpression returns Expression:
	///*
	// * oC_ComparisonExpression : oC_AddOrSubtractExpression ( SP? oC_PartialComparisonExpression )* ;
	// *
	// * oC_PartialComparisonExpression : ( '=' SP? oC_AddOrSubtractExpression )
	// *                                | ( '<>' SP? oC_AddOrSubtractExpression )
	// *                                | ( '<' SP? oC_AddOrSubtractExpression )
	// *                                | ( '>' SP? oC_AddOrSubtractExpression )
	// *                                | ( '<=' SP? oC_AddOrSubtractExpression )
	// *                                | ( '>=' SP? oC_AddOrSubtractExpression )
	// *                                ;
	// *
	// * Comment: combined clause for 'oC_ComparisonExpression' and 'oC_PartialComparisonExpression'
	// */
	//    AddOrSubtractExpression ({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
	//    right=AddOrSubtractExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//AddOrSubtractExpression returns Expression:
	///*
	// * oC_AddOrSubtractExpression : oC_MultiplyDivideModuloExpression ( ( SP? '+' SP? oC_MultiplyDivideModuloExpression ) | ( SP? '-' SP? oC_MultiplyDivideModuloExpression ) )* ;
	// */
	//    MultiplyDivideModuloExpression ({AddOrSubtractExpression.left=current} operator=('+' | '-')
	//    right=MultiplyDivideModuloExpression)*;
	public AddOrSubtractExpressionElements getAddOrSubtractExpressionAccess() {
		return pAddOrSubtractExpression;
	}
	
	public ParserRule getAddOrSubtractExpressionRule() {
		return getAddOrSubtractExpressionAccess().getRule();
	}
	
	//MultiplyDivideModuloExpression returns Expression:
	///*
	// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
	// */
	//    PowerOfExpression ({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*;
	public MultiplyDivideModuloExpressionElements getMultiplyDivideModuloExpressionAccess() {
		return pMultiplyDivideModuloExpression;
	}
	
	public ParserRule getMultiplyDivideModuloExpressionRule() {
		return getMultiplyDivideModuloExpressionAccess().getRule();
	}
	
	//PowerOfExpression returns Expression:
	///*
	// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
	// */
	//    UnaryAddOrSubtractExpression ({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*;
	public PowerOfExpressionElements getPowerOfExpressionAccess() {
		return pPowerOfExpression;
	}
	
	public ParserRule getPowerOfExpressionRule() {
		return getPowerOfExpressionAccess().getRule();
	}
	
	//UnaryAddOrSubtractExpression returns Expression:
	///*
	// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
	// */
	//    StringListNullOperatorExpression | {UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression;
	public UnaryAddOrSubtractExpressionElements getUnaryAddOrSubtractExpressionAccess() {
		return pUnaryAddOrSubtractExpression;
	}
	
	public ParserRule getUnaryAddOrSubtractExpressionRule() {
		return getUnaryAddOrSubtractExpressionAccess().getRule();
	}
	
	//StringListNullOperatorExpression returns Expression:
	///*
	// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
	// */
	//    PropertyOrLabelsExpression ( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | ListOperatorExpression | NullOperatorExpression) )*;
	public StringListNullOperatorExpressionElements getStringListNullOperatorExpressionAccess() {
		return pStringListNullOperatorExpression;
	}
	
	public ParserRule getStringListNullOperatorExpressionRule() {
		return getStringListNullOperatorExpressionAccess().getRule();
	}
	
	//ListOperatorExpression returns Expression:
	///*
	// * oC_ListOperatorExpression : ( SP? '[' oC_Expression ']' )
	// *                           | ( SP? '[' oC_Expression? '..' oC_Expression? ']' )
	// *                           ;
	// */
	//      ( {IndexLookupExpression} '[' expression=Expression ']') |
	//    ( {IndexRangeExpression} '[' (lower=Expression)? '..' (upper=Expression)? ']')
	//;
	public ListOperatorExpressionElements getListOperatorExpressionAccess() {
		return pListOperatorExpression;
	}
	
	public ParserRule getListOperatorExpressionRule() {
		return getListOperatorExpressionAccess().getRule();
	}
	
	//StringOperatorExpression returns Expression:
	///*
	// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
	// */
	//    ( ( {RegExpMatchingExpression} '=~' ) |
	//      ( {InCollectionExpression} 'IN' ) |
	//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
	//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
	//      ( {ContainsExpression} 'CONTAINS' ) )
	//    right=PropertyOrLabelsExpression
	//;
	public StringOperatorExpressionElements getStringOperatorExpressionAccess() {
		return pStringOperatorExpression;
	}
	
	public ParserRule getStringOperatorExpressionRule() {
		return getStringOperatorExpressionAccess().getRule();
	}
	
	//NullOperatorExpression returns Expression:
	///*
	// * oC_NullOperatorExpression : ( SP IS SP NULL )
	// *                           | ( SP IS SP NOT SP NULL )
	// *                           ;
	// */
	//    ( {IsNullExpression} 'IS' 'NULL') |
	//    ( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
	//;
	public NullOperatorExpressionElements getNullOperatorExpressionAccess() {
		return pNullOperatorExpression;
	}
	
	public ParserRule getNullOperatorExpressionRule() {
		return getNullOperatorExpressionAccess().getRule();
	}
	
	//PropertyOrLabelsExpression returns Expression:
	///*
	// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
	// *
	// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
	// * appear in the AST iff property lookups and node label constraints were given, respectively
	// */
	//    Atom ({PropertyLookupExpression.left=current} propertyLookups+=PropertyLookup+)?
	//         ({NodeLabelsExpression.left=current} NodeLabels)?
	//    ;
	public PropertyOrLabelsExpressionElements getPropertyOrLabelsExpressionAccess() {
		return pPropertyOrLabelsExpression;
	}
	
	public ParserRule getPropertyOrLabelsExpressionRule() {
		return getPropertyOrLabelsExpressionAccess().getRule();
	}
	
	//Atom returns Expression:
	///*
	// * oC_Atom : oC_Literal
	// *         | oC_Parameter
	// *         | oC_LegacyParameter
	// *         | oC_CaseExpression
	// *         | ( COUNT SP? '(' SP? '*' SP? ')' )
	// *         | oC_ListComprehension
	// *         | oC_PatternComprehension
	// *         | ( FILTER SP? '(' SP? oC_FilterExpression SP? ')' )
	// *         | ( EXTRACT SP? '(' SP? oC_FilterExpression SP? ( SP? '|' oC_Expression )? ')' )
	// *         | oC_Reduce
	// *         | ( ALL SP? '(' SP? oC_FilterExpression SP? ')' )
	// *         | ( ANY SP? '(' SP? oC_FilterExpression SP? ')' )
	// *         | ( NONE SP? '(' SP? oC_FilterExpression SP? ')' )
	// *         | ( SINGLE SP? '(' SP? oC_FilterExpression SP? ')' )
	// *         | oC_ShortestPathPattern
	// *         | oC_RelationshipsPattern
	// *         | oC_ParenthesizedExpression
	// *         | oC_FunctionInvocation
	// *         | oC_Variable
	// *         ;
	// */
	//    Literal | Parameter | LegacyParameter | CaseExpression | {Count} 'COUNT' '(' '*' ')' | ListComprehension |
	//    PatternComprehension | {Filter} 'FILTER' '(' filterExpression=FilterExpression ')' | {Extract} 'EXTRACT' '('
	//    filterExpression=FilterExpression ('|' expression=Expression)? ')' | Reduce | {All} 'ALL' '('
	//    filterExpression=FilterExpression ')' | {Any} 'ANY' '(' filterExpression=FilterExpression ')' | {None} 'NONE' '('
	//    filterExpression=FilterExpression ')' | {Single} 'SINGLE' '(' filterExpression=FilterExpression ')' |
	//    ShortestPathPattern | RelationshipsPattern | ParenthesizedExpression | FunctionInvocation |
	//    // TODO, changed
	//    {VariableRef} variableRef=VariableDeclaration;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//Literal:
	///*
	// * oC_Literal : oC_NumberLiteral
	// *            | StringLiteral
	// *            | oC_BooleanLiteral
	// *            | NULL
	// *            | oC_MapLiteral
	// *            | oC_ListLiteral
	// *            ;
	// */
	//    NumberLiteral | StringLiteral | {NULL} 'NULL' | BooleanLiteral | MapLiteral | ListLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	///*
	// * oC_BooleanLiteral : TRUE
	// *                   | FALSE
	// *                   ;
	// */
	//    {BooleanLiteral} value=('TRUE' | 'FALSE');
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//ListLiteral:
	///*
	// * oC_ListLiteral : '[' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ']' ;
	// */
	//    {ListLiteral} '[' (expressions+=Expression (',' expressions+=Expression)*)? ']';
	public ListLiteralElements getListLiteralAccess() {
		return pListLiteral;
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}
	
	//Reduce:
	///*
	// * REDUCE SP? '(' oC_Variable '=' oC_Expression ',' oC_IdInColl '|' oC_Expression ')' ;
	// */
	//    'REDUCE' '(' accumulator=VariableDeclaration '=' accumulatorExpression=Expression ',' idInColl=IdInColl '|'
	//    expression=Expression ')';
	public ReduceElements getReduceAccess() {
		return pReduce;
	}
	
	public ParserRule getReduceRule() {
		return getReduceAccess().getRule();
	}
	
	//ParenthesizedExpression:
	///*
	// * oC_ParenthesizedExpression : '(' SP? oC_Expression SP? ')' ;
	// */
	//    '(' expression=Expression ')';
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//RelationshipsPattern:
	///*
	// * oC_RelationshipsPattern : oC_NodePattern ( SP? oC_PatternElementChain )+ ;
	// */
	//    nodePattern=NodePattern (chain+=PatternElementChain)+;
	public RelationshipsPatternElements getRelationshipsPatternAccess() {
		return pRelationshipsPattern;
	}
	
	public ParserRule getRelationshipsPatternRule() {
		return getRelationshipsPatternAccess().getRule();
	}
	
	//FilterExpression:
	///*
	// * oC_FilterExpression : oC_IdInColl ( SP? oC_Where )? ;
	// */
	//    idInColl=IdInColl (where=Where)?;
	public FilterExpressionElements getFilterExpressionAccess() {
		return pFilterExpression;
	}
	
	public ParserRule getFilterExpressionRule() {
		return getFilterExpressionAccess().getRule();
	}
	
	//IdInColl:
	///*
	// * oC_IdInColl : oC_Variable SP IN SP oC_Expression ;
	// */
	//    variable=VariableDeclaration 'IN' expression=Expression;
	public IdInCollElements getIdInCollAccess() {
		return pIdInColl;
	}
	
	public ParserRule getIdInCollRule() {
		return getIdInCollAccess().getRule();
	}
	
	//FunctionInvocation:
	///*
	// * oC_FunctionInvocation : oC_FunctionName SP? '(' SP? ( DISTINCT SP? )? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
	// */
	//    functionName=FunctionName '(' distinct?='DISTINCT'? (parameter+=Expression (',' parameter+=Expression)*)? ')';
	public FunctionInvocationElements getFunctionInvocationAccess() {
		return pFunctionInvocation;
	}
	
	public ParserRule getFunctionInvocationRule() {
		return getFunctionInvocationAccess().getRule();
	}
	
	//FunctionName:
	///*
	// * oC_FunctionName : oC_SymbolicName
	// *                 | EXISTS
	// *                 ;
	// */
	//    SYMBOLIC_NAME_X;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//ExplicitProcedureInvocation:
	///*
	// * oC_ExplicitProcedureInvocation : oC_ProcedureName SP? '(' SP? ( oC_Expression SP? ( ',' SP? oC_Expression SP? )* )? ')' ;
	// */
	//    procedureName=ProcedureName '(' (parameter+=Expression (',' parameter+=Expression)*)? ')';
	public ExplicitProcedureInvocationElements getExplicitProcedureInvocationAccess() {
		return pExplicitProcedureInvocation;
	}
	
	public ParserRule getExplicitProcedureInvocationRule() {
		return getExplicitProcedureInvocationAccess().getRule();
	}
	
	//ImplicitProcedureInvocation:
	///*
	// * oC_ImplicitProcedureInvocation : oC_ProcedureName ;
	// */
	//    {ImplicitProcedureInvocation} procedureName=ProcedureName;
	public ImplicitProcedureInvocationElements getImplicitProcedureInvocationAccess() {
		return pImplicitProcedureInvocation;
	}
	
	public ParserRule getImplicitProcedureInvocationRule() {
		return getImplicitProcedureInvocationAccess().getRule();
	}
	
	//ProcedureResultField:
	///*
	// * oC_ProcedureResultField : oC_SymbolicName ;
	// */
	//    SYMBOLIC_NAME_X;
	public ProcedureResultFieldElements getProcedureResultFieldAccess() {
		return pProcedureResultField;
	}
	
	public ParserRule getProcedureResultFieldRule() {
		return getProcedureResultFieldAccess().getRule();
	}
	
	//ProcedureName:
	///*
	// * oC_ProcedureName : oC_Namespace oC_SymbolicName ;
	// */
	//    namespace=Namespace name=SYMBOLIC_NAME_X;
	public ProcedureNameElements getProcedureNameAccess() {
		return pProcedureName;
	}
	
	public ParserRule getProcedureNameRule() {
		return getProcedureNameAccess().getRule();
	}
	
	//Namespace:
	///**
	// * oC_Namespace : ( oC_SymbolicName '.' )* ;
	// */
	//    (SYMBOLIC_NAME_X '.')*;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//ListComprehension:
	///*
	// * oC_ListComprehension : '[' SP? oC_FilterExpression ( SP? '|' SP? oC_Expression )? SP? ']' ;
	// */
	//    '[' filterExpression=FilterExpression ('|' expression=Expression)? ']';
	public ListComprehensionElements getListComprehensionAccess() {
		return pListComprehension;
	}
	
	public ParserRule getListComprehensionRule() {
		return getListComprehensionAccess().getRule();
	}
	
	//PatternComprehension:
	///*
	// * oC_PatternComprehension : '[' SP? ( oC_Variable SP? '=' SP? )? oC_RelationshipsPattern SP? ( WHERE SP? oC_Expression SP? )? '|' SP? oC_Expression SP? ']' ;
	// */
	//    '[' (pathVariable=VariableDeclaration '=')? pattern=RelationshipsPattern (where=Where)? '|' expression=Expression
	//    ']';
	public PatternComprehensionElements getPatternComprehensionAccess() {
		return pPatternComprehension;
	}
	
	public ParserRule getPatternComprehensionRule() {
		return getPatternComprehensionAccess().getRule();
	}
	
	//PropertyLookup:
	///*
	// * oC_PropertyLookup : '.' SP? ( oC_PropertyKeyName ) ;
	// */
	//    '.' (propertyKeyName=PropertyKeyName propertyOperator=('?' | '!') | propertyKeyName=PropertyKeyName);
	public PropertyLookupElements getPropertyLookupAccess() {
		return pPropertyLookup;
	}
	
	public ParserRule getPropertyLookupRule() {
		return getPropertyLookupAccess().getRule();
	}
	
	//CaseExpression:
	///*
	// * oC_CaseExpression : ( ( CASE ( SP? oC_CaseAlternatives )+ ) | ( CASE SP? oC_Expression ( SP? oC_CaseAlternatives )+ ) ) ( SP? ELSE SP? oC_Expression )? SP? END ;
	// */
	//    (('CASE' (caseAlternatives+=CaseAlternatives)+) | ('CASE' caseExpression=Expression
	//    (caseAlternatives+=CaseAlternatives)+)) ('ELSE' elseExpression=Expression)? 'END';
	public CaseExpressionElements getCaseExpressionAccess() {
		return pCaseExpression;
	}
	
	public ParserRule getCaseExpressionRule() {
		return getCaseExpressionAccess().getRule();
	}
	
	//CaseAlternatives:
	///*
	// * oC_CaseAlternatives : WHEN SP? oC_Expression SP? THEN SP? oC_Expression ;
	// */
	//    'WHEN' when=Expression 'THEN' then=Expression;
	public CaseAlternativesElements getCaseAlternativesAccess() {
		return pCaseAlternatives;
	}
	
	public ParserRule getCaseAlternativesRule() {
		return getCaseAlternativesAccess().getRule();
	}
	
	//VariableDeclaration returns VariableDeclaration:
	///*
	// * oC_Variable : oC_SymbolicName ;
	// */
	//    {VariableDeclaration} name=SYMBOLIC_NAME_X;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//StringLiteral:
	///*
	// * StringLiteral : ( '"' ( StringLiteral_0 | EscapedChar )* '"' )
	// *               | ( '\'' ( StringLiteral_1 | EscapedChar )* '\'' )
	// *               ;
	// */
	//    value=STRING_LITERAL;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	///*
	// * oC_NumberLiteral : oC_DoubleLiteral
	// *                  | oC_IntegerLiteral
	// *                  ;
	// */
	//    value=Number;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//MapLiteral:
	///*
	// * oC_MapLiteral : '{' SP? ( oC_PropertyKeyName SP? ':' SP? oC_Expression SP? ( ',' SP? oC_PropertyKeyName SP? ':' SP? oC_Expression SP? )* )? '}' ;
	// *
	// * Comment: For simplicity we split up the antlr clause in 'MapLiteral' and 'MapLiteralEntry'
	// */
	//    {MapLiteral} '{' (entries+=MapLiteralEntry (',' entries+=MapLiteralEntry)*)? '}';
	public MapLiteralElements getMapLiteralAccess() {
		return pMapLiteral;
	}
	
	public ParserRule getMapLiteralRule() {
		return getMapLiteralAccess().getRule();
	}
	
	//MapLiteralEntry:
	//    key=PropertyKeyName ':' value=Expression;
	public MapLiteralEntryElements getMapLiteralEntryAccess() {
		return pMapLiteralEntry;
	}
	
	public ParserRule getMapLiteralEntryRule() {
		return getMapLiteralEntryAccess().getRule();
	}
	
	//LegacyParameter:
	///*
	// * oC_LegacyParameter : '{' SP? ( oC_SymbolicName | DecimalInteger ) SP? '}' ;
	// *
	// * Comment: Format of DecimalInteger is checked via
	// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkLegacyParameterFormat(LegacyParameter)
	// */
	//    '{' parameter=(SYMBOLIC_NAME_X | Number) '}';
	public LegacyParameterElements getLegacyParameterAccess() {
		return pLegacyParameter;
	}
	
	public ParserRule getLegacyParameterRule() {
		return getLegacyParameterAccess().getRule();
	}
	
	//Parameter:
	///*
	// * oC_Parameter : '$' ( oC_SymbolicName | DecimalInteger ) ;
	// *
	// * Comment: Format of DecimalInteger is checked via
	// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkParameterFormat(Parameter)
	// */
	//    '$' parameter=(SYMBOLIC_NAME_X | Number);
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//PropertyExpression:
	///*
	// * oC_PropertyExpression : oC_Atom ( SP? oC_PropertyLookup )+ ;
	// */
	//    Atom (propertyLookups+=PropertyLookup)+;
	public PropertyExpressionElements getPropertyExpressionAccess() {
		return pPropertyExpression;
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}
	
	//PropertyKeyName:
	///*
	// * oC_PropertyKeyName : oC_SchemaName ;
	// */
	//    SYMBOLIC_NAME_X;
	public PropertyKeyNameElements getPropertyKeyNameAccess() {
		return pPropertyKeyName;
	}
	
	public ParserRule getPropertyKeyNameRule() {
		return getPropertyKeyNameAccess().getRule();
	}
	
	///**
	//  {StringConstant} value=STRING_LITERAL |
	//  * {BoolConstant}
	//    value=('TRUE' | 'FALSE') | {NullConstant} 'NULL' |
	//    * MapLiteral |
	//    *
	//    */
	//LeftArrowHead:
	///*
	// * Comment: reduced character set
	// */
	//    '<';
	public LeftArrowHeadElements getLeftArrowHeadAccess() {
		return pLeftArrowHead;
	}
	
	public ParserRule getLeftArrowHeadRule() {
		return getLeftArrowHeadAccess().getRule();
	}
	
	//RightArrowHead:
	///*
	// * Comment: reduced character set
	// */
	//    '>';
	public RightArrowHeadElements getRightArrowHeadAccess() {
		return pRightArrowHead;
	}
	
	public ParserRule getRightArrowHeadRule() {
		return getRightArrowHeadAccess().getRule();
	}
	
	//Dash:
	///*
	// * Comment: reduced character set
	// */
	//    '-';
	public DashElements getDashAccess() {
		return pDash;
	}
	
	public ParserRule getDashRule() {
		return getDashAccess().getRule();
	}
	
	//DecimalInteger:
	///*
	// * Comment: Format of DecimalInteger is checked via
	// * io.codekontor.opencypher.xtext.validation.OpenCypherValidator.checkDecimalIntegerFormat(DecimalInteger)
	// */
	//    {DecimalInteger} value=Number;
	public DecimalIntegerElements getDecimalIntegerAccess() {
		return pDecimalInteger;
	}
	
	public ParserRule getDecimalIntegerRule() {
		return getDecimalIntegerAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//SYMBOLIC_NAME_X:
	///*
	// * symbolicNameString : UnescapedSymbolicNameString
	// *                  | EscapedSymbolicNameString
	// *                  | CYPHER
	// *                  | EXPLAIN
	// *                  | PROFILE
	// *                  | USING
	// *                  | PERIODIC
	// *                  | COMMIT
	// *                  | UNION
	// *                  | ALL
	// *                  | CREATE
	// *                  | INDEX
	// *                  | ON
	// *                  | DROP
	// *                  | CONSTRAINT
	// *                  | ASSERT
	// *                  | IS
	// *                  | UNIQUE
	// *                  | EXISTS
	// *                  | LOAD
	// *                  | CSV
	// *                  | WITH
	// *                  | HEADERS
	// *                  | FROM
	// *                  | AS
	// *                  | FIELDTERMINATOR
	// *                  | OPTIONAL
	// *                  | MATCH
	// *                  | UNWIND
	// *                  | MERGE
	// *                  | SET
	// *                  | DELETE
	// *                  | DETACH
	// *                  | REMOVE
	// *                  | FOREACH
	// *                  | IN
	// *                  | DISTINCT
	// *                  | RETURN
	// *                  | ORDER
	// *                  | BY
	// *                  | L_SKIP
	// *                  | LIMIT
	// *                  | DESCENDING
	// *                  | DESC
	// *                  | ASCENDING
	// *                  | ASC
	// *                  | JOIN
	// *                  | SCAN
	// *                  | START
	// *                  | NODE
	// *                  | RELATIONSHIP
	// *                  | REL
	// *                  | WHERE
	// *                  | SHORTESTPATH
	// *                  | ALLSHORTESTPATHS
	// *                  | OR
	// *                  | XOR
	// *                  | AND
	// *                  | NOT
	// *                  | STARTS
	// *                  | ENDS
	// *                  | CONTAINS
	// *                  | NULL
	// *                  | TRUE
	// *                  | FALSE
	// *                  | COUNT
	// *                  | FILTER
	// *                  | EXTRACT
	// *                  | ANY
	// *                  | NONE
	// *                  | SINGLE
	// *                  | REDUCE
	// *                  | CASE
	// *                  | ELSE
	// *                  | END
	// *                  | WHEN
	// *                  | THEN
	// *                  | L_0X
	// *                   ;
	// */
	//    ID | 'CYPHER' | 'EXPLAIN' | 'PROFILE' | 'USING' | 'PERIODIC' | 'COMMIT' | 'UNION' | 'ALL' | 'CREATE' | 'INDEX' | 'ON'
	//    | 'DROP' | 'CONSTRAINT' | 'ASSERT' | 'IS' | 'UNIQUE' | 'EXISTS' | 'LOAD' | 'CSV' | 'WITH' | 'HEADERS' | 'FROM' | 'AS'
	//    | 'FIELDTERMINATOR' | 'OPTIONAL' | 'MATCH' | 'UNWIND' | 'MERGE' | 'SET' | 'DELETE' | 'DETACH' | 'REMOVE' | 'FOREACH'
	//    | 'IN' | 'DISTINCT' | 'RETURN' | 'ORDER' | 'BY' | 'SKIP' | 'LIMIT' | 'DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC' |
	//    'JOIN' | 'SCAN' | 'START' | 'NODE' | 'RELATIONSHIP' | 'REL' | 'WHERE' | 'SHORTESTPATH' | 'ALLSHORTESTPATHS' | 'OR' |
	//    'XOR' | 'AND' | 'NOT' | 'STARTS' | 'ENDS' | 'CONTAINS' | 'NULL' | 'TRUE' | 'FALSE' | 'COUNT' | 'FILTER' | 'EXTRACT' |
	//    'ANY' | 'NONE' | 'SINGLE' | 'REDUCE' | 'CASE' | 'ELSE' | 'END' | 'WHEN' | 'THEN';
	public SYMBOLIC_NAME_XElements getSYMBOLIC_NAME_XAccess() {
		return pSYMBOLIC_NAME_X;
	}
	
	public ParserRule getSYMBOLIC_NAME_XRule() {
		return getSYMBOLIC_NAME_XAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	///*
	// * Comment: reduced character set
	// */
	//    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | ('`'->'`');
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal ML_COMMENT:
	//    '/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal STRING_LITERAL:
	//    '"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' | "'" ('\\' .
	//    /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal HEX:
	//    ('0x' | '0X') ('0'..'9' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DECIMAL:
	//    INT (('e') ('+' | '-')? INT)?;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
