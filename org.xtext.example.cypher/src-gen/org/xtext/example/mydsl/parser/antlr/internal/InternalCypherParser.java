package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.CypherGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalCypherParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLSHORTESTPATHS", "FIELDTERMINATOR", "RELATIONSHIP", "SHORTESTPATH", "CONSTRAINT", "DESCENDING", "ASCENDING", "CONTAINS", "DISTINCT", "OPTIONAL", "PERIODIC", "EXPLAIN", "EXTRACT", "FOREACH", "HEADERS", "PROFILE", "ASSERT", "COMMIT", "CREATE", "CYPHER", "DELETE", "DETACH", "EXISTS", "FILTER", "REDUCE", "REMOVE", "RETURN", "SINGLE", "STARTS", "UNIQUE", "UNWIND", "COUNT", "FALSE", "INDEX", "LIMIT", "MATCH", "MERGE", "ORDER", "START", "UNION", "USING", "WHERE", "YIELD", "CALL", "CASE", "DESC", "DROP", "ELSE", "ENDS", "FROM", "JOIN", "LOAD", "NODE", "NONE", "NULL", "SCAN", "SKIP", "THEN", "TRUE", "WHEN", "WITH", "ALL", "AND", "ANY", "ASC", "CSV", "END", "NOT", "REL", "SET", "XOR", "PlusSignEqualsSign", "FullStopFullStop", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignTilde", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "ExclamationMark", "DollarSign", "PercentSign", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_STRING_LITERAL", "RULE_HEX", "RULE_INT", "RULE_DECIMAL", "RULE_STRING", "RULE_ANY_OTHER"
    };
    public static final int LessThanSignGreaterThanSign=78;
    public static final int RULE_HEX=115;
    public static final int CREATE=22;
    public static final int JOIN=54;
    public static final int LessThanSign=100;
    public static final int WHEN=63;
    public static final int LeftParenthesis=90;
    public static final int EXPLAIN=15;
    public static final int PERIODIC=14;
    public static final int ELSE=51;
    public static final int EqualsSignTilde=79;
    public static final int NONE=57;
    public static final int ExclamationMark=87;
    public static final int GreaterThanSign=102;
    public static final int RULE_ID=110;
    public static final int IN=83;
    public static final int NODE=56;
    public static final int DISTINCT=12;
    public static final int IS=84;
    public static final int WHERE=45;
    public static final int CASE=48;
    public static final int GreaterThanSignEqualsSign=80;
    public static final int FIELDTERMINATOR=5;
    public static final int STARTS=32;
    public static final int AS=81;
    public static final int VerticalLine=108;
    public static final int PlusSign=93;
    public static final int RULE_INT=116;
    public static final int RULE_ML_COMMENT=111;
    public static final int COUNT=35;
    public static final int THEN=61;
    public static final int XOR=74;
    public static final int LeftSquareBracket=104;
    public static final int CALL=47;
    public static final int SET=73;
    public static final int MERGE=40;
    public static final int CONSTRAINT=8;
    public static final int FOREACH=17;
    public static final int ORDER=41;
    public static final int ASC=68;
    public static final int Comma=94;
    public static final int DELETE=24;
    public static final int HyphenMinus=95;
    public static final int HEADERS=18;
    public static final int BY=82;
    public static final int REMOVE=29;
    public static final int SKIP=60;
    public static final int SCAN=59;
    public static final int LessThanSignEqualsSign=77;
    public static final int Solidus=97;
    public static final int RightCurlyBracket=109;
    public static final int UNWIND=34;
    public static final int FullStop=96;
    public static final int YIELD=46;
    public static final int DETACH=25;
    public static final int Semicolon=99;
    public static final int ASCENDING=10;
    public static final int QuestionMark=103;
    public static final int SHORTESTPATH=7;
    public static final int REL=72;
    public static final int CYPHER=23;
    public static final int UNION=43;
    public static final int ALL=65;
    public static final int SINGLE=31;
    public static final int FROM=53;
    public static final int DESC=49;
    public static final int OPTIONAL=13;
    public static final int PercentSign=89;
    public static final int ALLSHORTESTPATHS=4;
    public static final int FullStopFullStop=76;
    public static final int DESCENDING=9;
    public static final int INDEX=37;
    public static final int RightSquareBracket=105;
    public static final int EXTRACT=16;
    public static final int NULL=58;
    public static final int UNIQUE=33;
    public static final int RightParenthesis=91;
    public static final int TRUE=62;
    public static final int USING=44;
    public static final int RULE_DECIMAL=117;
    public static final int NOT=71;
    public static final int AND=66;
    public static final int END=70;
    public static final int RELATIONSHIP=6;
    public static final int REDUCE=28;
    public static final int LOAD=55;
    public static final int LIMIT=38;
    public static final int RULE_STRING=118;
    public static final int CONTAINS=11;
    public static final int ANY=67;
    public static final int RULE_STRING_LITERAL=114;
    public static final int DROP=50;
    public static final int RULE_SL_COMMENT=112;
    public static final int RETURN=30;
    public static final int EqualsSign=101;
    public static final int PROFILE=19;
    public static final int ENDS=52;
    public static final int Colon=98;
    public static final int EOF=-1;
    public static final int Asterisk=92;
    public static final int PlusSignEqualsSign=75;
    public static final int ON=85;
    public static final int FILTER=27;
    public static final int OR=86;
    public static final int EXISTS=26;
    public static final int ASSERT=20;
    public static final int COMMIT=21;
    public static final int RULE_WS=113;
    public static final int CSV=69;
    public static final int LeftCurlyBracket=107;
    public static final int RULE_ANY_OTHER=119;
    public static final int WITH=64;
    public static final int CircumflexAccent=106;
    public static final int DollarSign=88;
    public static final int FALSE=36;
    public static final int START=42;
    public static final int MATCH=39;

    // delegates
    // delegators


        public InternalCypherParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalCypherParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalCypherParser.tokenNames; }
    public String getGrammarFileName() { return "InternalCypherParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private CypherGrammarAccess grammarAccess;

        public InternalCypherParser(TokenStream input, CypherGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Cypher";
       	}

       	@Override
       	protected CypherGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleCypher"
    // InternalCypherParser.g:64:1: entryRuleCypher returns [EObject current=null] : iv_ruleCypher= ruleCypher EOF ;
    public final EObject entryRuleCypher() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCypher = null;


        try {
            // InternalCypherParser.g:64:47: (iv_ruleCypher= ruleCypher EOF )
            // InternalCypherParser.g:65:2: iv_ruleCypher= ruleCypher EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCypherRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCypher=ruleCypher();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCypher; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCypher"


    // $ANTLR start "ruleCypher"
    // InternalCypherParser.g:71:1: ruleCypher returns [EObject current=null] : ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )* ) ;
    public final EObject ruleCypher() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        EObject lv_queryOptions_1_0 = null;

        EObject lv_statements_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:77:2: ( ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )* ) )
            // InternalCypherParser.g:78:2: ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )* )
            {
            // InternalCypherParser.g:78:2: ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )* )
            // InternalCypherParser.g:79:3: () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )*
            {
            // InternalCypherParser.g:79:3: ()
            // InternalCypherParser.g:80:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCypherAccess().getCypherAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:89:3: ( (lv_queryOptions_1_0= ruleQueryOptions ) )
            // InternalCypherParser.g:90:4: (lv_queryOptions_1_0= ruleQueryOptions )
            {
            // InternalCypherParser.g:90:4: (lv_queryOptions_1_0= ruleQueryOptions )
            // InternalCypherParser.g:91:5: lv_queryOptions_1_0= ruleQueryOptions
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_3);
            lv_queryOptions_1_0=ruleQueryOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCypherRule());
              					}
              					set(
              						current,
              						"queryOptions",
              						lv_queryOptions_1_0,
              						"org.xtext.example.mydsl.Cypher.QueryOptions");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:108:3: ( ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==OPTIONAL||LA2_0==FOREACH||LA2_0==CREATE||(LA2_0>=DELETE && LA2_0<=DETACH)||(LA2_0>=REMOVE && LA2_0<=RETURN)||LA2_0==UNWIND||(LA2_0>=MATCH && LA2_0<=MERGE)||LA2_0==START||LA2_0==USING||LA2_0==CALL||LA2_0==DROP||LA2_0==LOAD||LA2_0==WITH||LA2_0==SET) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // InternalCypherParser.g:109:4: ( (lv_statements_2_0= ruleStatement ) ) (otherlv_3= Semicolon )?
            	    {
            	    // InternalCypherParser.g:109:4: ( (lv_statements_2_0= ruleStatement ) )
            	    // InternalCypherParser.g:110:5: (lv_statements_2_0= ruleStatement )
            	    {
            	    // InternalCypherParser.g:110:5: (lv_statements_2_0= ruleStatement )
            	    // InternalCypherParser.g:111:6: lv_statements_2_0= ruleStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getCypherAccess().getStatementsStatementParserRuleCall_2_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_2_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCypherRule());
            	      						}
            	      						add(
            	      							current,
            	      							"statements",
            	      							lv_statements_2_0,
            	      							"org.xtext.example.mydsl.Cypher.Statement");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalCypherParser.g:128:4: (otherlv_3= Semicolon )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==Semicolon) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // InternalCypherParser.g:129:5: otherlv_3= Semicolon
            	            {
            	            otherlv_3=(Token)match(input,Semicolon,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getCypherAccess().getSemicolonKeyword_2_1());
            	              				
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCypher"


    // $ANTLR start "entryRuleQueryOptions"
    // InternalCypherParser.g:139:1: entryRuleQueryOptions returns [EObject current=null] : iv_ruleQueryOptions= ruleQueryOptions EOF ;
    public final EObject entryRuleQueryOptions() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryOptions = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalCypherParser.g:143:2: (iv_ruleQueryOptions= ruleQueryOptions EOF )
            // InternalCypherParser.g:144:2: iv_ruleQueryOptions= ruleQueryOptions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQueryOptions=ruleQueryOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQueryOptions; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleQueryOptions"


    // $ANTLR start "ruleQueryOptions"
    // InternalCypherParser.g:153:1: ruleQueryOptions returns [EObject current=null] : ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) ) ;
    public final EObject ruleQueryOptions() throws RecognitionException {
        EObject current = null;

        Token lv_explain_2_0=null;
        Token lv_profile_3_0=null;
        EObject lv_cypherOption_4_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalCypherParser.g:162:2: ( ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) ) )
            // InternalCypherParser.g:163:2: ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) )
            {
            // InternalCypherParser.g:163:2: ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) )
            // InternalCypherParser.g:164:3: () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) )
            {
            // InternalCypherParser.g:164:3: ()
            // InternalCypherParser.g:165:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:174:3: ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) )
            // InternalCypherParser.g:175:4: ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) )
            {
            // InternalCypherParser.g:175:4: ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) )
            // InternalCypherParser.g:176:5: ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* )
            {
            getUnorderedGroupHelper().enter(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            // InternalCypherParser.g:179:5: ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* )
            // InternalCypherParser.g:180:6: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )*
            {
            // InternalCypherParser.g:180:6: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )*
            loop4:
            do {
                int alt4=4;
                int LA4_0 = input.LA(1);

                if ( LA4_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                    alt4=1;
                }
                else if ( LA4_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                    alt4=2;
                }
                else if ( LA4_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                    alt4=3;
                }


                switch (alt4) {
            	case 1 :
            	    // InternalCypherParser.g:181:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
            	    {
            	    // InternalCypherParser.g:181:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
            	    // InternalCypherParser.g:182:5: {...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
            	    }
            	    // InternalCypherParser.g:182:109: ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
            	    // InternalCypherParser.g:183:6: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
            	    // InternalCypherParser.g:186:9: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
            	    // InternalCypherParser.g:186:10: {...}? => ( (lv_explain_2_0= EXPLAIN ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    }
            	    // InternalCypherParser.g:186:19: ( (lv_explain_2_0= EXPLAIN ) )
            	    // InternalCypherParser.g:186:20: (lv_explain_2_0= EXPLAIN )
            	    {
            	    // InternalCypherParser.g:186:20: (lv_explain_2_0= EXPLAIN )
            	    // InternalCypherParser.g:187:10: lv_explain_2_0= EXPLAIN
            	    {
            	    lv_explain_2_0=(Token)match(input,EXPLAIN,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_explain_2_0, grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getQueryOptionsRule());
            	      										}
            	      										setWithLastConsumed(current, "explain", lv_explain_2_0 != null, "EXPLAIN");
            	      									
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalCypherParser.g:204:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
            	    {
            	    // InternalCypherParser.g:204:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
            	    // InternalCypherParser.g:205:5: {...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
            	    }
            	    // InternalCypherParser.g:205:109: ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
            	    // InternalCypherParser.g:206:6: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
            	    // InternalCypherParser.g:209:9: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
            	    // InternalCypherParser.g:209:10: {...}? => ( (lv_profile_3_0= PROFILE ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    }
            	    // InternalCypherParser.g:209:19: ( (lv_profile_3_0= PROFILE ) )
            	    // InternalCypherParser.g:209:20: (lv_profile_3_0= PROFILE )
            	    {
            	    // InternalCypherParser.g:209:20: (lv_profile_3_0= PROFILE )
            	    // InternalCypherParser.g:210:10: lv_profile_3_0= PROFILE
            	    {
            	    lv_profile_3_0=(Token)match(input,PROFILE,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_profile_3_0, grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getQueryOptionsRule());
            	      										}
            	      										setWithLastConsumed(current, "profile", lv_profile_3_0 != null, "PROFILE");
            	      									
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalCypherParser.g:227:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
            	    {
            	    // InternalCypherParser.g:227:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
            	    // InternalCypherParser.g:228:5: {...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
            	    }
            	    // InternalCypherParser.g:228:109: ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
            	    // InternalCypherParser.g:229:6: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
            	    // InternalCypherParser.g:232:9: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
            	    int cnt3=0;
            	    loop3:
            	    do {
            	        int alt3=2;
            	        int LA3_0 = input.LA(1);

            	        if ( (LA3_0==CYPHER) ) {
            	            int LA3_2 = input.LA(2);

            	            if ( ((synpred5_InternalCypherParser()&&(true))) ) {
            	                alt3=1;
            	            }


            	        }


            	        switch (alt3) {
            	    	case 1 :
            	    	    // InternalCypherParser.g:232:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    	    }
            	    	    // InternalCypherParser.g:232:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
            	    	    // InternalCypherParser.g:232:20: (lv_cypherOption_4_0= ruleCypherOption )
            	    	    {
            	    	    // InternalCypherParser.g:232:20: (lv_cypherOption_4_0= ruleCypherOption )
            	    	    // InternalCypherParser.g:233:10: lv_cypherOption_4_0= ruleCypherOption
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_5);
            	    	    lv_cypherOption_4_0=ruleCypherOption();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getQueryOptionsRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"cypherOption",
            	    	      											lv_cypherOption_4_0,
            	    	      											"org.xtext.example.mydsl.Cypher.CypherOption");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt3 >= 1 ) break loop3;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(3, input);
            	                throw eee;
            	        }
            	        cnt3++;
            	    } while (true);

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleQueryOptions"


    // $ANTLR start "entryRuleCypherOption"
    // InternalCypherParser.g:269:1: entryRuleCypherOption returns [EObject current=null] : iv_ruleCypherOption= ruleCypherOption EOF ;
    public final EObject entryRuleCypherOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCypherOption = null;


        try {
            // InternalCypherParser.g:269:53: (iv_ruleCypherOption= ruleCypherOption EOF )
            // InternalCypherParser.g:270:2: iv_ruleCypherOption= ruleCypherOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCypherOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCypherOption=ruleCypherOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCypherOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCypherOption"


    // $ANTLR start "ruleCypherOption"
    // InternalCypherParser.g:276:1: ruleCypherOption returns [EObject current=null] : ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* ) ;
    public final EObject ruleCypherOption() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_versionNumber_2_0 = null;

        EObject lv_configurationOption_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:282:2: ( ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* ) )
            // InternalCypherParser.g:283:2: ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* )
            {
            // InternalCypherParser.g:283:2: ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* )
            // InternalCypherParser.g:284:3: () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*
            {
            // InternalCypherParser.g:284:3: ()
            // InternalCypherParser.g:285:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCypherOptionAccess().getCypherOptionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,CYPHER,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1());
              		
            }
            // InternalCypherParser.g:298:3: ( (lv_versionNumber_2_0= ruleVersionNumber ) )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( ((LA5_0>=RULE_HEX && LA5_0<=RULE_DECIMAL)) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // InternalCypherParser.g:299:4: (lv_versionNumber_2_0= ruleVersionNumber )
                    {
                    // InternalCypherParser.g:299:4: (lv_versionNumber_2_0= ruleVersionNumber )
                    // InternalCypherParser.g:300:5: lv_versionNumber_2_0= ruleVersionNumber
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_7);
                    lv_versionNumber_2_0=ruleVersionNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCypherOptionRule());
                      					}
                      					set(
                      						current,
                      						"versionNumber",
                      						lv_versionNumber_2_0,
                      						"org.xtext.example.mydsl.Cypher.VersionNumber");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:317:3: ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*
            loop6:
            do {
                int alt6=2;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // InternalCypherParser.g:318:4: (lv_configurationOption_3_0= ruleConfigurationOption )
            	    {
            	    // InternalCypherParser.g:318:4: (lv_configurationOption_3_0= ruleConfigurationOption )
            	    // InternalCypherParser.g:319:5: lv_configurationOption_3_0= ruleConfigurationOption
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_configurationOption_3_0=ruleConfigurationOption();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCypherOptionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"configurationOption",
            	      						lv_configurationOption_3_0,
            	      						"org.xtext.example.mydsl.Cypher.ConfigurationOption");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCypherOption"


    // $ANTLR start "entryRuleVersionNumber"
    // InternalCypherParser.g:340:1: entryRuleVersionNumber returns [EObject current=null] : iv_ruleVersionNumber= ruleVersionNumber EOF ;
    public final EObject entryRuleVersionNumber() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVersionNumber = null;


        try {
            // InternalCypherParser.g:340:54: (iv_ruleVersionNumber= ruleVersionNumber EOF )
            // InternalCypherParser.g:341:2: iv_ruleVersionNumber= ruleVersionNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVersionNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVersionNumber=ruleVersionNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVersionNumber; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVersionNumber"


    // $ANTLR start "ruleVersionNumber"
    // InternalCypherParser.g:347:1: ruleVersionNumber returns [EObject current=null] : ( (lv_versionNumber_0_0= ruleNumber ) ) ;
    public final EObject ruleVersionNumber() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_versionNumber_0_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:353:2: ( ( (lv_versionNumber_0_0= ruleNumber ) ) )
            // InternalCypherParser.g:354:2: ( (lv_versionNumber_0_0= ruleNumber ) )
            {
            // InternalCypherParser.g:354:2: ( (lv_versionNumber_0_0= ruleNumber ) )
            // InternalCypherParser.g:355:3: (lv_versionNumber_0_0= ruleNumber )
            {
            // InternalCypherParser.g:355:3: (lv_versionNumber_0_0= ruleNumber )
            // InternalCypherParser.g:356:4: lv_versionNumber_0_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_versionNumber_0_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getVersionNumberRule());
              				}
              				set(
              					current,
              					"versionNumber",
              					lv_versionNumber_0_0,
              					"org.xtext.example.mydsl.Cypher.Number");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVersionNumber"


    // $ANTLR start "entryRuleConfigurationOption"
    // InternalCypherParser.g:376:1: entryRuleConfigurationOption returns [EObject current=null] : iv_ruleConfigurationOption= ruleConfigurationOption EOF ;
    public final EObject entryRuleConfigurationOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConfigurationOption = null;


        try {
            // InternalCypherParser.g:376:60: (iv_ruleConfigurationOption= ruleConfigurationOption EOF )
            // InternalCypherParser.g:377:2: iv_ruleConfigurationOption= ruleConfigurationOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConfigurationOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConfigurationOption=ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConfigurationOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConfigurationOption"


    // $ANTLR start "ruleConfigurationOption"
    // InternalCypherParser.g:383:1: ruleConfigurationOption returns [EObject current=null] : ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) ) ;
    public final EObject ruleConfigurationOption() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_key_0_0 = null;

        AntlrDatatypeRuleToken lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:389:2: ( ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) ) )
            // InternalCypherParser.g:390:2: ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) )
            {
            // InternalCypherParser.g:390:2: ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalCypherParser.g:391:3: ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalCypherParser.g:391:3: ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:392:4: (lv_key_0_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:392:4: (lv_key_0_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:393:5: lv_key_0_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_key_0_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConfigurationOptionRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1());
              		
            }
            // InternalCypherParser.g:414:3: ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:415:4: (lv_value_2_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:415:4: (lv_value_2_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:416:5: lv_value_2_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_2_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConfigurationOptionRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConfigurationOption"


    // $ANTLR start "entryRuleStatement"
    // InternalCypherParser.g:437:1: entryRuleStatement returns [EObject current=null] : iv_ruleStatement= ruleStatement EOF ;
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStatement = null;


        try {
            // InternalCypherParser.g:437:50: (iv_ruleStatement= ruleStatement EOF )
            // InternalCypherParser.g:438:2: iv_ruleStatement= ruleStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStatement"


    // $ANTLR start "ruleStatement"
    // InternalCypherParser.g:444:1: ruleStatement returns [EObject current=null] : (this_Command_0= ruleCommand | this_Query_1= ruleQuery ) ;
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Command_0 = null;

        EObject this_Query_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:450:2: ( (this_Command_0= ruleCommand | this_Query_1= ruleQuery ) )
            // InternalCypherParser.g:451:2: (this_Command_0= ruleCommand | this_Query_1= ruleQuery )
            {
            // InternalCypherParser.g:451:2: (this_Command_0= ruleCommand | this_Query_1= ruleQuery )
            int alt7=2;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case CONSTRAINT:
                    {
                    int LA7_4 = input.LA(3);

                    if ( (LA7_4==ON) ) {
                        alt7=1;
                    }
                    else if ( (LA7_4==EqualsSign) ) {
                        alt7=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 7, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case INDEX:
                    {
                    int LA7_5 = input.LA(3);

                    if ( (LA7_5==EqualsSign) ) {
                        alt7=2;
                    }
                    else if ( (LA7_5==ON) ) {
                        alt7=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 7, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case ALLSHORTESTPATHS:
                case FIELDTERMINATOR:
                case RELATIONSHIP:
                case SHORTESTPATH:
                case DESCENDING:
                case ASCENDING:
                case CONTAINS:
                case DISTINCT:
                case OPTIONAL:
                case PERIODIC:
                case EXPLAIN:
                case EXTRACT:
                case FOREACH:
                case HEADERS:
                case PROFILE:
                case ASSERT:
                case COMMIT:
                case CREATE:
                case CYPHER:
                case DELETE:
                case DETACH:
                case EXISTS:
                case FILTER:
                case REDUCE:
                case REMOVE:
                case RETURN:
                case SINGLE:
                case STARTS:
                case UNIQUE:
                case UNWIND:
                case COUNT:
                case FALSE:
                case LIMIT:
                case MATCH:
                case MERGE:
                case ORDER:
                case START:
                case UNION:
                case USING:
                case WHERE:
                case CASE:
                case DESC:
                case DROP:
                case ELSE:
                case ENDS:
                case FROM:
                case JOIN:
                case LOAD:
                case NODE:
                case NONE:
                case NULL:
                case SCAN:
                case SKIP:
                case THEN:
                case TRUE:
                case WHEN:
                case WITH:
                case ALL:
                case AND:
                case ANY:
                case ASC:
                case CSV:
                case END:
                case NOT:
                case REL:
                case SET:
                case XOR:
                case AS:
                case BY:
                case IN:
                case IS:
                case ON:
                case OR:
                case LeftParenthesis:
                case RULE_ID:
                    {
                    alt7=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;
                }

                }
                break;
            case DROP:
                {
                alt7=1;
                }
                break;
            case OPTIONAL:
            case FOREACH:
            case DELETE:
            case DETACH:
            case REMOVE:
            case RETURN:
            case UNWIND:
            case MATCH:
            case MERGE:
            case START:
            case USING:
            case CALL:
            case LOAD:
            case WITH:
            case SET:
                {
                alt7=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // InternalCypherParser.g:452:3: this_Command_0= ruleCommand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getCommandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Command_0=ruleCommand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Command_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:464:3: this_Query_1= ruleQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getQueryParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Query_1=ruleQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Query_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStatement"


    // $ANTLR start "entryRuleQuery"
    // InternalCypherParser.g:479:1: entryRuleQuery returns [EObject current=null] : iv_ruleQuery= ruleQuery EOF ;
    public final EObject entryRuleQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQuery = null;


        try {
            // InternalCypherParser.g:479:46: (iv_ruleQuery= ruleQuery EOF )
            // InternalCypherParser.g:480:2: iv_ruleQuery= ruleQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQuery=ruleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQuery"


    // $ANTLR start "ruleQuery"
    // InternalCypherParser.g:486:1: ruleQuery returns [EObject current=null] : (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery ) ;
    public final EObject ruleQuery() throws RecognitionException {
        EObject current = null;

        EObject this_RegularQuery_0 = null;

        EObject this_StandaloneCall_1 = null;

        EObject this_BulkImportQuery_2 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:492:2: ( (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery ) )
            // InternalCypherParser.g:493:2: (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery )
            {
            // InternalCypherParser.g:493:2: (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery )
            int alt8=3;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // InternalCypherParser.g:494:3: this_RegularQuery_0= ruleRegularQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularQuery_0=ruleRegularQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RegularQuery_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:506:3: this_StandaloneCall_1= ruleStandaloneCall
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StandaloneCall_1=ruleStandaloneCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StandaloneCall_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:518:3: this_BulkImportQuery_2= ruleBulkImportQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BulkImportQuery_2=ruleBulkImportQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BulkImportQuery_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQuery"


    // $ANTLR start "entryRuleRegularQuery"
    // InternalCypherParser.g:533:1: entryRuleRegularQuery returns [EObject current=null] : iv_ruleRegularQuery= ruleRegularQuery EOF ;
    public final EObject entryRuleRegularQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegularQuery = null;


        try {
            // InternalCypherParser.g:533:53: (iv_ruleRegularQuery= ruleRegularQuery EOF )
            // InternalCypherParser.g:534:2: iv_ruleRegularQuery= ruleRegularQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularQuery=ruleRegularQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRegularQuery"


    // $ANTLR start "ruleRegularQuery"
    // InternalCypherParser.g:540:1: ruleRegularQuery returns [EObject current=null] : (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? ) ;
    public final EObject ruleRegularQuery() throws RecognitionException {
        EObject current = null;

        EObject this_SingleQuery_0 = null;

        EObject lv_union_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:546:2: ( (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? ) )
            // InternalCypherParser.g:547:2: (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? )
            {
            // InternalCypherParser.g:547:2: (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? )
            // InternalCypherParser.g:548:3: this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_10);
            this_SingleQuery_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_SingleQuery_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:559:3: ( () ( (lv_union_2_0= ruleUnion ) )+ )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==UNION) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalCypherParser.g:560:4: () ( (lv_union_2_0= ruleUnion ) )+
                    {
                    // InternalCypherParser.g:560:4: ()
                    // InternalCypherParser.g:561:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:570:4: ( (lv_union_2_0= ruleUnion ) )+
                    int cnt9=0;
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==UNION) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // InternalCypherParser.g:571:5: (lv_union_2_0= ruleUnion )
                    	    {
                    	    // InternalCypherParser.g:571:5: (lv_union_2_0= ruleUnion )
                    	    // InternalCypherParser.g:572:6: lv_union_2_0= ruleUnion
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_union_2_0=ruleUnion();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getRegularQueryRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"union",
                    	      							lv_union_2_0,
                    	      							"org.xtext.example.mydsl.Cypher.Union");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt9 >= 1 ) break loop9;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(9, input);
                                throw eee;
                        }
                        cnt9++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRegularQuery"


    // $ANTLR start "entryRuleBulkImportQuery"
    // InternalCypherParser.g:594:1: entryRuleBulkImportQuery returns [EObject current=null] : iv_ruleBulkImportQuery= ruleBulkImportQuery EOF ;
    public final EObject entryRuleBulkImportQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBulkImportQuery = null;


        try {
            // InternalCypherParser.g:594:56: (iv_ruleBulkImportQuery= ruleBulkImportQuery EOF )
            // InternalCypherParser.g:595:2: iv_ruleBulkImportQuery= ruleBulkImportQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBulkImportQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBulkImportQuery=ruleBulkImportQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBulkImportQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBulkImportQuery"


    // $ANTLR start "ruleBulkImportQuery"
    // InternalCypherParser.g:601:1: ruleBulkImportQuery returns [EObject current=null] : ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) ) ;
    public final EObject ruleBulkImportQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_periodicCommitHint_0_0 = null;

        EObject lv_loadCSVQuery_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:607:2: ( ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) ) )
            // InternalCypherParser.g:608:2: ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) )
            {
            // InternalCypherParser.g:608:2: ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) )
            // InternalCypherParser.g:609:3: ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) )
            {
            // InternalCypherParser.g:609:3: ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) )
            // InternalCypherParser.g:610:4: (lv_periodicCommitHint_0_0= rulePeriodicCommitHint )
            {
            // InternalCypherParser.g:610:4: (lv_periodicCommitHint_0_0= rulePeriodicCommitHint )
            // InternalCypherParser.g:611:5: lv_periodicCommitHint_0_0= rulePeriodicCommitHint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_periodicCommitHint_0_0=rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBulkImportQueryRule());
              					}
              					set(
              						current,
              						"periodicCommitHint",
              						lv_periodicCommitHint_0_0,
              						"org.xtext.example.mydsl.Cypher.PeriodicCommitHint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:628:3: ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) )
            // InternalCypherParser.g:629:4: (lv_loadCSVQuery_1_0= ruleLoadCSVQuery )
            {
            // InternalCypherParser.g:629:4: (lv_loadCSVQuery_1_0= ruleLoadCSVQuery )
            // InternalCypherParser.g:630:5: lv_loadCSVQuery_1_0= ruleLoadCSVQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_loadCSVQuery_1_0=ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBulkImportQueryRule());
              					}
              					set(
              						current,
              						"loadCSVQuery",
              						lv_loadCSVQuery_1_0,
              						"org.xtext.example.mydsl.Cypher.LoadCSVQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBulkImportQuery"


    // $ANTLR start "entryRulePeriodicCommitHint"
    // InternalCypherParser.g:651:1: entryRulePeriodicCommitHint returns [EObject current=null] : iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF ;
    public final EObject entryRulePeriodicCommitHint() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePeriodicCommitHint = null;


        try {
            // InternalCypherParser.g:651:59: (iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF )
            // InternalCypherParser.g:652:2: iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPeriodicCommitHintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePeriodicCommitHint=rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePeriodicCommitHint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePeriodicCommitHint"


    // $ANTLR start "rulePeriodicCommitHint"
    // InternalCypherParser.g:658:1: rulePeriodicCommitHint returns [EObject current=null] : ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? ) ;
    public final EObject rulePeriodicCommitHint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_numberOfRowsPerCommit_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:664:2: ( ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? ) )
            // InternalCypherParser.g:665:2: ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? )
            {
            // InternalCypherParser.g:665:2: ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? )
            // InternalCypherParser.g:666:3: () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )?
            {
            // InternalCypherParser.g:666:3: ()
            // InternalCypherParser.g:667:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,USING,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,PERIODIC,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,COMMIT,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3());
              		
            }
            // InternalCypherParser.g:688:3: ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( ((LA11_0>=RULE_HEX && LA11_0<=RULE_DECIMAL)) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // InternalCypherParser.g:689:4: (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger )
                    {
                    // InternalCypherParser.g:689:4: (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger )
                    // InternalCypherParser.g:690:5: lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_numberOfRowsPerCommit_4_0=ruleDecimalInteger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPeriodicCommitHintRule());
                      					}
                      					set(
                      						current,
                      						"numberOfRowsPerCommit",
                      						lv_numberOfRowsPerCommit_4_0,
                      						"org.xtext.example.mydsl.Cypher.DecimalInteger");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePeriodicCommitHint"


    // $ANTLR start "entryRuleLoadCSVQuery"
    // InternalCypherParser.g:711:1: entryRuleLoadCSVQuery returns [EObject current=null] : iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF ;
    public final EObject entryRuleLoadCSVQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoadCSVQuery = null;


        try {
            // InternalCypherParser.g:711:53: (iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF )
            // InternalCypherParser.g:712:2: iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSVQuery=ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSVQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSVQuery"


    // $ANTLR start "ruleLoadCSVQuery"
    // InternalCypherParser.g:718:1: ruleLoadCSVQuery returns [EObject current=null] : ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_singleQuery_1_0= ruleSingleQuery ) ) ) ;
    public final EObject ruleLoadCSVQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_loadCSV_0_0 = null;

        EObject lv_singleQuery_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:724:2: ( ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_singleQuery_1_0= ruleSingleQuery ) ) ) )
            // InternalCypherParser.g:725:2: ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_singleQuery_1_0= ruleSingleQuery ) ) )
            {
            // InternalCypherParser.g:725:2: ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_singleQuery_1_0= ruleSingleQuery ) ) )
            // InternalCypherParser.g:726:3: ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_singleQuery_1_0= ruleSingleQuery ) )
            {
            // InternalCypherParser.g:726:3: ( (lv_loadCSV_0_0= ruleLoadCSV ) )
            // InternalCypherParser.g:727:4: (lv_loadCSV_0_0= ruleLoadCSV )
            {
            // InternalCypherParser.g:727:4: (lv_loadCSV_0_0= ruleLoadCSV )
            // InternalCypherParser.g:728:5: lv_loadCSV_0_0= ruleLoadCSV
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_loadCSV_0_0=ruleLoadCSV();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVQueryRule());
              					}
              					set(
              						current,
              						"loadCSV",
              						lv_loadCSV_0_0,
              						"org.xtext.example.mydsl.Cypher.LoadCSV");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:745:3: ( (lv_singleQuery_1_0= ruleSingleQuery ) )
            // InternalCypherParser.g:746:4: (lv_singleQuery_1_0= ruleSingleQuery )
            {
            // InternalCypherParser.g:746:4: (lv_singleQuery_1_0= ruleSingleQuery )
            // InternalCypherParser.g:747:5: lv_singleQuery_1_0= ruleSingleQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVQueryAccess().getSingleQuerySingleQueryParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_singleQuery_1_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVQueryRule());
              					}
              					set(
              						current,
              						"singleQuery",
              						lv_singleQuery_1_0,
              						"org.xtext.example.mydsl.Cypher.SingleQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSVQuery"


    // $ANTLR start "entryRuleUnion"
    // InternalCypherParser.g:768:1: entryRuleUnion returns [EObject current=null] : iv_ruleUnion= ruleUnion EOF ;
    public final EObject entryRuleUnion() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnion = null;


        try {
            // InternalCypherParser.g:768:46: (iv_ruleUnion= ruleUnion EOF )
            // InternalCypherParser.g:769:2: iv_ruleUnion= ruleUnion EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnion=ruleUnion();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnion; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnion"


    // $ANTLR start "ruleUnion"
    // InternalCypherParser.g:775:1: ruleUnion returns [EObject current=null] : (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) ) ;
    public final EObject ruleUnion() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_all_1_0=null;
        EObject lv_singleQuery_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:781:2: ( (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) ) )
            // InternalCypherParser.g:782:2: (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) )
            {
            // InternalCypherParser.g:782:2: (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) )
            // InternalCypherParser.g:783:3: otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) )
            {
            otherlv_0=(Token)match(input,UNION,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnionAccess().getUNIONKeyword_0());
              		
            }
            // InternalCypherParser.g:787:3: ( (lv_all_1_0= ALL ) )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ALL) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // InternalCypherParser.g:788:4: (lv_all_1_0= ALL )
                    {
                    // InternalCypherParser.g:788:4: (lv_all_1_0= ALL )
                    // InternalCypherParser.g:789:5: lv_all_1_0= ALL
                    {
                    lv_all_1_0=(Token)match(input,ALL,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_all_1_0, grammarAccess.getUnionAccess().getAllALLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getUnionRule());
                      					}
                      					setWithLastConsumed(current, "all", lv_all_1_0 != null, "ALL");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:801:3: ( (lv_singleQuery_2_0= ruleSingleQuery ) )
            // InternalCypherParser.g:802:4: (lv_singleQuery_2_0= ruleSingleQuery )
            {
            // InternalCypherParser.g:802:4: (lv_singleQuery_2_0= ruleSingleQuery )
            // InternalCypherParser.g:803:5: lv_singleQuery_2_0= ruleSingleQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_singleQuery_2_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionRule());
              					}
              					set(
              						current,
              						"singleQuery",
              						lv_singleQuery_2_0,
              						"org.xtext.example.mydsl.Cypher.SingleQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnion"


    // $ANTLR start "entryRuleSingleQuery"
    // InternalCypherParser.g:824:1: entryRuleSingleQuery returns [EObject current=null] : iv_ruleSingleQuery= ruleSingleQuery EOF ;
    public final EObject entryRuleSingleQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSingleQuery = null;


        try {
            // InternalCypherParser.g:824:52: (iv_ruleSingleQuery= ruleSingleQuery EOF )
            // InternalCypherParser.g:825:2: iv_ruleSingleQuery= ruleSingleQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleQuery=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSingleQuery"


    // $ANTLR start "ruleSingleQuery"
    // InternalCypherParser.g:831:1: ruleSingleQuery returns [EObject current=null] : (this_MultiPartQuery_0= ruleMultiPartQuery | this_SinglePartQuery_1= ruleSinglePartQuery ) ;
    public final EObject ruleSingleQuery() throws RecognitionException {
        EObject current = null;

        EObject this_MultiPartQuery_0 = null;

        EObject this_SinglePartQuery_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:837:2: ( (this_MultiPartQuery_0= ruleMultiPartQuery | this_SinglePartQuery_1= ruleSinglePartQuery ) )
            // InternalCypherParser.g:838:2: (this_MultiPartQuery_0= ruleMultiPartQuery | this_SinglePartQuery_1= ruleSinglePartQuery )
            {
            // InternalCypherParser.g:838:2: (this_MultiPartQuery_0= ruleMultiPartQuery | this_SinglePartQuery_1= ruleSinglePartQuery )
            int alt13=2;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    // InternalCypherParser.g:839:3: this_MultiPartQuery_0= ruleMultiPartQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSingleQueryAccess().getMultiPartQueryParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MultiPartQuery_0=ruleMultiPartQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MultiPartQuery_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:851:3: this_SinglePartQuery_1= ruleSinglePartQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSingleQueryAccess().getSinglePartQueryParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SinglePartQuery_1=ruleSinglePartQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SinglePartQuery_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSingleQuery"


    // $ANTLR start "entryRuleSinglePartQuery"
    // InternalCypherParser.g:866:1: entryRuleSinglePartQuery returns [EObject current=null] : iv_ruleSinglePartQuery= ruleSinglePartQuery EOF ;
    public final EObject entryRuleSinglePartQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSinglePartQuery = null;


        try {
            // InternalCypherParser.g:866:56: (iv_ruleSinglePartQuery= ruleSinglePartQuery EOF )
            // InternalCypherParser.g:867:2: iv_ruleSinglePartQuery= ruleSinglePartQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSinglePartQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSinglePartQuery=ruleSinglePartQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSinglePartQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSinglePartQuery"


    // $ANTLR start "ruleSinglePartQuery"
    // InternalCypherParser.g:873:1: ruleSinglePartQuery returns [EObject current=null] : ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) ) | ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? ) ) ;
    public final EObject ruleSinglePartQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_readingClauses_0_0 = null;

        EObject lv_return_1_0 = null;

        EObject lv_readingClauses_2_0 = null;

        EObject lv_updatingClauses_3_0 = null;

        EObject lv_return_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:879:2: ( ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) ) | ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? ) ) )
            // InternalCypherParser.g:880:2: ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) ) | ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? ) )
            {
            // InternalCypherParser.g:880:2: ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) ) | ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? ) )
            int alt18=2;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // InternalCypherParser.g:881:3: ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) )
                    {
                    // InternalCypherParser.g:881:3: ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) )
                    // InternalCypherParser.g:882:4: ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) )
                    {
                    // InternalCypherParser.g:882:4: ( (lv_readingClauses_0_0= ruleReadingClause ) )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==OPTIONAL||LA14_0==UNWIND||LA14_0==MATCH||LA14_0==START||LA14_0==CALL||LA14_0==LOAD) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // InternalCypherParser.g:883:5: (lv_readingClauses_0_0= ruleReadingClause )
                    	    {
                    	    // InternalCypherParser.g:883:5: (lv_readingClauses_0_0= ruleReadingClause )
                    	    // InternalCypherParser.g:884:6: lv_readingClauses_0_0= ruleReadingClause
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_readingClauses_0_0=ruleReadingClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSinglePartQueryRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"readingClauses",
                    	      							lv_readingClauses_0_0,
                    	      							"org.xtext.example.mydsl.Cypher.ReadingClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    // InternalCypherParser.g:901:4: ( (lv_return_1_0= ruleReturn ) )
                    // InternalCypherParser.g:902:5: (lv_return_1_0= ruleReturn )
                    {
                    // InternalCypherParser.g:902:5: (lv_return_1_0= ruleReturn )
                    // InternalCypherParser.g:903:6: lv_return_1_0= ruleReturn
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_return_1_0=ruleReturn();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSinglePartQueryRule());
                      						}
                      						set(
                      							current,
                      							"return",
                      							lv_return_1_0,
                      							"org.xtext.example.mydsl.Cypher.Return");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:922:3: ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? )
                    {
                    // InternalCypherParser.g:922:3: ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? )
                    // InternalCypherParser.g:923:4: ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )?
                    {
                    // InternalCypherParser.g:923:4: ( (lv_readingClauses_2_0= ruleReadingClause ) )*
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==OPTIONAL||LA15_0==UNWIND||LA15_0==MATCH||LA15_0==START||LA15_0==CALL||LA15_0==LOAD) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    // InternalCypherParser.g:924:5: (lv_readingClauses_2_0= ruleReadingClause )
                    	    {
                    	    // InternalCypherParser.g:924:5: (lv_readingClauses_2_0= ruleReadingClause )
                    	    // InternalCypherParser.g:925:6: lv_readingClauses_2_0= ruleReadingClause
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_1_0_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_18);
                    	    lv_readingClauses_2_0=ruleReadingClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSinglePartQueryRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"readingClauses",
                    	      							lv_readingClauses_2_0,
                    	      							"org.xtext.example.mydsl.Cypher.ReadingClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    // InternalCypherParser.g:942:4: ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+
                    int cnt16=0;
                    loop16:
                    do {
                        int alt16=2;
                        alt16 = dfa16.predict(input);
                        switch (alt16) {
                    	case 1 :
                    	    // InternalCypherParser.g:943:5: (lv_updatingClauses_3_0= ruleUpdatingClause )
                    	    {
                    	    // InternalCypherParser.g:943:5: (lv_updatingClauses_3_0= ruleUpdatingClause )
                    	    // InternalCypherParser.g:944:6: lv_updatingClauses_3_0= ruleUpdatingClause
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_19);
                    	    lv_updatingClauses_3_0=ruleUpdatingClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSinglePartQueryRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"updatingClauses",
                    	      							lv_updatingClauses_3_0,
                    	      							"org.xtext.example.mydsl.Cypher.UpdatingClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt16 >= 1 ) break loop16;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(16, input);
                                throw eee;
                        }
                        cnt16++;
                    } while (true);

                    // InternalCypherParser.g:961:4: ( (lv_return_4_0= ruleReturn ) )?
                    int alt17=2;
                    alt17 = dfa17.predict(input);
                    switch (alt17) {
                        case 1 :
                            // InternalCypherParser.g:962:5: (lv_return_4_0= ruleReturn )
                            {
                            // InternalCypherParser.g:962:5: (lv_return_4_0= ruleReturn )
                            // InternalCypherParser.g:963:6: lv_return_4_0= ruleReturn
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_1_2_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_return_4_0=ruleReturn();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getSinglePartQueryRule());
                              						}
                              						set(
                              							current,
                              							"return",
                              							lv_return_4_0,
                              							"org.xtext.example.mydsl.Cypher.Return");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSinglePartQuery"


    // $ANTLR start "entryRuleMultiPartQuery"
    // InternalCypherParser.g:985:1: entryRuleMultiPartQuery returns [EObject current=null] : iv_ruleMultiPartQuery= ruleMultiPartQuery EOF ;
    public final EObject entryRuleMultiPartQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultiPartQuery = null;


        try {
            // InternalCypherParser.g:985:55: (iv_ruleMultiPartQuery= ruleMultiPartQuery EOF )
            // InternalCypherParser.g:986:2: iv_ruleMultiPartQuery= ruleMultiPartQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiPartQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiPartQuery=ruleMultiPartQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiPartQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMultiPartQuery"


    // $ANTLR start "ruleMultiPartQuery"
    // InternalCypherParser.g:992:1: ruleMultiPartQuery returns [EObject current=null] : ( ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+ ( (lv_singlePartQuery_1_0= ruleSinglePartQuery ) ) ) ;
    public final EObject ruleMultiPartQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_subQueries_0_0 = null;

        EObject lv_singlePartQuery_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:998:2: ( ( ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+ ( (lv_singlePartQuery_1_0= ruleSinglePartQuery ) ) ) )
            // InternalCypherParser.g:999:2: ( ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+ ( (lv_singlePartQuery_1_0= ruleSinglePartQuery ) ) )
            {
            // InternalCypherParser.g:999:2: ( ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+ ( (lv_singlePartQuery_1_0= ruleSinglePartQuery ) ) )
            // InternalCypherParser.g:1000:3: ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+ ( (lv_singlePartQuery_1_0= ruleSinglePartQuery ) )
            {
            // InternalCypherParser.g:1000:3: ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+
            int cnt19=0;
            loop19:
            do {
                int alt19=2;
                alt19 = dfa19.predict(input);
                switch (alt19) {
            	case 1 :
            	    // InternalCypherParser.g:1001:4: (lv_subQueries_0_0= ruleMultiPartSubQuery )
            	    {
            	    // InternalCypherParser.g:1001:4: (lv_subQueries_0_0= ruleMultiPartSubQuery )
            	    // InternalCypherParser.g:1002:5: lv_subQueries_0_0= ruleMultiPartSubQuery
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMultiPartQueryAccess().getSubQueriesMultiPartSubQueryParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_subQueries_0_0=ruleMultiPartSubQuery();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMultiPartQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"subQueries",
            	      						lv_subQueries_0_0,
            	      						"org.xtext.example.mydsl.Cypher.MultiPartSubQuery");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt19 >= 1 ) break loop19;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(19, input);
                        throw eee;
                }
                cnt19++;
            } while (true);

            // InternalCypherParser.g:1019:3: ( (lv_singlePartQuery_1_0= ruleSinglePartQuery ) )
            // InternalCypherParser.g:1020:4: (lv_singlePartQuery_1_0= ruleSinglePartQuery )
            {
            // InternalCypherParser.g:1020:4: (lv_singlePartQuery_1_0= ruleSinglePartQuery )
            // InternalCypherParser.g:1021:5: lv_singlePartQuery_1_0= ruleSinglePartQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMultiPartQueryAccess().getSinglePartQuerySinglePartQueryParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_singlePartQuery_1_0=ruleSinglePartQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMultiPartQueryRule());
              					}
              					set(
              						current,
              						"singlePartQuery",
              						lv_singlePartQuery_1_0,
              						"org.xtext.example.mydsl.Cypher.SinglePartQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMultiPartQuery"


    // $ANTLR start "entryRuleMultiPartSubQuery"
    // InternalCypherParser.g:1042:1: entryRuleMultiPartSubQuery returns [EObject current=null] : iv_ruleMultiPartSubQuery= ruleMultiPartSubQuery EOF ;
    public final EObject entryRuleMultiPartSubQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultiPartSubQuery = null;


        try {
            // InternalCypherParser.g:1042:58: (iv_ruleMultiPartSubQuery= ruleMultiPartSubQuery EOF )
            // InternalCypherParser.g:1043:2: iv_ruleMultiPartSubQuery= ruleMultiPartSubQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiPartSubQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiPartSubQuery=ruleMultiPartSubQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiPartSubQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMultiPartSubQuery"


    // $ANTLR start "ruleMultiPartSubQuery"
    // InternalCypherParser.g:1049:1: ruleMultiPartSubQuery returns [EObject current=null] : ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_updatingClauses_1_0= ruleUpdatingClause ) )* ( (lv_withPart_2_0= ruleWith ) ) ) ;
    public final EObject ruleMultiPartSubQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_readingClauses_0_0 = null;

        EObject lv_updatingClauses_1_0 = null;

        EObject lv_withPart_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1055:2: ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_updatingClauses_1_0= ruleUpdatingClause ) )* ( (lv_withPart_2_0= ruleWith ) ) ) )
            // InternalCypherParser.g:1056:2: ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_updatingClauses_1_0= ruleUpdatingClause ) )* ( (lv_withPart_2_0= ruleWith ) ) )
            {
            // InternalCypherParser.g:1056:2: ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_updatingClauses_1_0= ruleUpdatingClause ) )* ( (lv_withPart_2_0= ruleWith ) ) )
            // InternalCypherParser.g:1057:3: ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_updatingClauses_1_0= ruleUpdatingClause ) )* ( (lv_withPart_2_0= ruleWith ) )
            {
            // InternalCypherParser.g:1057:3: ( (lv_readingClauses_0_0= ruleReadingClause ) )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==OPTIONAL||LA20_0==UNWIND||LA20_0==MATCH||LA20_0==START||LA20_0==CALL||LA20_0==LOAD) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // InternalCypherParser.g:1058:4: (lv_readingClauses_0_0= ruleReadingClause )
            	    {
            	    // InternalCypherParser.g:1058:4: (lv_readingClauses_0_0= ruleReadingClause )
            	    // InternalCypherParser.g:1059:5: lv_readingClauses_0_0= ruleReadingClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_readingClauses_0_0=ruleReadingClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMultiPartSubQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"readingClauses",
            	      						lv_readingClauses_0_0,
            	      						"org.xtext.example.mydsl.Cypher.ReadingClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // InternalCypherParser.g:1076:3: ( (lv_updatingClauses_1_0= ruleUpdatingClause ) )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==FOREACH||LA21_0==CREATE||(LA21_0>=DELETE && LA21_0<=DETACH)||LA21_0==REMOVE||LA21_0==MERGE||LA21_0==SET) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // InternalCypherParser.g:1077:4: (lv_updatingClauses_1_0= ruleUpdatingClause )
            	    {
            	    // InternalCypherParser.g:1077:4: (lv_updatingClauses_1_0= ruleUpdatingClause )
            	    // InternalCypherParser.g:1078:5: lv_updatingClauses_1_0= ruleUpdatingClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_updatingClauses_1_0=ruleUpdatingClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMultiPartSubQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"updatingClauses",
            	      						lv_updatingClauses_1_0,
            	      						"org.xtext.example.mydsl.Cypher.UpdatingClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);

            // InternalCypherParser.g:1095:3: ( (lv_withPart_2_0= ruleWith ) )
            // InternalCypherParser.g:1096:4: (lv_withPart_2_0= ruleWith )
            {
            // InternalCypherParser.g:1096:4: (lv_withPart_2_0= ruleWith )
            // InternalCypherParser.g:1097:5: lv_withPart_2_0= ruleWith
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMultiPartSubQueryAccess().getWithPartWithParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_withPart_2_0=ruleWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMultiPartSubQueryRule());
              					}
              					set(
              						current,
              						"withPart",
              						lv_withPart_2_0,
              						"org.xtext.example.mydsl.Cypher.With");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMultiPartSubQuery"


    // $ANTLR start "entryRuleUpdatingClause"
    // InternalCypherParser.g:1118:1: entryRuleUpdatingClause returns [EObject current=null] : iv_ruleUpdatingClause= ruleUpdatingClause EOF ;
    public final EObject entryRuleUpdatingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUpdatingClause = null;


        try {
            // InternalCypherParser.g:1118:55: (iv_ruleUpdatingClause= ruleUpdatingClause EOF )
            // InternalCypherParser.g:1119:2: iv_ruleUpdatingClause= ruleUpdatingClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUpdatingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUpdatingClause=ruleUpdatingClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUpdatingClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUpdatingClause"


    // $ANTLR start "ruleUpdatingClause"
    // InternalCypherParser.g:1125:1: ruleUpdatingClause returns [EObject current=null] : (this_Create_0= ruleCreate | this_Merge_1= ruleMerge | this_Foreach_2= ruleForeach | this_Delete_3= ruleDelete | this_Set_4= ruleSet | this_Remove_5= ruleRemove ) ;
    public final EObject ruleUpdatingClause() throws RecognitionException {
        EObject current = null;

        EObject this_Create_0 = null;

        EObject this_Merge_1 = null;

        EObject this_Foreach_2 = null;

        EObject this_Delete_3 = null;

        EObject this_Set_4 = null;

        EObject this_Remove_5 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1131:2: ( (this_Create_0= ruleCreate | this_Merge_1= ruleMerge | this_Foreach_2= ruleForeach | this_Delete_3= ruleDelete | this_Set_4= ruleSet | this_Remove_5= ruleRemove ) )
            // InternalCypherParser.g:1132:2: (this_Create_0= ruleCreate | this_Merge_1= ruleMerge | this_Foreach_2= ruleForeach | this_Delete_3= ruleDelete | this_Set_4= ruleSet | this_Remove_5= ruleRemove )
            {
            // InternalCypherParser.g:1132:2: (this_Create_0= ruleCreate | this_Merge_1= ruleMerge | this_Foreach_2= ruleForeach | this_Delete_3= ruleDelete | this_Set_4= ruleSet | this_Remove_5= ruleRemove )
            int alt22=6;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                alt22=1;
                }
                break;
            case MERGE:
                {
                alt22=2;
                }
                break;
            case FOREACH:
                {
                alt22=3;
                }
                break;
            case DELETE:
            case DETACH:
                {
                alt22=4;
                }
                break;
            case SET:
                {
                alt22=5;
                }
                break;
            case REMOVE:
                {
                alt22=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }

            switch (alt22) {
                case 1 :
                    // InternalCypherParser.g:1133:3: this_Create_0= ruleCreate
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUpdatingClauseAccess().getCreateParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Create_0=ruleCreate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Create_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:1145:3: this_Merge_1= ruleMerge
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUpdatingClauseAccess().getMergeParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Merge_1=ruleMerge();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Merge_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:1157:3: this_Foreach_2= ruleForeach
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUpdatingClauseAccess().getForeachParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Foreach_2=ruleForeach();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Foreach_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:1169:3: this_Delete_3= ruleDelete
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUpdatingClauseAccess().getDeleteParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Delete_3=ruleDelete();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Delete_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:1181:3: this_Set_4= ruleSet
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUpdatingClauseAccess().getSetParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Set_4=ruleSet();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Set_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalCypherParser.g:1193:3: this_Remove_5= ruleRemove
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUpdatingClauseAccess().getRemoveParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Remove_5=ruleRemove();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Remove_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUpdatingClause"


    // $ANTLR start "entryRuleReadingClause"
    // InternalCypherParser.g:1208:1: entryRuleReadingClause returns [EObject current=null] : iv_ruleReadingClause= ruleReadingClause EOF ;
    public final EObject entryRuleReadingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReadingClause = null;


        try {
            // InternalCypherParser.g:1208:54: (iv_ruleReadingClause= ruleReadingClause EOF )
            // InternalCypherParser.g:1209:2: iv_ruleReadingClause= ruleReadingClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReadingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReadingClause=ruleReadingClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReadingClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReadingClause"


    // $ANTLR start "ruleReadingClause"
    // InternalCypherParser.g:1215:1: ruleReadingClause returns [EObject current=null] : (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_InQueryCall_4= ruleInQueryCall ) ;
    public final EObject ruleReadingClause() throws RecognitionException {
        EObject current = null;

        EObject this_LoadCSV_0 = null;

        EObject this_Start_1 = null;

        EObject this_Match_2 = null;

        EObject this_Unwind_3 = null;

        EObject this_InQueryCall_4 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1221:2: ( (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_InQueryCall_4= ruleInQueryCall ) )
            // InternalCypherParser.g:1222:2: (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_InQueryCall_4= ruleInQueryCall )
            {
            // InternalCypherParser.g:1222:2: (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_InQueryCall_4= ruleInQueryCall )
            int alt23=5;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt23=1;
                }
                break;
            case START:
                {
                alt23=2;
                }
                break;
            case OPTIONAL:
            case MATCH:
                {
                alt23=3;
                }
                break;
            case UNWIND:
                {
                alt23=4;
                }
                break;
            case CALL:
                {
                alt23=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // InternalCypherParser.g:1223:3: this_LoadCSV_0= ruleLoadCSV
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getReadingClauseAccess().getLoadCSVParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LoadCSV_0=ruleLoadCSV();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LoadCSV_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:1235:3: this_Start_1= ruleStart
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getReadingClauseAccess().getStartParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Start_1=ruleStart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Start_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:1247:3: this_Match_2= ruleMatch
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getReadingClauseAccess().getMatchParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Match_2=ruleMatch();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Match_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:1259:3: this_Unwind_3= ruleUnwind
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getReadingClauseAccess().getUnwindParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Unwind_3=ruleUnwind();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Unwind_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:1271:3: this_InQueryCall_4= ruleInQueryCall
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getReadingClauseAccess().getInQueryCallParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_InQueryCall_4=ruleInQueryCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_InQueryCall_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReadingClause"


    // $ANTLR start "entryRuleCommand"
    // InternalCypherParser.g:1286:1: entryRuleCommand returns [EObject current=null] : iv_ruleCommand= ruleCommand EOF ;
    public final EObject entryRuleCommand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCommand = null;


        try {
            // InternalCypherParser.g:1286:48: (iv_ruleCommand= ruleCommand EOF )
            // InternalCypherParser.g:1287:2: iv_ruleCommand= ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCommand=ruleCommand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCommand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalCypherParser.g:1293:1: ruleCommand returns [EObject current=null] : (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint ) ;
    public final EObject ruleCommand() throws RecognitionException {
        EObject current = null;

        EObject this_CreateIndex_0 = null;

        EObject this_DropIndex_1 = null;

        EObject this_CreateUniqueConstraint_2 = null;

        EObject this_DropUniqueConstraint_3 = null;

        EObject this_CreateNodePropertyExistenceConstraint_4 = null;

        EObject this_DropNodePropertyExistenceConstraint_5 = null;

        EObject this_CreateRelationshipPropertyExistenceConstraint_6 = null;

        EObject this_DropRelationshipPropertyExistenceConstraint_7 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1299:2: ( (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint ) )
            // InternalCypherParser.g:1300:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )
            {
            // InternalCypherParser.g:1300:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )
            int alt24=8;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    // InternalCypherParser.g:1301:3: this_CreateIndex_0= ruleCreateIndex
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateIndex_0=ruleCreateIndex();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateIndex_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:1313:3: this_DropIndex_1= ruleDropIndex
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropIndex_1=ruleDropIndex();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropIndex_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:1325:3: this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateUniqueConstraint_2=ruleCreateUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateUniqueConstraint_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:1337:3: this_DropUniqueConstraint_3= ruleDropUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropUniqueConstraint_3=ruleDropUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropUniqueConstraint_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:1349:3: this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateNodePropertyExistenceConstraint_4=ruleCreateNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateNodePropertyExistenceConstraint_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalCypherParser.g:1361:3: this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropNodePropertyExistenceConstraint_5=ruleDropNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropNodePropertyExistenceConstraint_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalCypherParser.g:1373:3: this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateRelationshipPropertyExistenceConstraint_6=ruleCreateRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateRelationshipPropertyExistenceConstraint_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalCypherParser.g:1385:3: this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropRelationshipPropertyExistenceConstraint_7=ruleDropRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropRelationshipPropertyExistenceConstraint_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRuleCreateUniqueConstraint"
    // InternalCypherParser.g:1400:1: entryRuleCreateUniqueConstraint returns [EObject current=null] : iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF ;
    public final EObject entryRuleCreateUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateUniqueConstraint = null;


        try {
            // InternalCypherParser.g:1400:63: (iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF )
            // InternalCypherParser.g:1401:2: iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateUniqueConstraint=ruleCreateUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateUniqueConstraint"


    // $ANTLR start "ruleCreateUniqueConstraint"
    // InternalCypherParser.g:1407:1: ruleCreateUniqueConstraint returns [EObject current=null] : (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint ) ;
    public final EObject ruleCreateUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_UniqueConstraint_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1413:2: ( (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint ) )
            // InternalCypherParser.g:1414:2: (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint )
            {
            // InternalCypherParser.g:1414:2: (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint )
            // InternalCypherParser.g:1415:3: otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_UniqueConstraint_1=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UniqueConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateUniqueConstraint"


    // $ANTLR start "entryRuleCreateNodePropertyExistenceConstraint"
    // InternalCypherParser.g:1434:1: entryRuleCreateNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateNodePropertyExistenceConstraint = null;


        try {
            // InternalCypherParser.g:1434:78: (iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF )
            // InternalCypherParser.g:1435:2: iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateNodePropertyExistenceConstraint=ruleCreateNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "ruleCreateNodePropertyExistenceConstraint"
    // InternalCypherParser.g:1441:1: ruleCreateNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint ) ;
    public final EObject ruleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_NodePropertyExistenceConstraint_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1447:2: ( (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint ) )
            // InternalCypherParser.g:1448:2: (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint )
            {
            // InternalCypherParser.g:1448:2: (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint )
            // InternalCypherParser.g:1449:3: otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_NodePropertyExistenceConstraint_1=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_NodePropertyExistenceConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateRelationshipPropertyExistenceConstraint"
    // InternalCypherParser.g:1468:1: entryRuleCreateRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalCypherParser.g:1468:86: (iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF )
            // InternalCypherParser.g:1469:2: iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateRelationshipPropertyExistenceConstraint=ruleCreateRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleCreateRelationshipPropertyExistenceConstraint"
    // InternalCypherParser.g:1475:1: ruleCreateRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint ) ;
    public final EObject ruleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_RelationshipPropertyExistenceConstraint_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1481:2: ( (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint ) )
            // InternalCypherParser.g:1482:2: (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalCypherParser.g:1482:2: (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint )
            // InternalCypherParser.g:1483:3: otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_RelationshipPropertyExistenceConstraint_1=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationshipPropertyExistenceConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateIndex"
    // InternalCypherParser.g:1502:1: entryRuleCreateIndex returns [EObject current=null] : iv_ruleCreateIndex= ruleCreateIndex EOF ;
    public final EObject entryRuleCreateIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateIndex = null;


        try {
            // InternalCypherParser.g:1502:52: (iv_ruleCreateIndex= ruleCreateIndex EOF )
            // InternalCypherParser.g:1503:2: iv_ruleCreateIndex= ruleCreateIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateIndex=ruleCreateIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateIndex"


    // $ANTLR start "ruleCreateIndex"
    // InternalCypherParser.g:1509:1: ruleCreateIndex returns [EObject current=null] : (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) ) ;
    public final EObject ruleCreateIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1515:2: ( (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) ) )
            // InternalCypherParser.g:1516:2: (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) )
            {
            // InternalCypherParser.g:1516:2: (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) )
            // InternalCypherParser.g:1517:3: otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateIndexAccess().getCREATEKeyword_0());
              		
            }
            // InternalCypherParser.g:1521:3: ( (lv_index_1_0= ruleIndex ) )
            // InternalCypherParser.g:1522:4: (lv_index_1_0= ruleIndex )
            {
            // InternalCypherParser.g:1522:4: (lv_index_1_0= ruleIndex )
            // InternalCypherParser.g:1523:5: lv_index_1_0= ruleIndex
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_index_1_0=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateIndexRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.xtext.example.mydsl.Cypher.Index");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateIndex"


    // $ANTLR start "entryRuleDropUniqueConstraint"
    // InternalCypherParser.g:1544:1: entryRuleDropUniqueConstraint returns [EObject current=null] : iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF ;
    public final EObject entryRuleDropUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropUniqueConstraint = null;


        try {
            // InternalCypherParser.g:1544:61: (iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF )
            // InternalCypherParser.g:1545:2: iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropUniqueConstraint=ruleDropUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropUniqueConstraint"


    // $ANTLR start "ruleDropUniqueConstraint"
    // InternalCypherParser.g:1551:1: ruleDropUniqueConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) ) ;
    public final EObject ruleDropUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_uniqueConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1557:2: ( (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) ) )
            // InternalCypherParser.g:1558:2: (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) )
            {
            // InternalCypherParser.g:1558:2: (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) )
            // InternalCypherParser.g:1559:3: otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalCypherParser.g:1563:3: ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) )
            // InternalCypherParser.g:1564:4: (lv_uniqueConstraint_1_0= ruleUniqueConstraint )
            {
            // InternalCypherParser.g:1564:4: (lv_uniqueConstraint_1_0= ruleUniqueConstraint )
            // InternalCypherParser.g:1565:5: lv_uniqueConstraint_1_0= ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_uniqueConstraint_1_0=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropUniqueConstraintRule());
              					}
              					set(
              						current,
              						"uniqueConstraint",
              						lv_uniqueConstraint_1_0,
              						"org.xtext.example.mydsl.Cypher.UniqueConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropUniqueConstraint"


    // $ANTLR start "entryRuleDropNodePropertyExistenceConstraint"
    // InternalCypherParser.g:1586:1: entryRuleDropNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleDropNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropNodePropertyExistenceConstraint = null;


        try {
            // InternalCypherParser.g:1586:76: (iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF )
            // InternalCypherParser.g:1587:2: iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropNodePropertyExistenceConstraint=ruleDropNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropNodePropertyExistenceConstraint"


    // $ANTLR start "ruleDropNodePropertyExistenceConstraint"
    // InternalCypherParser.g:1593:1: ruleDropNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) ) ;
    public final EObject ruleDropNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_nodePropertyExistenceConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1599:2: ( (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) ) )
            // InternalCypherParser.g:1600:2: (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) )
            {
            // InternalCypherParser.g:1600:2: (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) )
            // InternalCypherParser.g:1601:3: otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalCypherParser.g:1605:3: ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) )
            // InternalCypherParser.g:1606:4: (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint )
            {
            // InternalCypherParser.g:1606:4: (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint )
            // InternalCypherParser.g:1607:5: lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_nodePropertyExistenceConstraint_1_0=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"nodePropertyExistenceConstraint",
              						lv_nodePropertyExistenceConstraint_1_0,
              						"org.xtext.example.mydsl.Cypher.NodePropertyExistenceConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropRelationshipPropertyExistenceConstraint"
    // InternalCypherParser.g:1628:1: entryRuleDropRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalCypherParser.g:1628:84: (iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF )
            // InternalCypherParser.g:1629:2: iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropRelationshipPropertyExistenceConstraint=ruleDropRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleDropRelationshipPropertyExistenceConstraint"
    // InternalCypherParser.g:1635:1: ruleDropRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) ) ;
    public final EObject ruleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_relationshipPropertyExistenceConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1641:2: ( (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) ) )
            // InternalCypherParser.g:1642:2: (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) )
            {
            // InternalCypherParser.g:1642:2: (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) )
            // InternalCypherParser.g:1643:3: otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalCypherParser.g:1647:3: ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) )
            // InternalCypherParser.g:1648:4: (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalCypherParser.g:1648:4: (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint )
            // InternalCypherParser.g:1649:5: lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_relationshipPropertyExistenceConstraint_1_0=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"relationshipPropertyExistenceConstraint",
              						lv_relationshipPropertyExistenceConstraint_1_0,
              						"org.xtext.example.mydsl.Cypher.RelationshipPropertyExistenceConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropIndex"
    // InternalCypherParser.g:1670:1: entryRuleDropIndex returns [EObject current=null] : iv_ruleDropIndex= ruleDropIndex EOF ;
    public final EObject entryRuleDropIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropIndex = null;


        try {
            // InternalCypherParser.g:1670:50: (iv_ruleDropIndex= ruleDropIndex EOF )
            // InternalCypherParser.g:1671:2: iv_ruleDropIndex= ruleDropIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropIndex=ruleDropIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropIndex"


    // $ANTLR start "ruleDropIndex"
    // InternalCypherParser.g:1677:1: ruleDropIndex returns [EObject current=null] : (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) ) ;
    public final EObject ruleDropIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1683:2: ( (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) ) )
            // InternalCypherParser.g:1684:2: (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) )
            {
            // InternalCypherParser.g:1684:2: (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) )
            // InternalCypherParser.g:1685:3: otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropIndexAccess().getDROPKeyword_0());
              		
            }
            // InternalCypherParser.g:1689:3: ( (lv_index_1_0= ruleIndex ) )
            // InternalCypherParser.g:1690:4: (lv_index_1_0= ruleIndex )
            {
            // InternalCypherParser.g:1690:4: (lv_index_1_0= ruleIndex )
            // InternalCypherParser.g:1691:5: lv_index_1_0= ruleIndex
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_index_1_0=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropIndexRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.xtext.example.mydsl.Cypher.Index");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropIndex"


    // $ANTLR start "entryRuleIndex"
    // InternalCypherParser.g:1712:1: entryRuleIndex returns [EObject current=null] : iv_ruleIndex= ruleIndex EOF ;
    public final EObject entryRuleIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIndex = null;


        try {
            // InternalCypherParser.g:1712:46: (iv_ruleIndex= ruleIndex EOF )
            // InternalCypherParser.g:1713:2: iv_ruleIndex= ruleIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIndex=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndex"


    // $ANTLR start "ruleIndex"
    // InternalCypherParser.g:1719:1: ruleIndex returns [EObject current=null] : (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_nodeLabel_2_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1725:2: ( (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis ) )
            // InternalCypherParser.g:1726:2: (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis )
            {
            // InternalCypherParser.g:1726:2: (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis )
            // InternalCypherParser.g:1727:3: otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,INDEX,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getINDEXKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIndexAccess().getONKeyword_1());
              		
            }
            // InternalCypherParser.g:1735:3: ( (lv_nodeLabel_2_0= ruleNodeLabel ) )
            // InternalCypherParser.g:1736:4: (lv_nodeLabel_2_0= ruleNodeLabel )
            {
            // InternalCypherParser.g:1736:4: (lv_nodeLabel_2_0= ruleNodeLabel )
            // InternalCypherParser.g:1737:5: lv_nodeLabel_2_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_nodeLabel_2_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_2_0,
              						"org.xtext.example.mydsl.Cypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3());
              		
            }
            // InternalCypherParser.g:1758:3: ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) )
            // InternalCypherParser.g:1759:4: (lv_propertyKeyName_4_0= rulePropertyKeyName )
            {
            // InternalCypherParser.g:1759:4: (lv_propertyKeyName_4_0= rulePropertyKeyName )
            // InternalCypherParser.g:1760:5: lv_propertyKeyName_4_0= rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_propertyKeyName_4_0=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexRule());
              					}
              					set(
              						current,
              						"propertyKeyName",
              						lv_propertyKeyName_4_0,
              						"org.xtext.example.mydsl.Cypher.PropertyKeyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getIndexAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndex"


    // $ANTLR start "entryRuleUniqueConstraint"
    // InternalCypherParser.g:1785:1: entryRuleUniqueConstraint returns [EObject current=null] : iv_ruleUniqueConstraint= ruleUniqueConstraint EOF ;
    public final EObject entryRuleUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUniqueConstraint = null;


        try {
            // InternalCypherParser.g:1785:57: (iv_ruleUniqueConstraint= ruleUniqueConstraint EOF )
            // InternalCypherParser.g:1786:2: iv_ruleUniqueConstraint= ruleUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUniqueConstraint=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUniqueConstraint"


    // $ANTLR start "ruleUniqueConstraint"
    // InternalCypherParser.g:1792:1: ruleUniqueConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE ) ;
    public final EObject ruleUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_variable_3_0 = null;

        EObject lv_nodeLabel_4_0 = null;

        EObject lv_propertyExpression_7_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1798:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE ) )
            // InternalCypherParser.g:1799:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE )
            {
            // InternalCypherParser.g:1799:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE )
            // InternalCypherParser.g:1800:3: otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUniqueConstraintAccess().getONKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalCypherParser.g:1812:3: ( (lv_variable_3_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:1813:4: (lv_variable_3_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:1813:4: (lv_variable_3_0= ruleVariableDeclaration )
            // InternalCypherParser.g:1814:5: lv_variable_3_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_variable_3_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:1831:3: ( (lv_nodeLabel_4_0= ruleNodeLabel ) )
            // InternalCypherParser.g:1832:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            {
            // InternalCypherParser.g:1832:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            // InternalCypherParser.g:1833:5: lv_nodeLabel_4_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_nodeLabel_4_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_4_0,
              						"org.xtext.example.mydsl.Cypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,ASSERT,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6());
              		
            }
            // InternalCypherParser.g:1858:3: ( (lv_propertyExpression_7_0= rulePropertyExpression ) )
            // InternalCypherParser.g:1859:4: (lv_propertyExpression_7_0= rulePropertyExpression )
            {
            // InternalCypherParser.g:1859:4: (lv_propertyExpression_7_0= rulePropertyExpression )
            // InternalCypherParser.g:1860:5: lv_propertyExpression_7_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_29);
            lv_propertyExpression_7_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_7_0,
              						"org.xtext.example.mydsl.Cypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,IS,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getUniqueConstraintAccess().getISKeyword_8());
              		
            }
            otherlv_9=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUniqueConstraint"


    // $ANTLR start "entryRuleNodePropertyExistenceConstraint"
    // InternalCypherParser.g:1889:1: entryRuleNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodePropertyExistenceConstraint = null;


        try {
            // InternalCypherParser.g:1889:72: (iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF )
            // InternalCypherParser.g:1890:2: iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodePropertyExistenceConstraint=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodePropertyExistenceConstraint"


    // $ANTLR start "ruleNodePropertyExistenceConstraint"
    // InternalCypherParser.g:1896:1: ruleNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis ) ;
    public final EObject ruleNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        EObject lv_variable_3_0 = null;

        EObject lv_nodeLabel_4_0 = null;

        EObject lv_propertyExpression_9_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:1902:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis ) )
            // InternalCypherParser.g:1903:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis )
            {
            // InternalCypherParser.g:1903:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis )
            // InternalCypherParser.g:1904:3: otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalCypherParser.g:1916:3: ( (lv_variable_3_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:1917:4: (lv_variable_3_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:1917:4: (lv_variable_3_0= ruleVariableDeclaration )
            // InternalCypherParser.g:1918:5: lv_variable_3_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_variable_3_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:1935:3: ( (lv_nodeLabel_4_0= ruleNodeLabel ) )
            // InternalCypherParser.g:1936:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            {
            // InternalCypherParser.g:1936:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            // InternalCypherParser.g:1937:5: lv_nodeLabel_4_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_nodeLabel_4_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_4_0,
              						"org.xtext.example.mydsl.Cypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,ASSERT,FOLLOW_31); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6());
              		
            }
            otherlv_7=(Token)match(input,EXISTS,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7());
              		
            }
            otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8());
              		
            }
            // InternalCypherParser.g:1970:3: ( (lv_propertyExpression_9_0= rulePropertyExpression ) )
            // InternalCypherParser.g:1971:4: (lv_propertyExpression_9_0= rulePropertyExpression )
            {
            // InternalCypherParser.g:1971:4: (lv_propertyExpression_9_0= rulePropertyExpression )
            // InternalCypherParser.g:1972:5: lv_propertyExpression_9_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_propertyExpression_9_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_9_0,
              						"org.xtext.example.mydsl.Cypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPropertyExistenceConstraint"
    // InternalCypherParser.g:1997:1: entryRuleRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalCypherParser.g:1997:80: (iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF )
            // InternalCypherParser.g:1998:2: iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPropertyExistenceConstraint=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleRelationshipPropertyExistenceConstraint"
    // InternalCypherParser.g:2004:1: ruleRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis ) ;
    public final EObject ruleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_relationshipPattern_2_0 = null;

        EObject lv_propertyExpression_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2010:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis ) )
            // InternalCypherParser.g:2011:2: (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis )
            {
            // InternalCypherParser.g:2011:2: (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis )
            // InternalCypherParser.g:2012:3: otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1());
              		
            }
            // InternalCypherParser.g:2020:3: ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) )
            // InternalCypherParser.g:2021:4: (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax )
            {
            // InternalCypherParser.g:2021:4: (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax )
            // InternalCypherParser.g:2022:5: lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_27);
            lv_relationshipPattern_2_0=ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"relationshipPattern",
              						lv_relationshipPattern_2_0,
              						"org.xtext.example.mydsl.Cypher.RelationshipPatternSyntax");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,ASSERT,FOLLOW_31); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,EXISTS,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5());
              		
            }
            // InternalCypherParser.g:2051:3: ( (lv_propertyExpression_6_0= rulePropertyExpression ) )
            // InternalCypherParser.g:2052:4: (lv_propertyExpression_6_0= rulePropertyExpression )
            {
            // InternalCypherParser.g:2052:4: (lv_propertyExpression_6_0= rulePropertyExpression )
            // InternalCypherParser.g:2053:5: lv_propertyExpression_6_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_propertyExpression_6_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_6_0,
              						"org.xtext.example.mydsl.Cypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPatternSyntax"
    // InternalCypherParser.g:2078:1: entryRuleRelationshipPatternSyntax returns [EObject current=null] : iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF ;
    public final EObject entryRuleRelationshipPatternSyntax() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPatternSyntax = null;


        try {
            // InternalCypherParser.g:2078:66: (iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF )
            // InternalCypherParser.g:2079:2: iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPatternSyntax=ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPatternSyntax; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPatternSyntax"


    // $ANTLR start "ruleRelationshipPatternSyntax"
    // InternalCypherParser.g:2085:1: ruleRelationshipPatternSyntax returns [EObject current=null] : (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis ) ;
    public final EObject ruleRelationshipPatternSyntax() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        AntlrDatatypeRuleToken lv_incoming_2_0 = null;

        EObject lv_variable_5_0 = null;

        AntlrDatatypeRuleToken lv_relType_6_0 = null;

        AntlrDatatypeRuleToken lv_outgoing_9_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2091:2: ( (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis ) )
            // InternalCypherParser.g:2092:2: (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis )
            {
            // InternalCypherParser.g:2092:2: (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis )
            // InternalCypherParser.g:2093:3: otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,RightParenthesis,FOLLOW_32); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1());
              		
            }
            // InternalCypherParser.g:2101:3: ( (lv_incoming_2_0= ruleLeftArrowHead ) )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LessThanSign) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // InternalCypherParser.g:2102:4: (lv_incoming_2_0= ruleLeftArrowHead )
                    {
                    // InternalCypherParser.g:2102:4: (lv_incoming_2_0= ruleLeftArrowHead )
                    // InternalCypherParser.g:2103:5: lv_incoming_2_0= ruleLeftArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_32);
                    lv_incoming_2_0=ruleLeftArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
                      					}
                      					set(
                      						current,
                      						"incoming",
                      						lv_incoming_2_0 != null,
                      						"org.xtext.example.mydsl.Cypher.LeftArrowHead");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_33);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4());
              		
            }
            // InternalCypherParser.g:2134:3: ( (lv_variable_5_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:2135:4: (lv_variable_5_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:2135:4: (lv_variable_5_0= ruleVariableDeclaration )
            // InternalCypherParser.g:2136:5: lv_variable_5_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_variable_5_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_5_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:2153:3: ( (lv_relType_6_0= ruleRelType ) )
            // InternalCypherParser.g:2154:4: (lv_relType_6_0= ruleRelType )
            {
            // InternalCypherParser.g:2154:4: (lv_relType_6_0= ruleRelType )
            // InternalCypherParser.g:2155:5: lv_relType_6_0= ruleRelType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_34);
            lv_relType_6_0=ruleRelType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
              					}
              					set(
              						current,
              						"relType",
              						lv_relType_6_0,
              						"org.xtext.example.mydsl.Cypher.RelType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_32); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8());
              		
            }
            pushFollow(FOLLOW_35);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:2186:3: ( (lv_outgoing_9_0= ruleRightArrowHead ) )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==GreaterThanSign) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // InternalCypherParser.g:2187:4: (lv_outgoing_9_0= ruleRightArrowHead )
                    {
                    // InternalCypherParser.g:2187:4: (lv_outgoing_9_0= ruleRightArrowHead )
                    // InternalCypherParser.g:2188:5: lv_outgoing_9_0= ruleRightArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0());
                      				
                    }
                    pushFollow(FOLLOW_25);
                    lv_outgoing_9_0=ruleRightArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
                      					}
                      					set(
                      						current,
                      						"outgoing",
                      						lv_outgoing_9_0 != null,
                      						"org.xtext.example.mydsl.Cypher.RightArrowHead");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_10=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10());
              		
            }
            otherlv_11=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPatternSyntax"


    // $ANTLR start "entryRuleLoadCSV"
    // InternalCypherParser.g:2217:1: entryRuleLoadCSV returns [EObject current=null] : iv_ruleLoadCSV= ruleLoadCSV EOF ;
    public final EObject entryRuleLoadCSV() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoadCSV = null;


        try {
            // InternalCypherParser.g:2217:48: (iv_ruleLoadCSV= ruleLoadCSV EOF )
            // InternalCypherParser.g:2218:2: iv_ruleLoadCSV= ruleLoadCSV EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSV=ruleLoadCSV();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSV; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSV"


    // $ANTLR start "ruleLoadCSV"
    // InternalCypherParser.g:2224:1: ruleLoadCSV returns [EObject current=null] : ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? ) ;
    public final EObject ruleLoadCSV() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token lv_fieldterminator_9_0=null;
        AntlrDatatypeRuleToken lv_withHeaders_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject lv_variable_7_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2230:2: ( ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? ) )
            // InternalCypherParser.g:2231:2: ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? )
            {
            // InternalCypherParser.g:2231:2: ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? )
            // InternalCypherParser.g:2232:3: () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )?
            {
            // InternalCypherParser.g:2232:3: ()
            // InternalCypherParser.g:2233:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLoadCSVAccess().getLoadCSVAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LOAD,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getLoadCSVAccess().getLOADKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,CSV,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getLoadCSVAccess().getCSVKeyword_2());
              		
            }
            // InternalCypherParser.g:2250:3: ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==WITH) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // InternalCypherParser.g:2251:4: (lv_withHeaders_3_0= ruleLoadCSVWithHeaders )
                    {
                    // InternalCypherParser.g:2251:4: (lv_withHeaders_3_0= ruleLoadCSVWithHeaders )
                    // InternalCypherParser.g:2252:5: lv_withHeaders_3_0= ruleLoadCSVWithHeaders
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_38);
                    lv_withHeaders_3_0=ruleLoadCSVWithHeaders();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
                      					}
                      					set(
                      						current,
                      						"withHeaders",
                      						lv_withHeaders_3_0 != null,
                      						"org.xtext.example.mydsl.Cypher.LoadCSVWithHeaders");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,FROM,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getLoadCSVAccess().getFROMKeyword_4());
              		
            }
            // InternalCypherParser.g:2273:3: ( (lv_expression_5_0= ruleExpression ) )
            // InternalCypherParser.g:2274:4: (lv_expression_5_0= ruleExpression )
            {
            // InternalCypherParser.g:2274:4: (lv_expression_5_0= ruleExpression )
            // InternalCypherParser.g:2275:5: lv_expression_5_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_expression_5_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getLoadCSVAccess().getASKeyword_6());
              		
            }
            // InternalCypherParser.g:2296:3: ( (lv_variable_7_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:2297:4: (lv_variable_7_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:2297:4: (lv_variable_7_0= ruleVariableDeclaration )
            // InternalCypherParser.g:2298:5: lv_variable_7_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_41);
            lv_variable_7_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_7_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:2315:3: (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==FIELDTERMINATOR) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // InternalCypherParser.g:2316:4: otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) )
                    {
                    otherlv_8=(Token)match(input,FIELDTERMINATOR,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0());
                      			
                    }
                    // InternalCypherParser.g:2320:4: ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) )
                    // InternalCypherParser.g:2321:5: (lv_fieldterminator_9_0= RULE_STRING_LITERAL )
                    {
                    // InternalCypherParser.g:2321:5: (lv_fieldterminator_9_0= RULE_STRING_LITERAL )
                    // InternalCypherParser.g:2322:6: lv_fieldterminator_9_0= RULE_STRING_LITERAL
                    {
                    lv_fieldterminator_9_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_fieldterminator_9_0, grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLoadCSVRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"fieldterminator",
                      							lv_fieldterminator_9_0,
                      							"org.xtext.example.mydsl.Cypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSV"


    // $ANTLR start "entryRuleLoadCSVWithHeaders"
    // InternalCypherParser.g:2343:1: entryRuleLoadCSVWithHeaders returns [String current=null] : iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF ;
    public final String entryRuleLoadCSVWithHeaders() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLoadCSVWithHeaders = null;


        try {
            // InternalCypherParser.g:2343:58: (iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF )
            // InternalCypherParser.g:2344:2: iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSVWithHeaders=ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSVWithHeaders.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSVWithHeaders"


    // $ANTLR start "ruleLoadCSVWithHeaders"
    // InternalCypherParser.g:2350:1: ruleLoadCSVWithHeaders returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= WITH kw= HEADERS ) ;
    public final AntlrDatatypeRuleToken ruleLoadCSVWithHeaders() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalCypherParser.g:2356:2: ( (kw= WITH kw= HEADERS ) )
            // InternalCypherParser.g:2357:2: (kw= WITH kw= HEADERS )
            {
            // InternalCypherParser.g:2357:2: (kw= WITH kw= HEADERS )
            // InternalCypherParser.g:2358:3: kw= WITH kw= HEADERS
            {
            kw=(Token)match(input,WITH,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0());
              		
            }
            kw=(Token)match(input,HEADERS,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSVWithHeaders"


    // $ANTLR start "entryRuleMatch"
    // InternalCypherParser.g:2372:1: entryRuleMatch returns [EObject current=null] : iv_ruleMatch= ruleMatch EOF ;
    public final EObject entryRuleMatch() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatch = null;


        try {
            // InternalCypherParser.g:2372:46: (iv_ruleMatch= ruleMatch EOF )
            // InternalCypherParser.g:2373:2: iv_ruleMatch= ruleMatch EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatchRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatch=ruleMatch();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatch; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatch"


    // $ANTLR start "ruleMatch"
    // InternalCypherParser.g:2379:1: ruleMatch returns [EObject current=null] : ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? ) ;
    public final EObject ruleMatch() throws RecognitionException {
        EObject current = null;

        Token lv_optional_0_0=null;
        Token otherlv_1=null;
        EObject lv_pattern_2_0 = null;

        EObject lv_hints_3_0 = null;

        EObject lv_where_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2385:2: ( ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? ) )
            // InternalCypherParser.g:2386:2: ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? )
            {
            // InternalCypherParser.g:2386:2: ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? )
            // InternalCypherParser.g:2387:3: ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )?
            {
            // InternalCypherParser.g:2387:3: ( (lv_optional_0_0= OPTIONAL ) )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==OPTIONAL) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // InternalCypherParser.g:2388:4: (lv_optional_0_0= OPTIONAL )
                    {
                    // InternalCypherParser.g:2388:4: (lv_optional_0_0= OPTIONAL )
                    // InternalCypherParser.g:2389:5: lv_optional_0_0= OPTIONAL
                    {
                    lv_optional_0_0=(Token)match(input,OPTIONAL,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_0_0, grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getMatchRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_0_0 != null, "OPTIONAL");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,MATCH,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMatchAccess().getMATCHKeyword_1());
              		
            }
            // InternalCypherParser.g:2405:3: ( (lv_pattern_2_0= rulePattern ) )
            // InternalCypherParser.g:2406:4: (lv_pattern_2_0= rulePattern )
            {
            // InternalCypherParser.g:2406:4: (lv_pattern_2_0= rulePattern )
            // InternalCypherParser.g:2407:5: lv_pattern_2_0= rulePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_46);
            lv_pattern_2_0=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMatchRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_2_0,
              						"org.xtext.example.mydsl.Cypher.Pattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:2424:3: ( (lv_hints_3_0= ruleHint ) )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==USING) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // InternalCypherParser.g:2425:4: (lv_hints_3_0= ruleHint )
            	    {
            	    // InternalCypherParser.g:2425:4: (lv_hints_3_0= ruleHint )
            	    // InternalCypherParser.g:2426:5: lv_hints_3_0= ruleHint
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_46);
            	    lv_hints_3_0=ruleHint();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMatchRule());
            	      					}
            	      					add(
            	      						current,
            	      						"hints",
            	      						lv_hints_3_0,
            	      						"org.xtext.example.mydsl.Cypher.Hint");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            // InternalCypherParser.g:2443:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==WHERE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // InternalCypherParser.g:2444:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalCypherParser.g:2444:4: (lv_where_4_0= ruleWhere )
                    // InternalCypherParser.g:2445:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMatchRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.xtext.example.mydsl.Cypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatch"


    // $ANTLR start "entryRuleUnwind"
    // InternalCypherParser.g:2466:1: entryRuleUnwind returns [EObject current=null] : iv_ruleUnwind= ruleUnwind EOF ;
    public final EObject entryRuleUnwind() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnwind = null;


        try {
            // InternalCypherParser.g:2466:47: (iv_ruleUnwind= ruleUnwind EOF )
            // InternalCypherParser.g:2467:2: iv_ruleUnwind= ruleUnwind EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnwindRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnwind=ruleUnwind();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnwind; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnwind"


    // $ANTLR start "ruleUnwind"
    // InternalCypherParser.g:2473:1: ruleUnwind returns [EObject current=null] : (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) ) ;
    public final EObject ruleUnwind() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_variable_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2479:2: ( (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) ) )
            // InternalCypherParser.g:2480:2: (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) )
            {
            // InternalCypherParser.g:2480:2: (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) )
            // InternalCypherParser.g:2481:3: otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) )
            {
            otherlv_0=(Token)match(input,UNWIND,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnwindAccess().getUNWINDKeyword_0());
              		
            }
            // InternalCypherParser.g:2485:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalCypherParser.g:2486:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalCypherParser.g:2486:4: (lv_expression_1_0= ruleExpression )
            // InternalCypherParser.g:2487:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnwindRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnwindAccess().getASKeyword_2());
              		
            }
            // InternalCypherParser.g:2508:3: ( (lv_variable_3_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:2509:4: (lv_variable_3_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:2509:4: (lv_variable_3_0= ruleVariableDeclaration )
            // InternalCypherParser.g:2510:5: lv_variable_3_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_variable_3_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnwindRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnwind"


    // $ANTLR start "entryRuleMerge"
    // InternalCypherParser.g:2531:1: entryRuleMerge returns [EObject current=null] : iv_ruleMerge= ruleMerge EOF ;
    public final EObject entryRuleMerge() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMerge = null;


        try {
            // InternalCypherParser.g:2531:46: (iv_ruleMerge= ruleMerge EOF )
            // InternalCypherParser.g:2532:2: iv_ruleMerge= ruleMerge EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMergeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMerge=ruleMerge();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMerge; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMerge"


    // $ANTLR start "ruleMerge"
    // InternalCypherParser.g:2538:1: ruleMerge returns [EObject current=null] : (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* ) ;
    public final EObject ruleMerge() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_patternPart_1_0 = null;

        EObject lv_mergeActions_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2544:2: ( (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* ) )
            // InternalCypherParser.g:2545:2: (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* )
            {
            // InternalCypherParser.g:2545:2: (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* )
            // InternalCypherParser.g:2546:3: otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )*
            {
            otherlv_0=(Token)match(input,MERGE,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMergeAccess().getMERGEKeyword_0());
              		
            }
            // InternalCypherParser.g:2550:3: ( (lv_patternPart_1_0= rulePatternPart ) )
            // InternalCypherParser.g:2551:4: (lv_patternPart_1_0= rulePatternPart )
            {
            // InternalCypherParser.g:2551:4: (lv_patternPart_1_0= rulePatternPart )
            // InternalCypherParser.g:2552:5: lv_patternPart_1_0= rulePatternPart
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_patternPart_1_0=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMergeRule());
              					}
              					set(
              						current,
              						"patternPart",
              						lv_patternPart_1_0,
              						"org.xtext.example.mydsl.Cypher.PatternPart");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:2569:3: ( (lv_mergeActions_2_0= ruleMergeAction ) )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==ON) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // InternalCypherParser.g:2570:4: (lv_mergeActions_2_0= ruleMergeAction )
            	    {
            	    // InternalCypherParser.g:2570:4: (lv_mergeActions_2_0= ruleMergeAction )
            	    // InternalCypherParser.g:2571:5: lv_mergeActions_2_0= ruleMergeAction
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_mergeActions_2_0=ruleMergeAction();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMergeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"mergeActions",
            	      						lv_mergeActions_2_0,
            	      						"org.xtext.example.mydsl.Cypher.MergeAction");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMerge"


    // $ANTLR start "entryRuleMergeAction"
    // InternalCypherParser.g:2592:1: entryRuleMergeAction returns [EObject current=null] : iv_ruleMergeAction= ruleMergeAction EOF ;
    public final EObject entryRuleMergeAction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMergeAction = null;


        try {
            // InternalCypherParser.g:2592:52: (iv_ruleMergeAction= ruleMergeAction EOF )
            // InternalCypherParser.g:2593:2: iv_ruleMergeAction= ruleMergeAction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMergeActionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMergeAction=ruleMergeAction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMergeAction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMergeAction"


    // $ANTLR start "ruleMergeAction"
    // InternalCypherParser.g:2599:1: ruleMergeAction returns [EObject current=null] : (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) ) ;
    public final EObject ruleMergeAction() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_action_1_1=null;
        Token lv_action_1_2=null;
        EObject lv_set_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2605:2: ( (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) ) )
            // InternalCypherParser.g:2606:2: (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) )
            {
            // InternalCypherParser.g:2606:2: (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) )
            // InternalCypherParser.g:2607:3: otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) )
            {
            otherlv_0=(Token)match(input,ON,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMergeActionAccess().getONKeyword_0());
              		
            }
            // InternalCypherParser.g:2611:3: ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) )
            // InternalCypherParser.g:2612:4: ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) )
            {
            // InternalCypherParser.g:2612:4: ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) )
            // InternalCypherParser.g:2613:5: (lv_action_1_1= MATCH | lv_action_1_2= CREATE )
            {
            // InternalCypherParser.g:2613:5: (lv_action_1_1= MATCH | lv_action_1_2= CREATE )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==MATCH) ) {
                alt33=1;
            }
            else if ( (LA33_0==CREATE) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // InternalCypherParser.g:2614:6: lv_action_1_1= MATCH
                    {
                    lv_action_1_1=(Token)match(input,MATCH,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_action_1_1, grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getMergeActionRule());
                      						}
                      						setWithLastConsumed(current, "action", lv_action_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:2625:6: lv_action_1_2= CREATE
                    {
                    lv_action_1_2=(Token)match(input,CREATE,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_action_1_2, grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getMergeActionRule());
                      						}
                      						setWithLastConsumed(current, "action", lv_action_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalCypherParser.g:2638:3: ( (lv_set_2_0= ruleSet ) )
            // InternalCypherParser.g:2639:4: (lv_set_2_0= ruleSet )
            {
            // InternalCypherParser.g:2639:4: (lv_set_2_0= ruleSet )
            // InternalCypherParser.g:2640:5: lv_set_2_0= ruleSet
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_set_2_0=ruleSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMergeActionRule());
              					}
              					set(
              						current,
              						"set",
              						lv_set_2_0,
              						"org.xtext.example.mydsl.Cypher.Set");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMergeAction"


    // $ANTLR start "entryRuleCreate"
    // InternalCypherParser.g:2661:1: entryRuleCreate returns [EObject current=null] : iv_ruleCreate= ruleCreate EOF ;
    public final EObject entryRuleCreate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreate = null;


        try {
            // InternalCypherParser.g:2661:47: (iv_ruleCreate= ruleCreate EOF )
            // InternalCypherParser.g:2662:2: iv_ruleCreate= ruleCreate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreate=ruleCreate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreate"


    // $ANTLR start "ruleCreate"
    // InternalCypherParser.g:2668:1: ruleCreate returns [EObject current=null] : (otherlv_0= CREATE ( (lv_uniqueContraint_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) ) ;
    public final EObject ruleCreate() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_uniqueContraint_1_0=null;
        EObject lv_pattern_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2674:2: ( (otherlv_0= CREATE ( (lv_uniqueContraint_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) ) )
            // InternalCypherParser.g:2675:2: (otherlv_0= CREATE ( (lv_uniqueContraint_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) )
            {
            // InternalCypherParser.g:2675:2: (otherlv_0= CREATE ( (lv_uniqueContraint_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) )
            // InternalCypherParser.g:2676:3: otherlv_0= CREATE ( (lv_uniqueContraint_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateAccess().getCREATEKeyword_0());
              		
            }
            // InternalCypherParser.g:2680:3: ( (lv_uniqueContraint_1_0= UNIQUE ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==UNIQUE) ) {
                int LA34_1 = input.LA(2);

                if ( ((LA34_1>=ALLSHORTESTPATHS && LA34_1<=WHERE)||(LA34_1>=CASE && LA34_1<=XOR)||(LA34_1>=AS && LA34_1<=OR)||LA34_1==LeftParenthesis||LA34_1==RULE_ID) ) {
                    alt34=1;
                }
            }
            switch (alt34) {
                case 1 :
                    // InternalCypherParser.g:2681:4: (lv_uniqueContraint_1_0= UNIQUE )
                    {
                    // InternalCypherParser.g:2681:4: (lv_uniqueContraint_1_0= UNIQUE )
                    // InternalCypherParser.g:2682:5: lv_uniqueContraint_1_0= UNIQUE
                    {
                    lv_uniqueContraint_1_0=(Token)match(input,UNIQUE,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_uniqueContraint_1_0, grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getCreateRule());
                      					}
                      					setWithLastConsumed(current, "uniqueContraint", lv_uniqueContraint_1_0 != null, "UNIQUE");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:2694:3: ( (lv_pattern_2_0= rulePattern ) )
            // InternalCypherParser.g:2695:4: (lv_pattern_2_0= rulePattern )
            {
            // InternalCypherParser.g:2695:4: (lv_pattern_2_0= rulePattern )
            // InternalCypherParser.g:2696:5: lv_pattern_2_0= rulePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_pattern_2_0=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_2_0,
              						"org.xtext.example.mydsl.Cypher.Pattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreate"


    // $ANTLR start "entryRuleSet"
    // InternalCypherParser.g:2717:1: entryRuleSet returns [EObject current=null] : iv_ruleSet= ruleSet EOF ;
    public final EObject entryRuleSet() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSet = null;


        try {
            // InternalCypherParser.g:2717:44: (iv_ruleSet= ruleSet EOF )
            // InternalCypherParser.g:2718:2: iv_ruleSet= ruleSet EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSet=ruleSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSet; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSet"


    // $ANTLR start "ruleSet"
    // InternalCypherParser.g:2724:1: ruleSet returns [EObject current=null] : (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* ) ;
    public final EObject ruleSet() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_setItems_1_0 = null;

        EObject lv_setItems_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2730:2: ( (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* ) )
            // InternalCypherParser.g:2731:2: (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* )
            {
            // InternalCypherParser.g:2731:2: (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* )
            // InternalCypherParser.g:2732:3: otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )*
            {
            otherlv_0=(Token)match(input,SET,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSetAccess().getSETKeyword_0());
              		
            }
            // InternalCypherParser.g:2736:3: ( (lv_setItems_1_0= ruleSetItem ) )
            // InternalCypherParser.g:2737:4: (lv_setItems_1_0= ruleSetItem )
            {
            // InternalCypherParser.g:2737:4: (lv_setItems_1_0= ruleSetItem )
            // InternalCypherParser.g:2738:5: lv_setItems_1_0= ruleSetItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_setItems_1_0=ruleSetItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSetRule());
              					}
              					add(
              						current,
              						"setItems",
              						lv_setItems_1_0,
              						"org.xtext.example.mydsl.Cypher.SetItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:2755:3: (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==Comma) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // InternalCypherParser.g:2756:4: otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getSetAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalCypherParser.g:2760:4: ( (lv_setItems_3_0= ruleSetItem ) )
            	    // InternalCypherParser.g:2761:5: (lv_setItems_3_0= ruleSetItem )
            	    {
            	    // InternalCypherParser.g:2761:5: (lv_setItems_3_0= ruleSetItem )
            	    // InternalCypherParser.g:2762:6: lv_setItems_3_0= ruleSetItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_setItems_3_0=ruleSetItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSetRule());
            	      						}
            	      						add(
            	      							current,
            	      							"setItems",
            	      							lv_setItems_3_0,
            	      							"org.xtext.example.mydsl.Cypher.SetItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSet"


    // $ANTLR start "entryRuleSetItem"
    // InternalCypherParser.g:2784:1: entryRuleSetItem returns [EObject current=null] : iv_ruleSetItem= ruleSetItem EOF ;
    public final EObject entryRuleSetItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSetItem = null;


        try {
            // InternalCypherParser.g:2784:48: (iv_ruleSetItem= ruleSetItem EOF )
            // InternalCypherParser.g:2785:2: iv_ruleSetItem= ruleSetItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSetItem=ruleSetItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSetItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSetItem"


    // $ANTLR start "ruleSetItem"
    // InternalCypherParser.g:2791:1: ruleSetItem returns [EObject current=null] : ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] ) ) ;
    public final EObject ruleSetItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        EObject lv_propertyExpression_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_variable_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject lv_variable_6_0 = null;

        EObject lv_expression_8_0 = null;

        EObject lv_variable_9_0 = null;

        EObject this_NodeLabels_10 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2797:2: ( ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] ) ) )
            // InternalCypherParser.g:2798:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] ) )
            {
            // InternalCypherParser.g:2798:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] ) )
            int alt36=4;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // InternalCypherParser.g:2799:3: ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) )
                    {
                    // InternalCypherParser.g:2799:3: ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) )
                    // InternalCypherParser.g:2800:4: ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) )
                    {
                    // InternalCypherParser.g:2800:4: ( (lv_propertyExpression_0_0= rulePropertyExpression ) )
                    // InternalCypherParser.g:2801:5: (lv_propertyExpression_0_0= rulePropertyExpression )
                    {
                    // InternalCypherParser.g:2801:5: (lv_propertyExpression_0_0= rulePropertyExpression )
                    // InternalCypherParser.g:2802:6: lv_propertyExpression_0_0= rulePropertyExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_propertyExpression_0_0=rulePropertyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"propertyExpression",
                      							lv_propertyExpression_0_0,
                      							"org.xtext.example.mydsl.Cypher.PropertyExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1());
                      			
                    }
                    // InternalCypherParser.g:2823:4: ( (lv_expression_2_0= ruleExpression ) )
                    // InternalCypherParser.g:2824:5: (lv_expression_2_0= ruleExpression )
                    {
                    // InternalCypherParser.g:2824:5: (lv_expression_2_0= ruleExpression )
                    // InternalCypherParser.g:2825:6: lv_expression_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:2844:3: ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) )
                    {
                    // InternalCypherParser.g:2844:3: ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) )
                    // InternalCypherParser.g:2845:4: ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) )
                    {
                    // InternalCypherParser.g:2845:4: ( (lv_variable_3_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:2846:5: (lv_variable_3_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:2846:5: (lv_variable_3_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:2847:6: lv_variable_3_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_variable_3_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_3_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1());
                      			
                    }
                    // InternalCypherParser.g:2868:4: ( (lv_expression_5_0= ruleExpression ) )
                    // InternalCypherParser.g:2869:5: (lv_expression_5_0= ruleExpression )
                    {
                    // InternalCypherParser.g:2869:5: (lv_expression_5_0= ruleExpression )
                    // InternalCypherParser.g:2870:6: lv_expression_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:2889:3: ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) )
                    {
                    // InternalCypherParser.g:2889:3: ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) )
                    // InternalCypherParser.g:2890:4: ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) )
                    {
                    // InternalCypherParser.g:2890:4: ( (lv_variable_6_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:2891:5: (lv_variable_6_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:2891:5: (lv_variable_6_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:2892:6: lv_variable_6_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_51);
                    lv_variable_6_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_6_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_7=(Token)match(input,PlusSignEqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1());
                      			
                    }
                    // InternalCypherParser.g:2913:4: ( (lv_expression_8_0= ruleExpression ) )
                    // InternalCypherParser.g:2914:5: (lv_expression_8_0= ruleExpression )
                    {
                    // InternalCypherParser.g:2914:5: (lv_expression_8_0= ruleExpression )
                    // InternalCypherParser.g:2915:6: lv_expression_8_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_8_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_8_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:2934:3: ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] )
                    {
                    // InternalCypherParser.g:2934:3: ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] )
                    // InternalCypherParser.g:2935:4: ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current]
                    {
                    // InternalCypherParser.g:2935:4: ( (lv_variable_9_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:2936:5: (lv_variable_9_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:2936:5: (lv_variable_9_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:2937:6: lv_variable_9_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_24);
                    lv_variable_9_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_9_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getSetItemRule());
                      				}
                      				newCompositeNode(grammarAccess.getSetItemAccess().getNodeLabelsParserRuleCall_3_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NodeLabels_10=ruleNodeLabels(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_NodeLabels_10;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSetItem"


    // $ANTLR start "entryRuleDelete"
    // InternalCypherParser.g:2973:1: entryRuleDelete returns [EObject current=null] : iv_ruleDelete= ruleDelete EOF ;
    public final EObject entryRuleDelete() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDelete = null;


        try {
            // InternalCypherParser.g:2973:47: (iv_ruleDelete= ruleDelete EOF )
            // InternalCypherParser.g:2974:2: iv_ruleDelete= ruleDelete EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDeleteRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDelete=ruleDelete();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDelete; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDelete"


    // $ANTLR start "ruleDelete"
    // InternalCypherParser.g:2980:1: ruleDelete returns [EObject current=null] : ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* ) ;
    public final EObject ruleDelete() throws RecognitionException {
        EObject current = null;

        Token lv_detach_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expressions_2_0 = null;

        EObject lv_expressions_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:2986:2: ( ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* ) )
            // InternalCypherParser.g:2987:2: ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )
            {
            // InternalCypherParser.g:2987:2: ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )
            // InternalCypherParser.g:2988:3: ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
            {
            // InternalCypherParser.g:2988:3: ( (lv_detach_0_0= DETACH ) )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DETACH) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // InternalCypherParser.g:2989:4: (lv_detach_0_0= DETACH )
                    {
                    // InternalCypherParser.g:2989:4: (lv_detach_0_0= DETACH )
                    // InternalCypherParser.g:2990:5: lv_detach_0_0= DETACH
                    {
                    lv_detach_0_0=(Token)match(input,DETACH,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_detach_0_0, grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDeleteRule());
                      					}
                      					setWithLastConsumed(current, "detach", lv_detach_0_0 != null, "DETACH");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,DELETE,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDeleteAccess().getDELETEKeyword_1());
              		
            }
            // InternalCypherParser.g:3006:3: ( (lv_expressions_2_0= ruleExpression ) )
            // InternalCypherParser.g:3007:4: (lv_expressions_2_0= ruleExpression )
            {
            // InternalCypherParser.g:3007:4: (lv_expressions_2_0= ruleExpression )
            // InternalCypherParser.g:3008:5: lv_expressions_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_expressions_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDeleteRule());
              					}
              					add(
              						current,
              						"expressions",
              						lv_expressions_2_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:3025:3: (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==Comma) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // InternalCypherParser.g:3026:4: otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getDeleteAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalCypherParser.g:3030:4: ( (lv_expressions_4_0= ruleExpression ) )
            	    // InternalCypherParser.g:3031:5: (lv_expressions_4_0= ruleExpression )
            	    {
            	    // InternalCypherParser.g:3031:5: (lv_expressions_4_0= ruleExpression )
            	    // InternalCypherParser.g:3032:6: lv_expressions_4_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_expressions_4_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDeleteRule());
            	      						}
            	      						add(
            	      							current,
            	      							"expressions",
            	      							lv_expressions_4_0,
            	      							"org.xtext.example.mydsl.Cypher.Expression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDelete"


    // $ANTLR start "entryRuleRemove"
    // InternalCypherParser.g:3054:1: entryRuleRemove returns [EObject current=null] : iv_ruleRemove= ruleRemove EOF ;
    public final EObject entryRuleRemove() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRemove = null;


        try {
            // InternalCypherParser.g:3054:47: (iv_ruleRemove= ruleRemove EOF )
            // InternalCypherParser.g:3055:2: iv_ruleRemove= ruleRemove EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRemoveRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRemove=ruleRemove();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRemove; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRemove"


    // $ANTLR start "ruleRemove"
    // InternalCypherParser.g:3061:1: ruleRemove returns [EObject current=null] : (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* ) ;
    public final EObject ruleRemove() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_removeItems_1_0 = null;

        EObject lv_removeItems_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3067:2: ( (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* ) )
            // InternalCypherParser.g:3068:2: (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* )
            {
            // InternalCypherParser.g:3068:2: (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* )
            // InternalCypherParser.g:3069:3: otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )*
            {
            otherlv_0=(Token)match(input,REMOVE,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRemoveAccess().getREMOVEKeyword_0());
              		
            }
            // InternalCypherParser.g:3073:3: ( (lv_removeItems_1_0= ruleRemoveItem ) )
            // InternalCypherParser.g:3074:4: (lv_removeItems_1_0= ruleRemoveItem )
            {
            // InternalCypherParser.g:3074:4: (lv_removeItems_1_0= ruleRemoveItem )
            // InternalCypherParser.g:3075:5: lv_removeItems_1_0= ruleRemoveItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_removeItems_1_0=ruleRemoveItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRemoveRule());
              					}
              					add(
              						current,
              						"removeItems",
              						lv_removeItems_1_0,
              						"org.xtext.example.mydsl.Cypher.RemoveItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:3092:3: (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==Comma) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // InternalCypherParser.g:3093:4: otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getRemoveAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalCypherParser.g:3097:4: ( (lv_removeItems_3_0= ruleRemoveItem ) )
            	    // InternalCypherParser.g:3098:5: (lv_removeItems_3_0= ruleRemoveItem )
            	    {
            	    // InternalCypherParser.g:3098:5: (lv_removeItems_3_0= ruleRemoveItem )
            	    // InternalCypherParser.g:3099:6: lv_removeItems_3_0= ruleRemoveItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_removeItems_3_0=ruleRemoveItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRemoveRule());
            	      						}
            	      						add(
            	      							current,
            	      							"removeItems",
            	      							lv_removeItems_3_0,
            	      							"org.xtext.example.mydsl.Cypher.RemoveItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRemove"


    // $ANTLR start "entryRuleRemoveItem"
    // InternalCypherParser.g:3121:1: entryRuleRemoveItem returns [EObject current=null] : iv_ruleRemoveItem= ruleRemoveItem EOF ;
    public final EObject entryRuleRemoveItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRemoveItem = null;


        try {
            // InternalCypherParser.g:3121:51: (iv_ruleRemoveItem= ruleRemoveItem EOF )
            // InternalCypherParser.g:3122:2: iv_ruleRemoveItem= ruleRemoveItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRemoveItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRemoveItem=ruleRemoveItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRemoveItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRemoveItem"


    // $ANTLR start "ruleRemoveItem"
    // InternalCypherParser.g:3128:1: ruleRemoveItem returns [EObject current=null] : ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) ) ;
    public final EObject ruleRemoveItem() throws RecognitionException {
        EObject current = null;

        EObject lv_variable_1_0 = null;

        EObject this_NodeLabels_2 = null;

        EObject lv_propertyExpression_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3134:2: ( ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) ) )
            // InternalCypherParser.g:3135:2: ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) )
            {
            // InternalCypherParser.g:3135:2: ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) )
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // InternalCypherParser.g:3136:3: ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] )
                    {
                    // InternalCypherParser.g:3136:3: ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] )
                    // InternalCypherParser.g:3137:4: () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current]
                    {
                    // InternalCypherParser.g:3137:4: ()
                    // InternalCypherParser.g:3138:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:3147:4: ( (lv_variable_1_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:3148:5: (lv_variable_1_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:3148:5: (lv_variable_1_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:3149:6: lv_variable_1_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_24);
                    lv_variable_1_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_1_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getRemoveItemRule());
                      				}
                      				newCompositeNode(grammarAccess.getRemoveItemAccess().getNodeLabelsParserRuleCall_0_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NodeLabels_2=ruleNodeLabels(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_NodeLabels_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:3182:3: ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) )
                    {
                    // InternalCypherParser.g:3182:3: ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) )
                    // InternalCypherParser.g:3183:4: () ( (lv_propertyExpression_4_0= rulePropertyExpression ) )
                    {
                    // InternalCypherParser.g:3183:4: ()
                    // InternalCypherParser.g:3184:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:3193:4: ( (lv_propertyExpression_4_0= rulePropertyExpression ) )
                    // InternalCypherParser.g:3194:5: (lv_propertyExpression_4_0= rulePropertyExpression )
                    {
                    // InternalCypherParser.g:3194:5: (lv_propertyExpression_4_0= rulePropertyExpression )
                    // InternalCypherParser.g:3195:6: lv_propertyExpression_4_0= rulePropertyExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_propertyExpression_4_0=rulePropertyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"propertyExpression",
                      							lv_propertyExpression_4_0,
                      							"org.xtext.example.mydsl.Cypher.PropertyExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRemoveItem"


    // $ANTLR start "entryRuleForeach"
    // InternalCypherParser.g:3217:1: entryRuleForeach returns [EObject current=null] : iv_ruleForeach= ruleForeach EOF ;
    public final EObject entryRuleForeach() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleForeach = null;


        try {
            // InternalCypherParser.g:3217:48: (iv_ruleForeach= ruleForeach EOF )
            // InternalCypherParser.g:3218:2: iv_ruleForeach= ruleForeach EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForeachRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForeach=ruleForeach();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForeach; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleForeach"


    // $ANTLR start "ruleForeach"
    // InternalCypherParser.g:3224:1: ruleForeach returns [EObject current=null] : (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_updatingClauses_6_0= ruleUpdatingClause ) )+ otherlv_7= RightParenthesis ) ;
    public final EObject ruleForeach() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_variable_2_0 = null;

        EObject lv_expression_4_0 = null;

        EObject lv_updatingClauses_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3230:2: ( (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_updatingClauses_6_0= ruleUpdatingClause ) )+ otherlv_7= RightParenthesis ) )
            // InternalCypherParser.g:3231:2: (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_updatingClauses_6_0= ruleUpdatingClause ) )+ otherlv_7= RightParenthesis )
            {
            // InternalCypherParser.g:3231:2: (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_updatingClauses_6_0= ruleUpdatingClause ) )+ otherlv_7= RightParenthesis )
            // InternalCypherParser.g:3232:3: otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_updatingClauses_6_0= ruleUpdatingClause ) )+ otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,FOREACH,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getFOREACHKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalCypherParser.g:3240:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:3241:4: (lv_variable_2_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:3241:4: (lv_variable_2_0= ruleVariableDeclaration )
            // InternalCypherParser.g:3242:5: lv_variable_2_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_53);
            lv_variable_2_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForeachRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_2_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,IN,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getForeachAccess().getINKeyword_3());
              		
            }
            // InternalCypherParser.g:3263:3: ( (lv_expression_4_0= ruleExpression ) )
            // InternalCypherParser.g:3264:4: (lv_expression_4_0= ruleExpression )
            {
            // InternalCypherParser.g:3264:4: (lv_expression_4_0= ruleExpression )
            // InternalCypherParser.g:3265:5: lv_expression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_54);
            lv_expression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForeachRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,VerticalLine,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getForeachAccess().getVerticalLineKeyword_5());
              		
            }
            // InternalCypherParser.g:3286:3: ( (lv_updatingClauses_6_0= ruleUpdatingClause ) )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==FOREACH||LA41_0==CREATE||(LA41_0>=DELETE && LA41_0<=DETACH)||LA41_0==REMOVE||LA41_0==MERGE||LA41_0==SET) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // InternalCypherParser.g:3287:4: (lv_updatingClauses_6_0= ruleUpdatingClause )
            	    {
            	    // InternalCypherParser.g:3287:4: (lv_updatingClauses_6_0= ruleUpdatingClause )
            	    // InternalCypherParser.g:3288:5: lv_updatingClauses_6_0= ruleUpdatingClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getForeachAccess().getUpdatingClausesUpdatingClauseParserRuleCall_6_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_updatingClauses_6_0=ruleUpdatingClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getForeachRule());
            	      					}
            	      					add(
            	      						current,
            	      						"updatingClauses",
            	      						lv_updatingClauses_6_0,
            	      						"org.xtext.example.mydsl.Cypher.UpdatingClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getForeachAccess().getRightParenthesisKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleForeach"


    // $ANTLR start "entryRuleInQueryCall"
    // InternalCypherParser.g:3313:1: entryRuleInQueryCall returns [EObject current=null] : iv_ruleInQueryCall= ruleInQueryCall EOF ;
    public final EObject entryRuleInQueryCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInQueryCall = null;


        try {
            // InternalCypherParser.g:3313:52: (iv_ruleInQueryCall= ruleInQueryCall EOF )
            // InternalCypherParser.g:3314:2: iv_ruleInQueryCall= ruleInQueryCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInQueryCallRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInQueryCall=ruleInQueryCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInQueryCall; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInQueryCall"


    // $ANTLR start "ruleInQueryCall"
    // InternalCypherParser.g:3320:1: ruleInQueryCall returns [EObject current=null] : (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) ;
    public final EObject ruleInQueryCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_invocation_1_0 = null;

        EObject lv_yieldItems_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3326:2: ( (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) )
            // InternalCypherParser.g:3327:2: (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            {
            // InternalCypherParser.g:3327:2: (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            // InternalCypherParser.g:3328:3: otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            {
            otherlv_0=(Token)match(input,CALL,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInQueryCallAccess().getCALLKeyword_0());
              		
            }
            // InternalCypherParser.g:3332:3: ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) )
            // InternalCypherParser.g:3333:4: (lv_invocation_1_0= ruleExplicitProcedureInvocation )
            {
            // InternalCypherParser.g:3333:4: (lv_invocation_1_0= ruleExplicitProcedureInvocation )
            // InternalCypherParser.g:3334:5: lv_invocation_1_0= ruleExplicitProcedureInvocation
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_57);
            lv_invocation_1_0=ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInQueryCallRule());
              					}
              					set(
              						current,
              						"invocation",
              						lv_invocation_1_0,
              						"org.xtext.example.mydsl.Cypher.ExplicitProcedureInvocation");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:3351:3: (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==YIELD) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalCypherParser.g:3352:4: otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    {
                    otherlv_2=(Token)match(input,YIELD,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0());
                      			
                    }
                    // InternalCypherParser.g:3356:4: ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    // InternalCypherParser.g:3357:5: (lv_yieldItems_3_0= ruleYieldItems )
                    {
                    // InternalCypherParser.g:3357:5: (lv_yieldItems_3_0= ruleYieldItems )
                    // InternalCypherParser.g:3358:6: lv_yieldItems_3_0= ruleYieldItems
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_yieldItems_3_0=ruleYieldItems();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInQueryCallRule());
                      						}
                      						set(
                      							current,
                      							"yieldItems",
                      							lv_yieldItems_3_0,
                      							"org.xtext.example.mydsl.Cypher.YieldItems");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInQueryCall"


    // $ANTLR start "entryRuleStandaloneCall"
    // InternalCypherParser.g:3380:1: entryRuleStandaloneCall returns [EObject current=null] : iv_ruleStandaloneCall= ruleStandaloneCall EOF ;
    public final EObject entryRuleStandaloneCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStandaloneCall = null;


        try {
            // InternalCypherParser.g:3380:55: (iv_ruleStandaloneCall= ruleStandaloneCall EOF )
            // InternalCypherParser.g:3381:2: iv_ruleStandaloneCall= ruleStandaloneCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStandaloneCallRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStandaloneCall=ruleStandaloneCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStandaloneCall; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStandaloneCall"


    // $ANTLR start "ruleStandaloneCall"
    // InternalCypherParser.g:3387:1: ruleStandaloneCall returns [EObject current=null] : (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) ;
    public final EObject ruleStandaloneCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_invocation_1_1 = null;

        EObject lv_invocation_1_2 = null;

        EObject lv_yieldItems_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3393:2: ( (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) )
            // InternalCypherParser.g:3394:2: (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            {
            // InternalCypherParser.g:3394:2: (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            // InternalCypherParser.g:3395:3: otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            {
            otherlv_0=(Token)match(input,CALL,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStandaloneCallAccess().getCALLKeyword_0());
              		
            }
            // InternalCypherParser.g:3399:3: ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) )
            // InternalCypherParser.g:3400:4: ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) )
            {
            // InternalCypherParser.g:3400:4: ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) )
            // InternalCypherParser.g:3401:5: (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation )
            {
            // InternalCypherParser.g:3401:5: (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation )
            int alt43=2;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // InternalCypherParser.g:3402:6: lv_invocation_1_1= ruleExplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_57);
                    lv_invocation_1_1=ruleExplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStandaloneCallRule());
                      						}
                      						set(
                      							current,
                      							"invocation",
                      							lv_invocation_1_1,
                      							"org.xtext.example.mydsl.Cypher.ExplicitProcedureInvocation");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:3418:6: lv_invocation_1_2= ruleImplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_57);
                    lv_invocation_1_2=ruleImplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStandaloneCallRule());
                      						}
                      						set(
                      							current,
                      							"invocation",
                      							lv_invocation_1_2,
                      							"org.xtext.example.mydsl.Cypher.ImplicitProcedureInvocation");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalCypherParser.g:3436:3: (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==YIELD) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalCypherParser.g:3437:4: otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    {
                    otherlv_2=(Token)match(input,YIELD,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0());
                      			
                    }
                    // InternalCypherParser.g:3441:4: ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    // InternalCypherParser.g:3442:5: (lv_yieldItems_3_0= ruleYieldItems )
                    {
                    // InternalCypherParser.g:3442:5: (lv_yieldItems_3_0= ruleYieldItems )
                    // InternalCypherParser.g:3443:6: lv_yieldItems_3_0= ruleYieldItems
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_yieldItems_3_0=ruleYieldItems();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStandaloneCallRule());
                      						}
                      						set(
                      							current,
                      							"yieldItems",
                      							lv_yieldItems_3_0,
                      							"org.xtext.example.mydsl.Cypher.YieldItems");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStandaloneCall"


    // $ANTLR start "entryRuleYieldItems"
    // InternalCypherParser.g:3465:1: entryRuleYieldItems returns [EObject current=null] : iv_ruleYieldItems= ruleYieldItems EOF ;
    public final EObject entryRuleYieldItems() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleYieldItems = null;


        try {
            // InternalCypherParser.g:3465:51: (iv_ruleYieldItems= ruleYieldItems EOF )
            // InternalCypherParser.g:3466:2: iv_ruleYieldItems= ruleYieldItems EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldItems=ruleYieldItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldItems; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleYieldItems"


    // $ANTLR start "ruleYieldItems"
    // InternalCypherParser.g:3472:1: ruleYieldItems returns [EObject current=null] : ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) ) ;
    public final EObject ruleYieldItems() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_items_1_0 = null;

        EObject lv_items_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3478:2: ( ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) ) )
            // InternalCypherParser.g:3479:2: ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) )
            {
            // InternalCypherParser.g:3479:2: ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) )
            // InternalCypherParser.g:3480:3: () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus )
            {
            // InternalCypherParser.g:3480:3: ()
            // InternalCypherParser.g:3481:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getYieldItemsAccess().getYieldItemsAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:3490:3: ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0>=ALLSHORTESTPATHS && LA46_0<=WHERE)||(LA46_0>=CASE && LA46_0<=XOR)||(LA46_0>=AS && LA46_0<=OR)||LA46_0==RULE_ID) ) {
                alt46=1;
            }
            else if ( (LA46_0==HyphenMinus) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // InternalCypherParser.g:3491:4: ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* )
                    {
                    // InternalCypherParser.g:3491:4: ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* )
                    // InternalCypherParser.g:3492:5: ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )*
                    {
                    // InternalCypherParser.g:3492:5: ( (lv_items_1_0= ruleYieldItem ) )
                    // InternalCypherParser.g:3493:6: (lv_items_1_0= ruleYieldItem )
                    {
                    // InternalCypherParser.g:3493:6: (lv_items_1_0= ruleYieldItem )
                    // InternalCypherParser.g:3494:7: lv_items_1_0= ruleYieldItem
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_50);
                    lv_items_1_0=ruleYieldItem();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getYieldItemsRule());
                      							}
                      							add(
                      								current,
                      								"items",
                      								lv_items_1_0,
                      								"org.xtext.example.mydsl.Cypher.YieldItem");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalCypherParser.g:3511:5: (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==Comma) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // InternalCypherParser.g:3512:6: otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_2, grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0());
                    	      					
                    	    }
                    	    // InternalCypherParser.g:3516:6: ( (lv_items_3_0= ruleYieldItem ) )
                    	    // InternalCypherParser.g:3517:7: (lv_items_3_0= ruleYieldItem )
                    	    {
                    	    // InternalCypherParser.g:3517:7: (lv_items_3_0= ruleYieldItem )
                    	    // InternalCypherParser.g:3518:8: lv_items_3_0= ruleYieldItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_50);
                    	    lv_items_3_0=ruleYieldItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getYieldItemsRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"items",
                    	      									lv_items_3_0,
                    	      									"org.xtext.example.mydsl.Cypher.YieldItem");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:3538:4: otherlv_4= HyphenMinus
                    {
                    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleYieldItems"


    // $ANTLR start "entryRuleYieldItem"
    // InternalCypherParser.g:3547:1: entryRuleYieldItem returns [EObject current=null] : iv_ruleYieldItem= ruleYieldItem EOF ;
    public final EObject entryRuleYieldItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleYieldItem = null;


        try {
            // InternalCypherParser.g:3547:50: (iv_ruleYieldItem= ruleYieldItem EOF )
            // InternalCypherParser.g:3548:2: iv_ruleYieldItem= ruleYieldItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldItem=ruleYieldItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleYieldItem"


    // $ANTLR start "ruleYieldItem"
    // InternalCypherParser.g:3554:1: ruleYieldItem returns [EObject current=null] : ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) ) ;
    public final EObject ruleYieldItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_field_0_0 = null;

        EObject lv_variable_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3560:2: ( ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) ) )
            // InternalCypherParser.g:3561:2: ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) )
            {
            // InternalCypherParser.g:3561:2: ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) )
            // InternalCypherParser.g:3562:3: ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) )
            {
            // InternalCypherParser.g:3562:3: ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )?
            int alt47=2;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // InternalCypherParser.g:3563:4: ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS
                    {
                    // InternalCypherParser.g:3563:4: ( (lv_field_0_0= ruleProcedureResultField ) )
                    // InternalCypherParser.g:3564:5: (lv_field_0_0= ruleProcedureResultField )
                    {
                    // InternalCypherParser.g:3564:5: (lv_field_0_0= ruleProcedureResultField )
                    // InternalCypherParser.g:3565:6: lv_field_0_0= ruleProcedureResultField
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_40);
                    lv_field_0_0=ruleProcedureResultField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getYieldItemRule());
                      						}
                      						set(
                      							current,
                      							"field",
                      							lv_field_0_0,
                      							"org.xtext.example.mydsl.Cypher.ProcedureResultField");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getYieldItemAccess().getASKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalCypherParser.g:3587:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:3588:4: (lv_variable_2_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:3588:4: (lv_variable_2_0= ruleVariableDeclaration )
            // InternalCypherParser.g:3589:5: lv_variable_2_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_variable_2_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getYieldItemRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_2_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleYieldItem"


    // $ANTLR start "entryRuleWith"
    // InternalCypherParser.g:3610:1: entryRuleWith returns [EObject current=null] : iv_ruleWith= ruleWith EOF ;
    public final EObject entryRuleWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWith = null;


        try {
            // InternalCypherParser.g:3610:45: (iv_ruleWith= ruleWith EOF )
            // InternalCypherParser.g:3611:2: iv_ruleWith= ruleWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWith=ruleWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWith"


    // $ANTLR start "ruleWith"
    // InternalCypherParser.g:3617:1: ruleWith returns [EObject current=null] : (otherlv_0= WITH ( (lv_returnBody_1_0= ruleReturnBody ) ) ( (lv_where_2_0= ruleWhere ) )? ) ;
    public final EObject ruleWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_returnBody_1_0 = null;

        EObject lv_where_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3623:2: ( (otherlv_0= WITH ( (lv_returnBody_1_0= ruleReturnBody ) ) ( (lv_where_2_0= ruleWhere ) )? ) )
            // InternalCypherParser.g:3624:2: (otherlv_0= WITH ( (lv_returnBody_1_0= ruleReturnBody ) ) ( (lv_where_2_0= ruleWhere ) )? )
            {
            // InternalCypherParser.g:3624:2: (otherlv_0= WITH ( (lv_returnBody_1_0= ruleReturnBody ) ) ( (lv_where_2_0= ruleWhere ) )? )
            // InternalCypherParser.g:3625:3: otherlv_0= WITH ( (lv_returnBody_1_0= ruleReturnBody ) ) ( (lv_where_2_0= ruleWhere ) )?
            {
            otherlv_0=(Token)match(input,WITH,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithAccess().getWITHKeyword_0());
              		
            }
            // InternalCypherParser.g:3629:3: ( (lv_returnBody_1_0= ruleReturnBody ) )
            // InternalCypherParser.g:3630:4: (lv_returnBody_1_0= ruleReturnBody )
            {
            // InternalCypherParser.g:3630:4: (lv_returnBody_1_0= ruleReturnBody )
            // InternalCypherParser.g:3631:5: lv_returnBody_1_0= ruleReturnBody
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_returnBody_1_0=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithRule());
              					}
              					set(
              						current,
              						"returnBody",
              						lv_returnBody_1_0,
              						"org.xtext.example.mydsl.Cypher.ReturnBody");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:3648:3: ( (lv_where_2_0= ruleWhere ) )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==WHERE) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // InternalCypherParser.g:3649:4: (lv_where_2_0= ruleWhere )
                    {
                    // InternalCypherParser.g:3649:4: (lv_where_2_0= ruleWhere )
                    // InternalCypherParser.g:3650:5: lv_where_2_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_2_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWithRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_2_0,
                      						"org.xtext.example.mydsl.Cypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWith"


    // $ANTLR start "entryRuleReturn"
    // InternalCypherParser.g:3671:1: entryRuleReturn returns [EObject current=null] : iv_ruleReturn= ruleReturn EOF ;
    public final EObject entryRuleReturn() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturn = null;


        try {
            // InternalCypherParser.g:3671:47: (iv_ruleReturn= ruleReturn EOF )
            // InternalCypherParser.g:3672:2: iv_ruleReturn= ruleReturn EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturn=ruleReturn();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturn; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturn"


    // $ANTLR start "ruleReturn"
    // InternalCypherParser.g:3678:1: ruleReturn returns [EObject current=null] : ( ( (lv_return_0_0= RETURN ) ) ( (lv_body_1_0= ruleReturnBody ) ) ) ;
    public final EObject ruleReturn() throws RecognitionException {
        EObject current = null;

        Token lv_return_0_0=null;
        EObject lv_body_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3684:2: ( ( ( (lv_return_0_0= RETURN ) ) ( (lv_body_1_0= ruleReturnBody ) ) ) )
            // InternalCypherParser.g:3685:2: ( ( (lv_return_0_0= RETURN ) ) ( (lv_body_1_0= ruleReturnBody ) ) )
            {
            // InternalCypherParser.g:3685:2: ( ( (lv_return_0_0= RETURN ) ) ( (lv_body_1_0= ruleReturnBody ) ) )
            // InternalCypherParser.g:3686:3: ( (lv_return_0_0= RETURN ) ) ( (lv_body_1_0= ruleReturnBody ) )
            {
            // InternalCypherParser.g:3686:3: ( (lv_return_0_0= RETURN ) )
            // InternalCypherParser.g:3687:4: (lv_return_0_0= RETURN )
            {
            // InternalCypherParser.g:3687:4: (lv_return_0_0= RETURN )
            // InternalCypherParser.g:3688:5: lv_return_0_0= RETURN
            {
            lv_return_0_0=(Token)match(input,RETURN,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_return_0_0, grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getReturnRule());
              					}
              					setWithLastConsumed(current, "return", lv_return_0_0, "RETURN");
              				
            }

            }


            }

            // InternalCypherParser.g:3700:3: ( (lv_body_1_0= ruleReturnBody ) )
            // InternalCypherParser.g:3701:4: (lv_body_1_0= ruleReturnBody )
            {
            // InternalCypherParser.g:3701:4: (lv_body_1_0= ruleReturnBody )
            // InternalCypherParser.g:3702:5: lv_body_1_0= ruleReturnBody
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_1_0=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_1_0,
              						"org.xtext.example.mydsl.Cypher.ReturnBody");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturn"


    // $ANTLR start "entryRuleReturnBody"
    // InternalCypherParser.g:3723:1: entryRuleReturnBody returns [EObject current=null] : iv_ruleReturnBody= ruleReturnBody EOF ;
    public final EObject entryRuleReturnBody() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnBody = null;


        try {
            // InternalCypherParser.g:3723:51: (iv_ruleReturnBody= ruleReturnBody EOF )
            // InternalCypherParser.g:3724:2: iv_ruleReturnBody= ruleReturnBody EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnBodyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnBody=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnBody; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnBody"


    // $ANTLR start "ruleReturnBody"
    // InternalCypherParser.g:3730:1: ruleReturnBody returns [EObject current=null] : ( ( (lv_distinct_0_0= DISTINCT ) )? ( (lv_returnItems_1_0= ruleReturnItems ) ) ( (lv_order_2_0= ruleOrder ) )? ( (lv_skip_3_0= ruleSkip ) )? ( (lv_limit_4_0= ruleLimit ) )? ) ;
    public final EObject ruleReturnBody() throws RecognitionException {
        EObject current = null;

        Token lv_distinct_0_0=null;
        EObject lv_returnItems_1_0 = null;

        EObject lv_order_2_0 = null;

        EObject lv_skip_3_0 = null;

        EObject lv_limit_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3736:2: ( ( ( (lv_distinct_0_0= DISTINCT ) )? ( (lv_returnItems_1_0= ruleReturnItems ) ) ( (lv_order_2_0= ruleOrder ) )? ( (lv_skip_3_0= ruleSkip ) )? ( (lv_limit_4_0= ruleLimit ) )? ) )
            // InternalCypherParser.g:3737:2: ( ( (lv_distinct_0_0= DISTINCT ) )? ( (lv_returnItems_1_0= ruleReturnItems ) ) ( (lv_order_2_0= ruleOrder ) )? ( (lv_skip_3_0= ruleSkip ) )? ( (lv_limit_4_0= ruleLimit ) )? )
            {
            // InternalCypherParser.g:3737:2: ( ( (lv_distinct_0_0= DISTINCT ) )? ( (lv_returnItems_1_0= ruleReturnItems ) ) ( (lv_order_2_0= ruleOrder ) )? ( (lv_skip_3_0= ruleSkip ) )? ( (lv_limit_4_0= ruleLimit ) )? )
            // InternalCypherParser.g:3738:3: ( (lv_distinct_0_0= DISTINCT ) )? ( (lv_returnItems_1_0= ruleReturnItems ) ) ( (lv_order_2_0= ruleOrder ) )? ( (lv_skip_3_0= ruleSkip ) )? ( (lv_limit_4_0= ruleLimit ) )?
            {
            // InternalCypherParser.g:3738:3: ( (lv_distinct_0_0= DISTINCT ) )?
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // InternalCypherParser.g:3739:4: (lv_distinct_0_0= DISTINCT )
                    {
                    // InternalCypherParser.g:3739:4: (lv_distinct_0_0= DISTINCT )
                    // InternalCypherParser.g:3740:5: lv_distinct_0_0= DISTINCT
                    {
                    lv_distinct_0_0=(Token)match(input,DISTINCT,FOLLOW_59); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distinct_0_0, grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getReturnBodyRule());
                      					}
                      					setWithLastConsumed(current, "distinct", lv_distinct_0_0 != null, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:3752:3: ( (lv_returnItems_1_0= ruleReturnItems ) )
            // InternalCypherParser.g:3753:4: (lv_returnItems_1_0= ruleReturnItems )
            {
            // InternalCypherParser.g:3753:4: (lv_returnItems_1_0= ruleReturnItems )
            // InternalCypherParser.g:3754:5: lv_returnItems_1_0= ruleReturnItems
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_61);
            lv_returnItems_1_0=ruleReturnItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
              					}
              					set(
              						current,
              						"returnItems",
              						lv_returnItems_1_0,
              						"org.xtext.example.mydsl.Cypher.ReturnItems");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:3771:3: ( (lv_order_2_0= ruleOrder ) )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ORDER) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // InternalCypherParser.g:3772:4: (lv_order_2_0= ruleOrder )
                    {
                    // InternalCypherParser.g:3772:4: (lv_order_2_0= ruleOrder )
                    // InternalCypherParser.g:3773:5: lv_order_2_0= ruleOrder
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_62);
                    lv_order_2_0=ruleOrder();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"order",
                      						lv_order_2_0,
                      						"org.xtext.example.mydsl.Cypher.Order");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:3790:3: ( (lv_skip_3_0= ruleSkip ) )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SKIP) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // InternalCypherParser.g:3791:4: (lv_skip_3_0= ruleSkip )
                    {
                    // InternalCypherParser.g:3791:4: (lv_skip_3_0= ruleSkip )
                    // InternalCypherParser.g:3792:5: lv_skip_3_0= ruleSkip
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_63);
                    lv_skip_3_0=ruleSkip();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"skip",
                      						lv_skip_3_0,
                      						"org.xtext.example.mydsl.Cypher.Skip");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:3809:3: ( (lv_limit_4_0= ruleLimit ) )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==LIMIT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalCypherParser.g:3810:4: (lv_limit_4_0= ruleLimit )
                    {
                    // InternalCypherParser.g:3810:4: (lv_limit_4_0= ruleLimit )
                    // InternalCypherParser.g:3811:5: lv_limit_4_0= ruleLimit
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_limit_4_0=ruleLimit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"limit",
                      						lv_limit_4_0,
                      						"org.xtext.example.mydsl.Cypher.Limit");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnBody"


    // $ANTLR start "entryRuleReturnItems"
    // InternalCypherParser.g:3832:1: entryRuleReturnItems returns [EObject current=null] : iv_ruleReturnItems= ruleReturnItems EOF ;
    public final EObject entryRuleReturnItems() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnItems = null;


        try {
            // InternalCypherParser.g:3832:52: (iv_ruleReturnItems= ruleReturnItems EOF )
            // InternalCypherParser.g:3833:2: iv_ruleReturnItems= ruleReturnItems EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnItems=ruleReturnItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnItems; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnItems"


    // $ANTLR start "ruleReturnItems"
    // InternalCypherParser.g:3839:1: ruleReturnItems returns [EObject current=null] : ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) ) ;
    public final EObject ruleReturnItems() throws RecognitionException {
        EObject current = null;

        Token lv_all_1_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        EObject lv_items_3_0 = null;

        EObject lv_items_4_0 = null;

        EObject lv_items_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3845:2: ( ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) ) )
            // InternalCypherParser.g:3846:2: ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) )
            {
            // InternalCypherParser.g:3846:2: ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Asterisk) ) {
                alt55=1;
            }
            else if ( ((LA55_0>=ALLSHORTESTPATHS && LA55_0<=WHERE)||(LA55_0>=CASE && LA55_0<=XOR)||(LA55_0>=AS && LA55_0<=OR)||LA55_0==DollarSign||LA55_0==LeftParenthesis||LA55_0==PlusSign||LA55_0==HyphenMinus||LA55_0==LeftSquareBracket||LA55_0==LeftCurlyBracket||LA55_0==RULE_ID||(LA55_0>=RULE_STRING_LITERAL && LA55_0<=RULE_DECIMAL)) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // InternalCypherParser.g:3847:3: ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) )
                    {
                    // InternalCypherParser.g:3847:3: ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) )
                    // InternalCypherParser.g:3848:4: () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* )
                    {
                    // InternalCypherParser.g:3848:4: ()
                    // InternalCypherParser.g:3849:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:3858:4: ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* )
                    // InternalCypherParser.g:3859:5: ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )*
                    {
                    // InternalCypherParser.g:3859:5: ( (lv_all_1_0= Asterisk ) )
                    // InternalCypherParser.g:3860:6: (lv_all_1_0= Asterisk )
                    {
                    // InternalCypherParser.g:3860:6: (lv_all_1_0= Asterisk )
                    // InternalCypherParser.g:3861:7: lv_all_1_0= Asterisk
                    {
                    lv_all_1_0=(Token)match(input,Asterisk,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_all_1_0, grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getReturnItemsRule());
                      							}
                      							setWithLastConsumed(current, "all", lv_all_1_0, "*");
                      						
                    }

                    }


                    }

                    // InternalCypherParser.g:3873:5: (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( (LA53_0==Comma) ) {
                            alt53=1;
                        }


                        switch (alt53) {
                    	case 1 :
                    	    // InternalCypherParser.g:3874:6: otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_59); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_2, grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0());
                    	      					
                    	    }
                    	    // InternalCypherParser.g:3878:6: ( (lv_items_3_0= ruleReturnItem ) )
                    	    // InternalCypherParser.g:3879:7: (lv_items_3_0= ruleReturnItem )
                    	    {
                    	    // InternalCypherParser.g:3879:7: (lv_items_3_0= ruleReturnItem )
                    	    // InternalCypherParser.g:3880:8: lv_items_3_0= ruleReturnItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_50);
                    	    lv_items_3_0=ruleReturnItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"items",
                    	      									lv_items_3_0,
                    	      									"org.xtext.example.mydsl.Cypher.ReturnItem");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:3901:3: ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* )
                    {
                    // InternalCypherParser.g:3901:3: ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* )
                    // InternalCypherParser.g:3902:4: ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )*
                    {
                    // InternalCypherParser.g:3902:4: ( (lv_items_4_0= ruleReturnItem ) )
                    // InternalCypherParser.g:3903:5: (lv_items_4_0= ruleReturnItem )
                    {
                    // InternalCypherParser.g:3903:5: (lv_items_4_0= ruleReturnItem )
                    // InternalCypherParser.g:3904:6: lv_items_4_0= ruleReturnItem
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_50);
                    lv_items_4_0=ruleReturnItem();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                      						}
                      						add(
                      							current,
                      							"items",
                      							lv_items_4_0,
                      							"org.xtext.example.mydsl.Cypher.ReturnItem");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:3921:4: (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )*
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==Comma) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // InternalCypherParser.g:3922:5: otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) )
                    	    {
                    	    otherlv_5=(Token)match(input,Comma,FOLLOW_59); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_5, grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalCypherParser.g:3926:5: ( (lv_items_6_0= ruleReturnItem ) )
                    	    // InternalCypherParser.g:3927:6: (lv_items_6_0= ruleReturnItem )
                    	    {
                    	    // InternalCypherParser.g:3927:6: (lv_items_6_0= ruleReturnItem )
                    	    // InternalCypherParser.g:3928:7: lv_items_6_0= ruleReturnItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_50);
                    	    lv_items_6_0=ruleReturnItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"items",
                    	      								lv_items_6_0,
                    	      								"org.xtext.example.mydsl.Cypher.ReturnItem");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnItems"


    // $ANTLR start "entryRuleReturnItem"
    // InternalCypherParser.g:3951:1: entryRuleReturnItem returns [EObject current=null] : iv_ruleReturnItem= ruleReturnItem EOF ;
    public final EObject entryRuleReturnItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnItem = null;


        try {
            // InternalCypherParser.g:3951:51: (iv_ruleReturnItem= ruleReturnItem EOF )
            // InternalCypherParser.g:3952:2: iv_ruleReturnItem= ruleReturnItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnItem=ruleReturnItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnItem"


    // $ANTLR start "ruleReturnItem"
    // InternalCypherParser.g:3958:1: ruleReturnItem returns [EObject current=null] : ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? ) ;
    public final EObject ruleReturnItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_0_0 = null;

        EObject lv_alias_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:3964:2: ( ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? ) )
            // InternalCypherParser.g:3965:2: ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? )
            {
            // InternalCypherParser.g:3965:2: ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? )
            // InternalCypherParser.g:3966:3: ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )?
            {
            // InternalCypherParser.g:3966:3: ( (lv_expression_0_0= ruleExpression ) )
            // InternalCypherParser.g:3967:4: (lv_expression_0_0= ruleExpression )
            {
            // InternalCypherParser.g:3967:4: (lv_expression_0_0= ruleExpression )
            // InternalCypherParser.g:3968:5: lv_expression_0_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_64);
            lv_expression_0_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnItemRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:3985:3: (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==AS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // InternalCypherParser.g:3986:4: otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) )
                    {
                    otherlv_1=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getReturnItemAccess().getASKeyword_1_0());
                      			
                    }
                    // InternalCypherParser.g:3990:4: ( (lv_alias_2_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:3991:5: (lv_alias_2_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:3991:5: (lv_alias_2_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:3992:6: lv_alias_2_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getReturnItemRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnItem"


    // $ANTLR start "entryRuleOrder"
    // InternalCypherParser.g:4014:1: entryRuleOrder returns [EObject current=null] : iv_ruleOrder= ruleOrder EOF ;
    public final EObject entryRuleOrder() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrder = null;


        try {
            // InternalCypherParser.g:4014:46: (iv_ruleOrder= ruleOrder EOF )
            // InternalCypherParser.g:4015:2: iv_ruleOrder= ruleOrder EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrder=ruleOrder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrder; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrder"


    // $ANTLR start "ruleOrder"
    // InternalCypherParser.g:4021:1: ruleOrder returns [EObject current=null] : (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* ) ;
    public final EObject ruleOrder() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_orderBy_2_0 = null;

        EObject lv_orderBy_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4027:2: ( (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* ) )
            // InternalCypherParser.g:4028:2: (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* )
            {
            // InternalCypherParser.g:4028:2: (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* )
            // InternalCypherParser.g:4029:3: otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )*
            {
            otherlv_0=(Token)match(input,ORDER,FOLLOW_65); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOrderAccess().getORDERKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,BY,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOrderAccess().getBYKeyword_1());
              		
            }
            // InternalCypherParser.g:4037:3: ( (lv_orderBy_2_0= ruleSortItem ) )
            // InternalCypherParser.g:4038:4: (lv_orderBy_2_0= ruleSortItem )
            {
            // InternalCypherParser.g:4038:4: (lv_orderBy_2_0= ruleSortItem )
            // InternalCypherParser.g:4039:5: lv_orderBy_2_0= ruleSortItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_orderBy_2_0=ruleSortItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderRule());
              					}
              					add(
              						current,
              						"orderBy",
              						lv_orderBy_2_0,
              						"org.xtext.example.mydsl.Cypher.SortItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:4056:3: (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==Comma) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // InternalCypherParser.g:4057:4: otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getOrderAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalCypherParser.g:4061:4: ( (lv_orderBy_4_0= ruleSortItem ) )
            	    // InternalCypherParser.g:4062:5: (lv_orderBy_4_0= ruleSortItem )
            	    {
            	    // InternalCypherParser.g:4062:5: (lv_orderBy_4_0= ruleSortItem )
            	    // InternalCypherParser.g:4063:6: lv_orderBy_4_0= ruleSortItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_orderBy_4_0=ruleSortItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOrderRule());
            	      						}
            	      						add(
            	      							current,
            	      							"orderBy",
            	      							lv_orderBy_4_0,
            	      							"org.xtext.example.mydsl.Cypher.SortItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrder"


    // $ANTLR start "entryRuleSkip"
    // InternalCypherParser.g:4085:1: entryRuleSkip returns [EObject current=null] : iv_ruleSkip= ruleSkip EOF ;
    public final EObject entryRuleSkip() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSkip = null;


        try {
            // InternalCypherParser.g:4085:45: (iv_ruleSkip= ruleSkip EOF )
            // InternalCypherParser.g:4086:2: iv_ruleSkip= ruleSkip EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSkipRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSkip=ruleSkip();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSkip; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSkip"


    // $ANTLR start "ruleSkip"
    // InternalCypherParser.g:4092:1: ruleSkip returns [EObject current=null] : (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) ) ;
    public final EObject ruleSkip() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_skip_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4098:2: ( (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) ) )
            // InternalCypherParser.g:4099:2: (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) )
            {
            // InternalCypherParser.g:4099:2: (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) )
            // InternalCypherParser.g:4100:3: otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,SKIP,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSkipAccess().getSKIPKeyword_0());
              		
            }
            // InternalCypherParser.g:4104:3: ( (lv_skip_1_0= ruleExpression ) )
            // InternalCypherParser.g:4105:4: (lv_skip_1_0= ruleExpression )
            {
            // InternalCypherParser.g:4105:4: (lv_skip_1_0= ruleExpression )
            // InternalCypherParser.g:4106:5: lv_skip_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_skip_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSkipRule());
              					}
              					set(
              						current,
              						"skip",
              						lv_skip_1_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSkip"


    // $ANTLR start "entryRuleLimit"
    // InternalCypherParser.g:4127:1: entryRuleLimit returns [EObject current=null] : iv_ruleLimit= ruleLimit EOF ;
    public final EObject entryRuleLimit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLimit = null;


        try {
            // InternalCypherParser.g:4127:46: (iv_ruleLimit= ruleLimit EOF )
            // InternalCypherParser.g:4128:2: iv_ruleLimit= ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLimit=ruleLimit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLimit; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalCypherParser.g:4134:1: ruleLimit returns [EObject current=null] : (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) ) ;
    public final EObject ruleLimit() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_limit_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4140:2: ( (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) ) )
            // InternalCypherParser.g:4141:2: (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) )
            {
            // InternalCypherParser.g:4141:2: (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) )
            // InternalCypherParser.g:4142:3: otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,LIMIT,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getLimitAccess().getLIMITKeyword_0());
              		
            }
            // InternalCypherParser.g:4146:3: ( (lv_limit_1_0= ruleExpression ) )
            // InternalCypherParser.g:4147:4: (lv_limit_1_0= ruleExpression )
            {
            // InternalCypherParser.g:4147:4: (lv_limit_1_0= ruleExpression )
            // InternalCypherParser.g:4148:5: lv_limit_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_limit_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLimitRule());
              					}
              					set(
              						current,
              						"limit",
              						lv_limit_1_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSortItem"
    // InternalCypherParser.g:4169:1: entryRuleSortItem returns [EObject current=null] : iv_ruleSortItem= ruleSortItem EOF ;
    public final EObject entryRuleSortItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSortItem = null;


        try {
            // InternalCypherParser.g:4169:49: (iv_ruleSortItem= ruleSortItem EOF )
            // InternalCypherParser.g:4170:2: iv_ruleSortItem= ruleSortItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSortItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSortItem=ruleSortItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSortItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSortItem"


    // $ANTLR start "ruleSortItem"
    // InternalCypherParser.g:4176:1: ruleSortItem returns [EObject current=null] : ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? ) ;
    public final EObject ruleSortItem() throws RecognitionException {
        EObject current = null;

        Token lv_sort_1_1=null;
        Token lv_sort_1_2=null;
        Token lv_sort_1_3=null;
        Token lv_sort_1_4=null;
        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4182:2: ( ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? ) )
            // InternalCypherParser.g:4183:2: ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? )
            {
            // InternalCypherParser.g:4183:2: ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? )
            // InternalCypherParser.g:4184:3: ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )?
            {
            // InternalCypherParser.g:4184:3: ( (lv_expression_0_0= ruleExpression ) )
            // InternalCypherParser.g:4185:4: (lv_expression_0_0= ruleExpression )
            {
            // InternalCypherParser.g:4185:4: (lv_expression_0_0= ruleExpression )
            // InternalCypherParser.g:4186:5: lv_expression_0_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_66);
            lv_expression_0_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSortItemRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:4203:3: ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( ((LA59_0>=DESCENDING && LA59_0<=ASCENDING)||LA59_0==DESC||LA59_0==ASC) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalCypherParser.g:4204:4: ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) )
                    {
                    // InternalCypherParser.g:4204:4: ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) )
                    // InternalCypherParser.g:4205:5: (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC )
                    {
                    // InternalCypherParser.g:4205:5: (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC )
                    int alt58=4;
                    switch ( input.LA(1) ) {
                    case DESCENDING:
                        {
                        alt58=1;
                        }
                        break;
                    case DESC:
                        {
                        alt58=2;
                        }
                        break;
                    case ASCENDING:
                        {
                        alt58=3;
                        }
                        break;
                    case ASC:
                        {
                        alt58=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 58, 0, input);

                        throw nvae;
                    }

                    switch (alt58) {
                        case 1 :
                            // InternalCypherParser.g:4206:6: lv_sort_1_1= DESCENDING
                            {
                            lv_sort_1_1=(Token)match(input,DESCENDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_1, grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalCypherParser.g:4217:6: lv_sort_1_2= DESC
                            {
                            lv_sort_1_2=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_2, grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_2, null);
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalCypherParser.g:4228:6: lv_sort_1_3= ASCENDING
                            {
                            lv_sort_1_3=(Token)match(input,ASCENDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_3, grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_3, null);
                              					
                            }

                            }
                            break;
                        case 4 :
                            // InternalCypherParser.g:4239:6: lv_sort_1_4= ASC
                            {
                            lv_sort_1_4=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_4, grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_4, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSortItem"


    // $ANTLR start "entryRuleHint"
    // InternalCypherParser.g:4256:1: entryRuleHint returns [EObject current=null] : iv_ruleHint= ruleHint EOF ;
    public final EObject entryRuleHint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHint = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalCypherParser.g:4258:2: (iv_ruleHint= ruleHint EOF )
            // InternalCypherParser.g:4259:2: iv_ruleHint= ruleHint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHint=ruleHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleHint"


    // $ANTLR start "ruleHint"
    // InternalCypherParser.g:4268:1: ruleHint returns [EObject current=null] : ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) ) ;
    public final EObject ruleHint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_WS_2=null;
        Token otherlv_3=null;
        Token this_WS_4=null;
        Token this_WS_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token this_WS_13=null;
        Token otherlv_14=null;
        Token this_WS_15=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_21=null;
        Token this_WS_22=null;
        Token otherlv_23=null;
        Token this_WS_24=null;
        EObject lv_variable_5_0 = null;

        EObject lv_nodeLabel_6_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_9_0 = null;

        EObject lv_variables_17_0 = null;

        EObject lv_variables_19_0 = null;

        EObject lv_variable_25_0 = null;

        EObject lv_nodeLabel_26_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalCypherParser.g:4275:2: ( ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) ) )
            // InternalCypherParser.g:4276:2: ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) )
            {
            // InternalCypherParser.g:4276:2: ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) )
            int alt61=3;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==USING) ) {
                int LA61_1 = input.LA(2);

                if ( (LA61_1==RULE_WS) ) {
                    switch ( input.LA(3) ) {
                    case INDEX:
                        {
                        alt61=1;
                        }
                        break;
                    case JOIN:
                        {
                        alt61=2;
                        }
                        break;
                    case SCAN:
                        {
                        alt61=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // InternalCypherParser.g:4277:3: ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis )
                    {
                    // InternalCypherParser.g:4277:3: ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis )
                    // InternalCypherParser.g:4278:4: () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis
                    {
                    // InternalCypherParser.g:4278:4: ()
                    // InternalCypherParser.g:4279:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getIndexHintAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,USING,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getHintAccess().getUSINGKeyword_0_1());
                      			
                    }
                    this_WS_2=(Token)match(input,RULE_WS,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_2, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2());
                      			
                    }
                    otherlv_3=(Token)match(input,INDEX,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getHintAccess().getINDEXKeyword_0_3());
                      			
                    }
                    this_WS_4=(Token)match(input,RULE_WS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_4, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4());
                      			
                    }
                    // InternalCypherParser.g:4304:4: ( (lv_variable_5_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:4305:5: (lv_variable_5_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:4305:5: (lv_variable_5_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:4306:6: lv_variable_5_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0());
                      					
                    }
                    pushFollow(FOLLOW_24);
                    lv_variable_5_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_5_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:4323:4: ( (lv_nodeLabel_6_0= ruleNodeLabel ) )
                    // InternalCypherParser.g:4324:5: (lv_nodeLabel_6_0= ruleNodeLabel )
                    {
                    // InternalCypherParser.g:4324:5: (lv_nodeLabel_6_0= ruleNodeLabel )
                    // InternalCypherParser.g:4325:6: lv_nodeLabel_6_0= ruleNodeLabel
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0());
                      					
                    }
                    pushFollow(FOLLOW_67);
                    lv_nodeLabel_6_0=ruleNodeLabel();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabel",
                      							lv_nodeLabel_6_0,
                      							"org.xtext.example.mydsl.Cypher.NodeLabel");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    this_WS_7=(Token)match(input,RULE_WS,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_7, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7());
                      			
                    }
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8());
                      			
                    }
                    // InternalCypherParser.g:4350:4: ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) )
                    // InternalCypherParser.g:4351:5: (lv_propertyKeyName_9_0= rulePropertyKeyName )
                    {
                    // InternalCypherParser.g:4351:5: (lv_propertyKeyName_9_0= rulePropertyKeyName )
                    // InternalCypherParser.g:4352:6: lv_propertyKeyName_9_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_propertyKeyName_9_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"propertyKeyName",
                      							lv_propertyKeyName_9_0,
                      							"org.xtext.example.mydsl.Cypher.PropertyKeyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:4375:3: ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) )
                    {
                    // InternalCypherParser.g:4375:3: ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) )
                    // InternalCypherParser.g:4376:4: () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* )
                    {
                    // InternalCypherParser.g:4376:4: ()
                    // InternalCypherParser.g:4377:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getJoinHintAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:4386:4: (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* )
                    // InternalCypherParser.g:4387:5: otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )*
                    {
                    otherlv_12=(Token)match(input,USING,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_12, grammarAccess.getHintAccess().getUSINGKeyword_1_1_0());
                      				
                    }
                    this_WS_13=(Token)match(input,RULE_WS,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_13, grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1());
                      				
                    }
                    otherlv_14=(Token)match(input,JOIN,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_14, grammarAccess.getHintAccess().getJOINKeyword_1_1_2());
                      				
                    }
                    this_WS_15=(Token)match(input,RULE_WS,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_15, grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3());
                      				
                    }
                    otherlv_16=(Token)match(input,ON,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_16, grammarAccess.getHintAccess().getONKeyword_1_1_4());
                      				
                    }
                    // InternalCypherParser.g:4407:5: ( (lv_variables_17_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:4408:6: (lv_variables_17_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:4408:6: (lv_variables_17_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:4409:7: lv_variables_17_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0());
                      						
                    }
                    pushFollow(FOLLOW_50);
                    lv_variables_17_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							add(
                      								current,
                      								"variables",
                      								lv_variables_17_0,
                      								"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalCypherParser.g:4426:5: (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )*
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( (LA60_0==Comma) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // InternalCypherParser.g:4427:6: otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) )
                    	    {
                    	    otherlv_18=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_18, grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0());
                    	      					
                    	    }
                    	    // InternalCypherParser.g:4431:6: ( (lv_variables_19_0= ruleVariableDeclaration ) )
                    	    // InternalCypherParser.g:4432:7: (lv_variables_19_0= ruleVariableDeclaration )
                    	    {
                    	    // InternalCypherParser.g:4432:7: (lv_variables_19_0= ruleVariableDeclaration )
                    	    // InternalCypherParser.g:4433:8: lv_variables_19_0= ruleVariableDeclaration
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_50);
                    	    lv_variables_19_0=ruleVariableDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getHintRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"variables",
                    	      									lv_variables_19_0,
                    	      									"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop60;
                        }
                    } while (true);


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:4454:3: ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) )
                    {
                    // InternalCypherParser.g:4454:3: ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) )
                    // InternalCypherParser.g:4455:4: () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) )
                    {
                    // InternalCypherParser.g:4455:4: ()
                    // InternalCypherParser.g:4456:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getScanHintAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:4465:4: (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) )
                    // InternalCypherParser.g:4466:5: otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) )
                    {
                    otherlv_21=(Token)match(input,USING,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_21, grammarAccess.getHintAccess().getUSINGKeyword_2_1_0());
                      				
                    }
                    this_WS_22=(Token)match(input,RULE_WS,FOLLOW_69); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_22, grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1());
                      				
                    }
                    otherlv_23=(Token)match(input,SCAN,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_23, grammarAccess.getHintAccess().getSCANKeyword_2_1_2());
                      				
                    }
                    this_WS_24=(Token)match(input,RULE_WS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_24, grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3());
                      				
                    }
                    // InternalCypherParser.g:4482:5: ( (lv_variable_25_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:4483:6: (lv_variable_25_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:4483:6: (lv_variable_25_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:4484:7: lv_variable_25_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_24);
                    lv_variable_25_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							set(
                      								current,
                      								"variable",
                      								lv_variable_25_0,
                      								"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalCypherParser.g:4501:5: ( (lv_nodeLabel_26_0= ruleNodeLabel ) )
                    // InternalCypherParser.g:4502:6: (lv_nodeLabel_26_0= ruleNodeLabel )
                    {
                    // InternalCypherParser.g:4502:6: (lv_nodeLabel_26_0= ruleNodeLabel )
                    // InternalCypherParser.g:4503:7: lv_nodeLabel_26_0= ruleNodeLabel
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabel_26_0=ruleNodeLabel();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							set(
                      								current,
                      								"nodeLabel",
                      								lv_nodeLabel_26_0,
                      								"org.xtext.example.mydsl.Cypher.NodeLabel");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleHint"


    // $ANTLR start "entryRuleStart"
    // InternalCypherParser.g:4529:1: entryRuleStart returns [EObject current=null] : iv_ruleStart= ruleStart EOF ;
    public final EObject entryRuleStart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStart = null;


        try {
            // InternalCypherParser.g:4529:46: (iv_ruleStart= ruleStart EOF )
            // InternalCypherParser.g:4530:2: iv_ruleStart= ruleStart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStart=ruleStart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStart"


    // $ANTLR start "ruleStart"
    // InternalCypherParser.g:4536:1: ruleStart returns [EObject current=null] : (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? ) ;
    public final EObject ruleStart() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_startPoint_1_0 = null;

        EObject lv_startPoint_3_0 = null;

        EObject lv_where_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4542:2: ( (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? ) )
            // InternalCypherParser.g:4543:2: (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? )
            {
            // InternalCypherParser.g:4543:2: (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? )
            // InternalCypherParser.g:4544:3: otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )?
            {
            otherlv_0=(Token)match(input,START,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStartAccess().getSTARTKeyword_0());
              		
            }
            // InternalCypherParser.g:4548:3: ( (lv_startPoint_1_0= ruleStartPoint ) )
            // InternalCypherParser.g:4549:4: (lv_startPoint_1_0= ruleStartPoint )
            {
            // InternalCypherParser.g:4549:4: (lv_startPoint_1_0= ruleStartPoint )
            // InternalCypherParser.g:4550:5: lv_startPoint_1_0= ruleStartPoint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_70);
            lv_startPoint_1_0=ruleStartPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartRule());
              					}
              					add(
              						current,
              						"startPoint",
              						lv_startPoint_1_0,
              						"org.xtext.example.mydsl.Cypher.StartPoint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:4567:3: (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==Comma) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // InternalCypherParser.g:4568:4: otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getStartAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalCypherParser.g:4572:4: ( (lv_startPoint_3_0= ruleStartPoint ) )
            	    // InternalCypherParser.g:4573:5: (lv_startPoint_3_0= ruleStartPoint )
            	    {
            	    // InternalCypherParser.g:4573:5: (lv_startPoint_3_0= ruleStartPoint )
            	    // InternalCypherParser.g:4574:6: lv_startPoint_3_0= ruleStartPoint
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_startPoint_3_0=ruleStartPoint();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getStartRule());
            	      						}
            	      						add(
            	      							current,
            	      							"startPoint",
            	      							lv_startPoint_3_0,
            	      							"org.xtext.example.mydsl.Cypher.StartPoint");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            // InternalCypherParser.g:4592:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==WHERE) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalCypherParser.g:4593:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalCypherParser.g:4593:4: (lv_where_4_0= ruleWhere )
                    // InternalCypherParser.g:4594:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getStartRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.xtext.example.mydsl.Cypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStart"


    // $ANTLR start "entryRuleStartPoint"
    // InternalCypherParser.g:4615:1: entryRuleStartPoint returns [EObject current=null] : iv_ruleStartPoint= ruleStartPoint EOF ;
    public final EObject entryRuleStartPoint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStartPoint = null;


        try {
            // InternalCypherParser.g:4615:51: (iv_ruleStartPoint= ruleStartPoint EOF )
            // InternalCypherParser.g:4616:2: iv_ruleStartPoint= ruleStartPoint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartPointRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStartPoint=ruleStartPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStartPoint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStartPoint"


    // $ANTLR start "ruleStartPoint"
    // InternalCypherParser.g:4622:1: ruleStartPoint returns [EObject current=null] : ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) ) ;
    public final EObject ruleStartPoint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_variable_0_0 = null;

        EObject lv_lookup_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4628:2: ( ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) ) )
            // InternalCypherParser.g:4629:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) )
            {
            // InternalCypherParser.g:4629:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) )
            // InternalCypherParser.g:4630:3: ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) )
            {
            // InternalCypherParser.g:4630:3: ( (lv_variable_0_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:4631:4: (lv_variable_0_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:4631:4: (lv_variable_0_0= ruleVariableDeclaration )
            // InternalCypherParser.g:4632:5: lv_variable_0_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_variable_0_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartPointRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_0_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStartPointAccess().getEqualsSignKeyword_1());
              		
            }
            // InternalCypherParser.g:4653:3: ( (lv_lookup_2_0= ruleLookup ) )
            // InternalCypherParser.g:4654:4: (lv_lookup_2_0= ruleLookup )
            {
            // InternalCypherParser.g:4654:4: (lv_lookup_2_0= ruleLookup )
            // InternalCypherParser.g:4655:5: lv_lookup_2_0= ruleLookup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_lookup_2_0=ruleLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartPointRule());
              					}
              					set(
              						current,
              						"lookup",
              						lv_lookup_2_0,
              						"org.xtext.example.mydsl.Cypher.Lookup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStartPoint"


    // $ANTLR start "entryRuleLookup"
    // InternalCypherParser.g:4676:1: entryRuleLookup returns [EObject current=null] : iv_ruleLookup= ruleLookup EOF ;
    public final EObject entryRuleLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLookup = null;


        try {
            // InternalCypherParser.g:4676:47: (iv_ruleLookup= ruleLookup EOF )
            // InternalCypherParser.g:4677:2: iv_ruleLookup= ruleLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLookup=ruleLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLookup"


    // $ANTLR start "ruleLookup"
    // InternalCypherParser.g:4683:1: ruleLookup returns [EObject current=null] : (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup ) ;
    public final EObject ruleLookup() throws RecognitionException {
        EObject current = null;

        EObject this_NodeLookup_0 = null;

        EObject this_RelationshipLookup_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4689:2: ( (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup ) )
            // InternalCypherParser.g:4690:2: (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup )
            {
            // InternalCypherParser.g:4690:2: (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==NODE) ) {
                alt64=1;
            }
            else if ( (LA64_0==RELATIONSHIP||LA64_0==REL) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // InternalCypherParser.g:4691:3: this_NodeLookup_0= ruleNodeLookup
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NodeLookup_0=ruleNodeLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NodeLookup_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:4703:3: this_RelationshipLookup_1= ruleRelationshipLookup
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RelationshipLookup_1=ruleRelationshipLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RelationshipLookup_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLookup"


    // $ANTLR start "entryRuleNodeLookup"
    // InternalCypherParser.g:4718:1: entryRuleNodeLookup returns [EObject current=null] : iv_ruleNodeLookup= ruleNodeLookup EOF ;
    public final EObject entryRuleNodeLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLookup = null;


        try {
            // InternalCypherParser.g:4718:51: (iv_ruleNodeLookup= ruleNodeLookup EOF )
            // InternalCypherParser.g:4719:2: iv_ruleNodeLookup= ruleNodeLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLookup=ruleNodeLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLookup"


    // $ANTLR start "ruleNodeLookup"
    // InternalCypherParser.g:4725:1: ruleNodeLookup returns [EObject current=null] : (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) ) ;
    public final EObject ruleNodeLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_IdentifiedIndexLookup_1 = null;

        EObject this_IndexQuery_2 = null;

        EObject this_IdLookup_3 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4731:2: ( (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) ) )
            // InternalCypherParser.g:4732:2: (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) )
            {
            // InternalCypherParser.g:4732:2: (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) )
            // InternalCypherParser.g:4733:3: otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )
            {
            otherlv_0=(Token)match(input,NODE,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodeLookupAccess().getNODEKeyword_0());
              		
            }
            // InternalCypherParser.g:4737:3: (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )
            int alt65=3;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    // InternalCypherParser.g:4738:4: this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifiedIndexLookup_1=ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdentifiedIndexLookup_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:4750:4: this_IndexQuery_2= ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IndexQuery_2=ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IndexQuery_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:4762:4: this_IdLookup_3= ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdLookup_3=ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdLookup_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLookup"


    // $ANTLR start "entryRuleRelationshipLookup"
    // InternalCypherParser.g:4778:1: entryRuleRelationshipLookup returns [EObject current=null] : iv_ruleRelationshipLookup= ruleRelationshipLookup EOF ;
    public final EObject entryRuleRelationshipLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipLookup = null;


        try {
            // InternalCypherParser.g:4778:59: (iv_ruleRelationshipLookup= ruleRelationshipLookup EOF )
            // InternalCypherParser.g:4779:2: iv_ruleRelationshipLookup= ruleRelationshipLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipLookup=ruleRelationshipLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipLookup"


    // $ANTLR start "ruleRelationshipLookup"
    // InternalCypherParser.g:4785:1: ruleRelationshipLookup returns [EObject current=null] : ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) ) ;
    public final EObject ruleRelationshipLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_IdentifiedIndexLookup_2 = null;

        EObject this_IndexQuery_3 = null;

        EObject this_IdLookup_4 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4791:2: ( ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) ) )
            // InternalCypherParser.g:4792:2: ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) )
            {
            // InternalCypherParser.g:4792:2: ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) )
            // InternalCypherParser.g:4793:3: (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )
            {
            // InternalCypherParser.g:4793:3: (otherlv_0= RELATIONSHIP | otherlv_1= REL )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==RELATIONSHIP) ) {
                alt66=1;
            }
            else if ( (LA66_0==REL) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // InternalCypherParser.g:4794:4: otherlv_0= RELATIONSHIP
                    {
                    otherlv_0=(Token)match(input,RELATIONSHIP,FOLLOW_72); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:4799:4: otherlv_1= REL
                    {
                    otherlv_1=(Token)match(input,REL,FOLLOW_72); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalCypherParser.g:4804:3: (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )
            int alt67=3;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // InternalCypherParser.g:4805:4: this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifiedIndexLookup_2=ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdentifiedIndexLookup_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:4817:4: this_IndexQuery_3= ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IndexQuery_3=ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IndexQuery_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:4829:4: this_IdLookup_4= ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdLookup_4=ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdLookup_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipLookup"


    // $ANTLR start "entryRuleIdentifiedIndexLookup"
    // InternalCypherParser.g:4845:1: entryRuleIdentifiedIndexLookup returns [EObject current=null] : iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF ;
    public final EObject entryRuleIdentifiedIndexLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentifiedIndexLookup = null;


        try {
            // InternalCypherParser.g:4845:62: (iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF )
            // InternalCypherParser.g:4846:2: iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifiedIndexLookup=ruleIdentifiedIndexLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifiedIndexLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdentifiedIndexLookup"


    // $ANTLR start "ruleIdentifiedIndexLookup"
    // InternalCypherParser.g:4852:1: ruleIdentifiedIndexLookup returns [EObject current=null] : (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis ) ;
    public final EObject ruleIdentifiedIndexLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token lv_value_5_0=null;
        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_indexName_1_0 = null;

        AntlrDatatypeRuleToken lv_key_3_0 = null;

        EObject lv_legacyParameter_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4858:2: ( (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis ) )
            // InternalCypherParser.g:4859:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis )
            {
            // InternalCypherParser.g:4859:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis )
            // InternalCypherParser.g:4860:3: otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0());
              		
            }
            // InternalCypherParser.g:4864:3: ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:4865:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:4865:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:4866:5: lv_indexName_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_indexName_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
              					}
              					set(
              						current,
              						"indexName",
              						lv_indexName_1_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalCypherParser.g:4887:3: ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:4888:4: (lv_key_3_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:4888:4: (lv_key_3_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:4889:5: lv_key_3_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_key_3_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_3_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,EqualsSign,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4());
              		
            }
            // InternalCypherParser.g:4910:3: ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==RULE_STRING_LITERAL) ) {
                alt68=1;
            }
            else if ( (LA68_0==LeftCurlyBracket) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // InternalCypherParser.g:4911:4: ( (lv_value_5_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalCypherParser.g:4911:4: ( (lv_value_5_0= RULE_STRING_LITERAL ) )
                    // InternalCypherParser.g:4912:5: (lv_value_5_0= RULE_STRING_LITERAL )
                    {
                    // InternalCypherParser.g:4912:5: (lv_value_5_0= RULE_STRING_LITERAL )
                    // InternalCypherParser.g:4913:6: lv_value_5_0= RULE_STRING_LITERAL
                    {
                    lv_value_5_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_5_0, grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifiedIndexLookupRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_5_0,
                      							"org.xtext.example.mydsl.Cypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:4930:4: ( (lv_legacyParameter_6_0= ruleLegacyParameter ) )
                    {
                    // InternalCypherParser.g:4930:4: ( (lv_legacyParameter_6_0= ruleLegacyParameter ) )
                    // InternalCypherParser.g:4931:5: (lv_legacyParameter_6_0= ruleLegacyParameter )
                    {
                    // InternalCypherParser.g:4931:5: (lv_legacyParameter_6_0= ruleLegacyParameter )
                    // InternalCypherParser.g:4932:6: lv_legacyParameter_6_0= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_legacyParameter_6_0=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
                      						}
                      						set(
                      							current,
                      							"legacyParameter",
                      							lv_legacyParameter_6_0,
                      							"org.xtext.example.mydsl.Cypher.LegacyParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdentifiedIndexLookup"


    // $ANTLR start "entryRuleIndexQuery"
    // InternalCypherParser.g:4958:1: entryRuleIndexQuery returns [EObject current=null] : iv_ruleIndexQuery= ruleIndexQuery EOF ;
    public final EObject entryRuleIndexQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIndexQuery = null;


        try {
            // InternalCypherParser.g:4958:51: (iv_ruleIndexQuery= ruleIndexQuery EOF )
            // InternalCypherParser.g:4959:2: iv_ruleIndexQuery= ruleIndexQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIndexQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIndexQuery=ruleIndexQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIndexQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndexQuery"


    // $ANTLR start "ruleIndexQuery"
    // InternalCypherParser.g:4965:1: ruleIndexQuery returns [EObject current=null] : (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleIndexQuery() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token lv_query_3_0=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_indexName_1_0 = null;

        EObject lv_parameter_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:4971:2: ( (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis ) )
            // InternalCypherParser.g:4972:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis )
            {
            // InternalCypherParser.g:4972:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis )
            // InternalCypherParser.g:4973:3: otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexQueryAccess().getColonKeyword_0());
              		
            }
            // InternalCypherParser.g:4977:3: ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:4978:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:4978:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:4979:5: lv_indexName_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_indexName_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexQueryRule());
              					}
              					set(
              						current,
              						"indexName",
              						lv_indexName_1_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalCypherParser.g:5000:3: ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==RULE_STRING_LITERAL) ) {
                alt69=1;
            }
            else if ( (LA69_0==DollarSign) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // InternalCypherParser.g:5001:4: ( (lv_query_3_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalCypherParser.g:5001:4: ( (lv_query_3_0= RULE_STRING_LITERAL ) )
                    // InternalCypherParser.g:5002:5: (lv_query_3_0= RULE_STRING_LITERAL )
                    {
                    // InternalCypherParser.g:5002:5: (lv_query_3_0= RULE_STRING_LITERAL )
                    // InternalCypherParser.g:5003:6: lv_query_3_0= RULE_STRING_LITERAL
                    {
                    lv_query_3_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_query_3_0, grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIndexQueryRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"query",
                      							lv_query_3_0,
                      							"org.xtext.example.mydsl.Cypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:5020:4: ( (lv_parameter_4_0= ruleParameter ) )
                    {
                    // InternalCypherParser.g:5020:4: ( (lv_parameter_4_0= ruleParameter ) )
                    // InternalCypherParser.g:5021:5: (lv_parameter_4_0= ruleParameter )
                    {
                    // InternalCypherParser.g:5021:5: (lv_parameter_4_0= ruleParameter )
                    // InternalCypherParser.g:5022:6: lv_parameter_4_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_parameter_4_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIndexQueryRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_4_0,
                      							"org.xtext.example.mydsl.Cypher.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndexQuery"


    // $ANTLR start "entryRuleIdLookup"
    // InternalCypherParser.g:5048:1: entryRuleIdLookup returns [EObject current=null] : iv_ruleIdLookup= ruleIdLookup EOF ;
    public final EObject entryRuleIdLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdLookup = null;


        try {
            // InternalCypherParser.g:5048:49: (iv_ruleIdLookup= ruleIdLookup EOF )
            // InternalCypherParser.g:5049:2: iv_ruleIdLookup= ruleIdLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdLookup=ruleIdLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdLookup"


    // $ANTLR start "ruleIdLookup"
    // InternalCypherParser.g:5055:1: ruleIdLookup returns [EObject current=null] : (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleIdLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_wildcard_3_0=null;
        Token otherlv_4=null;
        EObject lv_ids_1_0 = null;

        EObject lv_legacyParameter_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5061:2: ( (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis ) )
            // InternalCypherParser.g:5062:2: (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis )
            {
            // InternalCypherParser.g:5062:2: (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis )
            // InternalCypherParser.g:5063:3: otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalCypherParser.g:5067:3: ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) )
            int alt70=3;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt70=1;
                }
                break;
            case DollarSign:
                {
                alt70=2;
                }
                break;
            case Asterisk:
                {
                alt70=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }

            switch (alt70) {
                case 1 :
                    // InternalCypherParser.g:5068:4: ( (lv_ids_1_0= ruleLiteralIds ) )
                    {
                    // InternalCypherParser.g:5068:4: ( (lv_ids_1_0= ruleLiteralIds ) )
                    // InternalCypherParser.g:5069:5: (lv_ids_1_0= ruleLiteralIds )
                    {
                    // InternalCypherParser.g:5069:5: (lv_ids_1_0= ruleLiteralIds )
                    // InternalCypherParser.g:5070:6: lv_ids_1_0= ruleLiteralIds
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_ids_1_0=ruleLiteralIds();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdLookupRule());
                      						}
                      						set(
                      							current,
                      							"ids",
                      							lv_ids_1_0,
                      							"org.xtext.example.mydsl.Cypher.LiteralIds");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:5088:4: ( (lv_legacyParameter_2_0= ruleParameter ) )
                    {
                    // InternalCypherParser.g:5088:4: ( (lv_legacyParameter_2_0= ruleParameter ) )
                    // InternalCypherParser.g:5089:5: (lv_legacyParameter_2_0= ruleParameter )
                    {
                    // InternalCypherParser.g:5089:5: (lv_legacyParameter_2_0= ruleParameter )
                    // InternalCypherParser.g:5090:6: lv_legacyParameter_2_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_legacyParameter_2_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdLookupRule());
                      						}
                      						set(
                      							current,
                      							"legacyParameter",
                      							lv_legacyParameter_2_0,
                      							"org.xtext.example.mydsl.Cypher.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:5108:4: ( (lv_wildcard_3_0= Asterisk ) )
                    {
                    // InternalCypherParser.g:5108:4: ( (lv_wildcard_3_0= Asterisk ) )
                    // InternalCypherParser.g:5109:5: (lv_wildcard_3_0= Asterisk )
                    {
                    // InternalCypherParser.g:5109:5: (lv_wildcard_3_0= Asterisk )
                    // InternalCypherParser.g:5110:6: lv_wildcard_3_0= Asterisk
                    {
                    lv_wildcard_3_0=(Token)match(input,Asterisk,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_wildcard_3_0, grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdLookupRule());
                      						}
                      						setWithLastConsumed(current, "wildcard", lv_wildcard_3_0, "*");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdLookup"


    // $ANTLR start "entryRuleLiteralIds"
    // InternalCypherParser.g:5131:1: entryRuleLiteralIds returns [EObject current=null] : iv_ruleLiteralIds= ruleLiteralIds EOF ;
    public final EObject entryRuleLiteralIds() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralIds = null;


        try {
            // InternalCypherParser.g:5131:51: (iv_ruleLiteralIds= ruleLiteralIds EOF )
            // InternalCypherParser.g:5132:2: iv_ruleLiteralIds= ruleLiteralIds EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralIdsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralIds=ruleLiteralIds();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralIds; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteralIds"


    // $ANTLR start "ruleLiteralIds"
    // InternalCypherParser.g:5138:1: ruleLiteralIds returns [EObject current=null] : ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* ) ;
    public final EObject ruleLiteralIds() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_ids_0_0 = null;

        EObject lv_ids_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5144:2: ( ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* ) )
            // InternalCypherParser.g:5145:2: ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* )
            {
            // InternalCypherParser.g:5145:2: ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* )
            // InternalCypherParser.g:5146:3: ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )*
            {
            // InternalCypherParser.g:5146:3: ( (lv_ids_0_0= ruleDecimalInteger ) )
            // InternalCypherParser.g:5147:4: (lv_ids_0_0= ruleDecimalInteger )
            {
            // InternalCypherParser.g:5147:4: (lv_ids_0_0= ruleDecimalInteger )
            // InternalCypherParser.g:5148:5: lv_ids_0_0= ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_ids_0_0=ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLiteralIdsRule());
              					}
              					add(
              						current,
              						"ids",
              						lv_ids_0_0,
              						"org.xtext.example.mydsl.Cypher.DecimalInteger");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:5165:3: (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==Comma) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // InternalCypherParser.g:5166:4: otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_76); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalCypherParser.g:5170:4: ( (lv_ids_2_0= ruleDecimalInteger ) )
            	    // InternalCypherParser.g:5171:5: (lv_ids_2_0= ruleDecimalInteger )
            	    {
            	    // InternalCypherParser.g:5171:5: (lv_ids_2_0= ruleDecimalInteger )
            	    // InternalCypherParser.g:5172:6: lv_ids_2_0= ruleDecimalInteger
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_ids_2_0=ruleDecimalInteger();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLiteralIdsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"ids",
            	      							lv_ids_2_0,
            	      							"org.xtext.example.mydsl.Cypher.DecimalInteger");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteralIds"


    // $ANTLR start "entryRuleWhere"
    // InternalCypherParser.g:5194:1: entryRuleWhere returns [EObject current=null] : iv_ruleWhere= ruleWhere EOF ;
    public final EObject entryRuleWhere() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhere = null;


        try {
            // InternalCypherParser.g:5194:46: (iv_ruleWhere= ruleWhere EOF )
            // InternalCypherParser.g:5195:2: iv_ruleWhere= ruleWhere EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhereRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhere=ruleWhere();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhere; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWhere"


    // $ANTLR start "ruleWhere"
    // InternalCypherParser.g:5201:1: ruleWhere returns [EObject current=null] : (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) ) ;
    public final EObject ruleWhere() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5207:2: ( (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) ) )
            // InternalCypherParser.g:5208:2: (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) )
            {
            // InternalCypherParser.g:5208:2: (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) )
            // InternalCypherParser.g:5209:3: otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,WHERE,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWHEREKeyword_0());
              		
            }
            // InternalCypherParser.g:5213:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalCypherParser.g:5214:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalCypherParser.g:5214:4: (lv_expression_1_0= ruleExpression )
            // InternalCypherParser.g:5215:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhereRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWhere"


    // $ANTLR start "entryRulePattern"
    // InternalCypherParser.g:5236:1: entryRulePattern returns [EObject current=null] : iv_rulePattern= rulePattern EOF ;
    public final EObject entryRulePattern() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePattern = null;


        try {
            // InternalCypherParser.g:5236:48: (iv_rulePattern= rulePattern EOF )
            // InternalCypherParser.g:5237:2: iv_rulePattern= rulePattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePattern=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePattern"


    // $ANTLR start "rulePattern"
    // InternalCypherParser.g:5243:1: rulePattern returns [EObject current=null] : ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* ) ;
    public final EObject rulePattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_patterns_0_0 = null;

        EObject lv_patterns_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5249:2: ( ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* ) )
            // InternalCypherParser.g:5250:2: ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* )
            {
            // InternalCypherParser.g:5250:2: ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* )
            // InternalCypherParser.g:5251:3: ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )*
            {
            // InternalCypherParser.g:5251:3: ( (lv_patterns_0_0= rulePatternPart ) )
            // InternalCypherParser.g:5252:4: (lv_patterns_0_0= rulePatternPart )
            {
            // InternalCypherParser.g:5252:4: (lv_patterns_0_0= rulePatternPart )
            // InternalCypherParser.g:5253:5: lv_patterns_0_0= rulePatternPart
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_patterns_0_0=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternRule());
              					}
              					add(
              						current,
              						"patterns",
              						lv_patterns_0_0,
              						"org.xtext.example.mydsl.Cypher.PatternPart");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:5270:3: (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==Comma) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // InternalCypherParser.g:5271:4: otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalCypherParser.g:5275:4: ( (lv_patterns_2_0= rulePatternPart ) )
            	    // InternalCypherParser.g:5276:5: (lv_patterns_2_0= rulePatternPart )
            	    {
            	    // InternalCypherParser.g:5276:5: (lv_patterns_2_0= rulePatternPart )
            	    // InternalCypherParser.g:5277:6: lv_patterns_2_0= rulePatternPart
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_patterns_2_0=rulePatternPart();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getPatternRule());
            	      						}
            	      						add(
            	      							current,
            	      							"patterns",
            	      							lv_patterns_2_0,
            	      							"org.xtext.example.mydsl.Cypher.PatternPart");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePattern"


    // $ANTLR start "entryRulePatternPart"
    // InternalCypherParser.g:5299:1: entryRulePatternPart returns [EObject current=null] : iv_rulePatternPart= rulePatternPart EOF ;
    public final EObject entryRulePatternPart() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternPart = null;


        try {
            // InternalCypherParser.g:5299:52: (iv_rulePatternPart= rulePatternPart EOF )
            // InternalCypherParser.g:5300:2: iv_rulePatternPart= rulePatternPart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternPart=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternPart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternPart"


    // $ANTLR start "rulePatternPart"
    // InternalCypherParser.g:5306:1: rulePatternPart returns [EObject current=null] : ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart ) ;
    public final EObject rulePatternPart() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_var_0_0 = null;

        EObject lv_part_2_0 = null;

        EObject this_AnonymousPatternPart_3 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5312:2: ( ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart ) )
            // InternalCypherParser.g:5313:2: ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart )
            {
            // InternalCypherParser.g:5313:2: ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart )
            int alt73=2;
            switch ( input.LA(1) ) {
            case FIELDTERMINATOR:
            case RELATIONSHIP:
            case CONSTRAINT:
            case DESCENDING:
            case ASCENDING:
            case CONTAINS:
            case DISTINCT:
            case OPTIONAL:
            case PERIODIC:
            case EXPLAIN:
            case EXTRACT:
            case FOREACH:
            case HEADERS:
            case PROFILE:
            case ASSERT:
            case COMMIT:
            case CREATE:
            case CYPHER:
            case DELETE:
            case DETACH:
            case EXISTS:
            case FILTER:
            case REDUCE:
            case REMOVE:
            case RETURN:
            case SINGLE:
            case STARTS:
            case UNIQUE:
            case UNWIND:
            case COUNT:
            case FALSE:
            case INDEX:
            case LIMIT:
            case MATCH:
            case MERGE:
            case ORDER:
            case START:
            case UNION:
            case USING:
            case WHERE:
            case CASE:
            case DESC:
            case DROP:
            case ELSE:
            case ENDS:
            case FROM:
            case JOIN:
            case LOAD:
            case NODE:
            case NONE:
            case NULL:
            case SCAN:
            case SKIP:
            case THEN:
            case TRUE:
            case WHEN:
            case WITH:
            case ALL:
            case AND:
            case ANY:
            case ASC:
            case CSV:
            case END:
            case NOT:
            case REL:
            case SET:
            case XOR:
            case AS:
            case BY:
            case IN:
            case IS:
            case ON:
            case OR:
            case RULE_ID:
                {
                alt73=1;
                }
                break;
            case SHORTESTPATH:
                {
                int LA73_2 = input.LA(2);

                if ( (LA73_2==LeftParenthesis) ) {
                    alt73=2;
                }
                else if ( (LA73_2==EqualsSign) ) {
                    alt73=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 2, input);

                    throw nvae;
                }
                }
                break;
            case ALLSHORTESTPATHS:
                {
                int LA73_3 = input.LA(2);

                if ( (LA73_3==EqualsSign) ) {
                    alt73=1;
                }
                else if ( (LA73_3==LeftParenthesis) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 3, input);

                    throw nvae;
                }
                }
                break;
            case LeftParenthesis:
                {
                alt73=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // InternalCypherParser.g:5314:3: ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) )
                    {
                    // InternalCypherParser.g:5314:3: ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) )
                    // InternalCypherParser.g:5315:4: ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) )
                    {
                    // InternalCypherParser.g:5315:4: ( (lv_var_0_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:5316:5: (lv_var_0_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:5316:5: (lv_var_0_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:5317:6: lv_var_0_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_var_0_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternPartRule());
                      						}
                      						set(
                      							current,
                      							"var",
                      							lv_var_0_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1());
                      			
                    }
                    // InternalCypherParser.g:5338:4: ( (lv_part_2_0= ruleAnonymousPatternPart ) )
                    // InternalCypherParser.g:5339:5: (lv_part_2_0= ruleAnonymousPatternPart )
                    {
                    // InternalCypherParser.g:5339:5: (lv_part_2_0= ruleAnonymousPatternPart )
                    // InternalCypherParser.g:5340:6: lv_part_2_0= ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_part_2_0=ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternPartRule());
                      						}
                      						set(
                      							current,
                      							"part",
                      							lv_part_2_0,
                      							"org.xtext.example.mydsl.Cypher.AnonymousPatternPart");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:5359:3: this_AnonymousPatternPart_3= ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnonymousPatternPart_3=ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnonymousPatternPart_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternPart"


    // $ANTLR start "entryRuleAnonymousPatternPart"
    // InternalCypherParser.g:5374:1: entryRuleAnonymousPatternPart returns [EObject current=null] : iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF ;
    public final EObject entryRuleAnonymousPatternPart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnonymousPatternPart = null;


        try {
            // InternalCypherParser.g:5374:61: (iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF )
            // InternalCypherParser.g:5375:2: iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnonymousPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnonymousPatternPart=ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnonymousPatternPart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnonymousPatternPart"


    // $ANTLR start "ruleAnonymousPatternPart"
    // InternalCypherParser.g:5381:1: ruleAnonymousPatternPart returns [EObject current=null] : (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement ) ;
    public final EObject ruleAnonymousPatternPart() throws RecognitionException {
        EObject current = null;

        EObject this_ShortestPathPattern_0 = null;

        EObject this_PatternElement_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5387:2: ( (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement ) )
            // InternalCypherParser.g:5388:2: (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement )
            {
            // InternalCypherParser.g:5388:2: (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ALLSHORTESTPATHS||LA74_0==SHORTESTPATH) ) {
                alt74=1;
            }
            else if ( (LA74_0==LeftParenthesis) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // InternalCypherParser.g:5389:3: this_ShortestPathPattern_0= ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ShortestPathPattern_0=ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortestPathPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:5401:3: this_PatternElement_1= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PatternElement_1=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PatternElement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnonymousPatternPart"


    // $ANTLR start "entryRuleShortestPathPattern"
    // InternalCypherParser.g:5416:1: entryRuleShortestPathPattern returns [EObject current=null] : iv_ruleShortestPathPattern= ruleShortestPathPattern EOF ;
    public final EObject entryRuleShortestPathPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShortestPathPattern = null;


        try {
            // InternalCypherParser.g:5416:60: (iv_ruleShortestPathPattern= ruleShortestPathPattern EOF )
            // InternalCypherParser.g:5417:2: iv_ruleShortestPathPattern= ruleShortestPathPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShortestPathPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShortestPathPattern=ruleShortestPathPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShortestPathPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleShortestPathPattern"


    // $ANTLR start "ruleShortestPathPattern"
    // InternalCypherParser.g:5423:1: ruleShortestPathPattern returns [EObject current=null] : ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) ) ;
    public final EObject ruleShortestPathPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_patternElement_3_0 = null;

        EObject lv_patternElement_8_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5429:2: ( ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) ) )
            // InternalCypherParser.g:5430:2: ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) )
            {
            // InternalCypherParser.g:5430:2: ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==SHORTESTPATH) ) {
                alt75=1;
            }
            else if ( (LA75_0==ALLSHORTESTPATHS) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // InternalCypherParser.g:5431:3: ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis )
                    {
                    // InternalCypherParser.g:5431:3: ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis )
                    // InternalCypherParser.g:5432:4: () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis
                    {
                    // InternalCypherParser.g:5432:4: ()
                    // InternalCypherParser.g:5433:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,SHORTESTPATH,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1());
                      			
                    }
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2());
                      			
                    }
                    // InternalCypherParser.g:5450:4: ( (lv_patternElement_3_0= rulePatternElement ) )
                    // InternalCypherParser.g:5451:5: (lv_patternElement_3_0= rulePatternElement )
                    {
                    // InternalCypherParser.g:5451:5: (lv_patternElement_3_0= rulePatternElement )
                    // InternalCypherParser.g:5452:6: lv_patternElement_3_0= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_patternElement_3_0=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getShortestPathPatternRule());
                      						}
                      						set(
                      							current,
                      							"patternElement",
                      							lv_patternElement_3_0,
                      							"org.xtext.example.mydsl.Cypher.PatternElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:5475:3: ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis )
                    {
                    // InternalCypherParser.g:5475:3: ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis )
                    // InternalCypherParser.g:5476:4: () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis
                    {
                    // InternalCypherParser.g:5476:4: ()
                    // InternalCypherParser.g:5477:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_6=(Token)match(input,ALLSHORTESTPATHS,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1());
                      			
                    }
                    otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2());
                      			
                    }
                    // InternalCypherParser.g:5494:4: ( (lv_patternElement_8_0= rulePatternElement ) )
                    // InternalCypherParser.g:5495:5: (lv_patternElement_8_0= rulePatternElement )
                    {
                    // InternalCypherParser.g:5495:5: (lv_patternElement_8_0= rulePatternElement )
                    // InternalCypherParser.g:5496:6: lv_patternElement_8_0= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_patternElement_8_0=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getShortestPathPatternRule());
                      						}
                      						set(
                      							current,
                      							"patternElement",
                      							lv_patternElement_8_0,
                      							"org.xtext.example.mydsl.Cypher.PatternElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleShortestPathPattern"


    // $ANTLR start "entryRulePatternElement"
    // InternalCypherParser.g:5522:1: entryRulePatternElement returns [EObject current=null] : iv_rulePatternElement= rulePatternElement EOF ;
    public final EObject entryRulePatternElement() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternElement = null;


        try {
            // InternalCypherParser.g:5522:55: (iv_rulePatternElement= rulePatternElement EOF )
            // InternalCypherParser.g:5523:2: iv_rulePatternElement= rulePatternElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternElement=rulePatternElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternElement"


    // $ANTLR start "rulePatternElement"
    // InternalCypherParser.g:5529:1: rulePatternElement returns [EObject current=null] : ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) ) ;
    public final EObject rulePatternElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_nodepattern_0_0 = null;

        EObject lv_chain_1_0 = null;

        EObject this_PatternElement_3 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5535:2: ( ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) ) )
            // InternalCypherParser.g:5536:2: ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) )
            {
            // InternalCypherParser.g:5536:2: ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==LeftParenthesis) ) {
                int LA77_1 = input.LA(2);

                if ( ((LA77_1>=ALLSHORTESTPATHS && LA77_1<=WHERE)||(LA77_1>=CASE && LA77_1<=XOR)||(LA77_1>=AS && LA77_1<=OR)||LA77_1==DollarSign||LA77_1==RightParenthesis||LA77_1==Colon||LA77_1==LeftCurlyBracket||LA77_1==RULE_ID) ) {
                    alt77=1;
                }
                else if ( (LA77_1==LeftParenthesis) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // InternalCypherParser.g:5537:3: ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* )
                    {
                    // InternalCypherParser.g:5537:3: ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* )
                    // InternalCypherParser.g:5538:4: ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )*
                    {
                    // InternalCypherParser.g:5538:4: ( (lv_nodepattern_0_0= ruleNodePattern ) )
                    // InternalCypherParser.g:5539:5: (lv_nodepattern_0_0= ruleNodePattern )
                    {
                    // InternalCypherParser.g:5539:5: (lv_nodepattern_0_0= ruleNodePattern )
                    // InternalCypherParser.g:5540:6: lv_nodepattern_0_0= ruleNodePattern
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_77);
                    lv_nodepattern_0_0=ruleNodePattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternElementRule());
                      						}
                      						set(
                      							current,
                      							"nodepattern",
                      							lv_nodepattern_0_0,
                      							"org.xtext.example.mydsl.Cypher.NodePattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:5557:4: ( (lv_chain_1_0= rulePatternElementChain ) )*
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( (LA76_0==HyphenMinus||LA76_0==LessThanSign) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // InternalCypherParser.g:5558:5: (lv_chain_1_0= rulePatternElementChain )
                    	    {
                    	    // InternalCypherParser.g:5558:5: (lv_chain_1_0= rulePatternElementChain )
                    	    // InternalCypherParser.g:5559:6: lv_chain_1_0= rulePatternElementChain
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_77);
                    	    lv_chain_1_0=rulePatternElementChain();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getPatternElementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"chain",
                    	      							lv_chain_1_0,
                    	      							"org.xtext.example.mydsl.Cypher.PatternElementChain");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop76;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:5578:3: (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis )
                    {
                    // InternalCypherParser.g:5578:3: (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis )
                    // InternalCypherParser.g:5579:4: otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_26);
                    this_PatternElement_3=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PatternElement_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternElement"


    // $ANTLR start "entryRuleNodePattern"
    // InternalCypherParser.g:5603:1: entryRuleNodePattern returns [EObject current=null] : iv_ruleNodePattern= ruleNodePattern EOF ;
    public final EObject entryRuleNodePattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodePattern = null;


        try {
            // InternalCypherParser.g:5603:52: (iv_ruleNodePattern= ruleNodePattern EOF )
            // InternalCypherParser.g:5604:2: iv_ruleNodePattern= ruleNodePattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodePatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodePattern=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodePattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodePattern"


    // $ANTLR start "ruleNodePattern"
    // InternalCypherParser.g:5610:1: ruleNodePattern returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? (this_NodeLabels_3= ruleNodeLabels[$current] )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleNodePattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject lv_variable_2_0 = null;

        EObject this_NodeLabels_3 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5616:2: ( ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? (this_NodeLabels_3= ruleNodeLabels[$current] )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis ) )
            // InternalCypherParser.g:5617:2: ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? (this_NodeLabels_3= ruleNodeLabels[$current] )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis )
            {
            // InternalCypherParser.g:5617:2: ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? (this_NodeLabels_3= ruleNodeLabels[$current] )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis )
            // InternalCypherParser.g:5618:3: () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? (this_NodeLabels_3= ruleNodeLabels[$current] )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis
            {
            // InternalCypherParser.g:5618:3: ()
            // InternalCypherParser.g:5619:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNodePatternAccess().getNodePatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalCypherParser.g:5632:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=ALLSHORTESTPATHS && LA78_0<=WHERE)||(LA78_0>=CASE && LA78_0<=XOR)||(LA78_0>=AS && LA78_0<=OR)||LA78_0==RULE_ID) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalCypherParser.g:5633:4: (lv_variable_2_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:5633:4: (lv_variable_2_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:5634:5: lv_variable_2_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_79);
                    lv_variable_2_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"variable",
                      						lv_variable_2_0,
                      						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:5651:3: (this_NodeLabels_3= ruleNodeLabels[$current] )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Colon) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalCypherParser.g:5652:4: this_NodeLabels_3= ruleNodeLabels[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getNodePatternRule());
                      				}
                      				newCompositeNode(grammarAccess.getNodePatternAccess().getNodeLabelsParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_80);
                    this_NodeLabels_3=ruleNodeLabels(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_NodeLabels_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalCypherParser.g:5667:3: ( (lv_properties_4_0= ruleProperties ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==DollarSign||LA80_0==LeftCurlyBracket) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // InternalCypherParser.g:5668:4: (lv_properties_4_0= ruleProperties )
                    {
                    // InternalCypherParser.g:5668:4: (lv_properties_4_0= ruleProperties )
                    // InternalCypherParser.g:5669:5: lv_properties_4_0= ruleProperties
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_26);
                    lv_properties_4_0=ruleProperties();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"properties",
                      						lv_properties_4_0,
                      						"org.xtext.example.mydsl.Cypher.Properties");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodePattern"


    // $ANTLR start "entryRulePatternElementChain"
    // InternalCypherParser.g:5694:1: entryRulePatternElementChain returns [EObject current=null] : iv_rulePatternElementChain= rulePatternElementChain EOF ;
    public final EObject entryRulePatternElementChain() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternElementChain = null;


        try {
            // InternalCypherParser.g:5694:60: (iv_rulePatternElementChain= rulePatternElementChain EOF )
            // InternalCypherParser.g:5695:2: iv_rulePatternElementChain= rulePatternElementChain EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternElementChainRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternElementChain=rulePatternElementChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternElementChain; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternElementChain"


    // $ANTLR start "rulePatternElementChain"
    // InternalCypherParser.g:5701:1: rulePatternElementChain returns [EObject current=null] : ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) ) ;
    public final EObject rulePatternElementChain() throws RecognitionException {
        EObject current = null;

        EObject lv_relationshipPattern_0_0 = null;

        EObject lv_nodePattern_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5707:2: ( ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) ) )
            // InternalCypherParser.g:5708:2: ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) )
            {
            // InternalCypherParser.g:5708:2: ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) )
            // InternalCypherParser.g:5709:3: ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) )
            {
            // InternalCypherParser.g:5709:3: ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) )
            // InternalCypherParser.g:5710:4: (lv_relationshipPattern_0_0= ruleRelationshipPattern )
            {
            // InternalCypherParser.g:5710:4: (lv_relationshipPattern_0_0= ruleRelationshipPattern )
            // InternalCypherParser.g:5711:5: lv_relationshipPattern_0_0= ruleRelationshipPattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_relationshipPattern_0_0=ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternElementChainRule());
              					}
              					set(
              						current,
              						"relationshipPattern",
              						lv_relationshipPattern_0_0,
              						"org.xtext.example.mydsl.Cypher.RelationshipPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:5728:3: ( (lv_nodePattern_1_0= ruleNodePattern ) )
            // InternalCypherParser.g:5729:4: (lv_nodePattern_1_0= ruleNodePattern )
            {
            // InternalCypherParser.g:5729:4: (lv_nodePattern_1_0= ruleNodePattern )
            // InternalCypherParser.g:5730:5: lv_nodePattern_1_0= ruleNodePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_nodePattern_1_0=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternElementChainRule());
              					}
              					set(
              						current,
              						"nodePattern",
              						lv_nodePattern_1_0,
              						"org.xtext.example.mydsl.Cypher.NodePattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternElementChain"


    // $ANTLR start "entryRuleRelationshipPattern"
    // InternalCypherParser.g:5751:1: entryRuleRelationshipPattern returns [EObject current=null] : iv_ruleRelationshipPattern= ruleRelationshipPattern EOF ;
    public final EObject entryRuleRelationshipPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPattern = null;


        try {
            // InternalCypherParser.g:5751:60: (iv_ruleRelationshipPattern= ruleRelationshipPattern EOF )
            // InternalCypherParser.g:5752:2: iv_ruleRelationshipPattern= ruleRelationshipPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPattern=ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPattern"


    // $ANTLR start "ruleRelationshipPattern"
    // InternalCypherParser.g:5758:1: ruleRelationshipPattern returns [EObject current=null] : ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) ) ;
    public final EObject ruleRelationshipPattern() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_incoming_1_0 = null;

        EObject lv_detail_3_0 = null;

        AntlrDatatypeRuleToken lv_outgoing_5_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5764:2: ( ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) ) )
            // InternalCypherParser.g:5765:2: ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) )
            {
            // InternalCypherParser.g:5765:2: ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) )
            // InternalCypherParser.g:5766:3: () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? )
            {
            // InternalCypherParser.g:5766:3: ()
            // InternalCypherParser.g:5767:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:5776:3: ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? )
            // InternalCypherParser.g:5777:4: ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )?
            {
            // InternalCypherParser.g:5777:4: ( (lv_incoming_1_0= ruleLeftArrowHead ) )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==LessThanSign) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // InternalCypherParser.g:5778:5: (lv_incoming_1_0= ruleLeftArrowHead )
                    {
                    // InternalCypherParser.g:5778:5: (lv_incoming_1_0= ruleLeftArrowHead )
                    // InternalCypherParser.g:5779:6: lv_incoming_1_0= ruleLeftArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_32);
                    lv_incoming_1_0=ruleLeftArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"incoming",
                      							lv_incoming_1_0 != null,
                      							"org.xtext.example.mydsl.Cypher.LeftArrowHead");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1());
              			
            }
            pushFollow(FOLLOW_81);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }
            // InternalCypherParser.g:5806:4: ( (lv_detail_3_0= ruleRelationshipDetail ) )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==LeftSquareBracket) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // InternalCypherParser.g:5807:5: (lv_detail_3_0= ruleRelationshipDetail )
                    {
                    // InternalCypherParser.g:5807:5: (lv_detail_3_0= ruleRelationshipDetail )
                    // InternalCypherParser.g:5808:6: lv_detail_3_0= ruleRelationshipDetail
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_32);
                    lv_detail_3_0=ruleRelationshipDetail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"detail",
                      							lv_detail_3_0,
                      							"org.xtext.example.mydsl.Cypher.RelationshipDetail");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3());
              			
            }
            pushFollow(FOLLOW_82);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }
            // InternalCypherParser.g:5835:4: ( (lv_outgoing_5_0= ruleRightArrowHead ) )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==GreaterThanSign) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // InternalCypherParser.g:5836:5: (lv_outgoing_5_0= ruleRightArrowHead )
                    {
                    // InternalCypherParser.g:5836:5: (lv_outgoing_5_0= ruleRightArrowHead )
                    // InternalCypherParser.g:5837:6: lv_outgoing_5_0= ruleRightArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_outgoing_5_0=ruleRightArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"outgoing",
                      							lv_outgoing_5_0 != null,
                      							"org.xtext.example.mydsl.Cypher.RightArrowHead");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPattern"


    // $ANTLR start "entryRuleRelationshipDetail"
    // InternalCypherParser.g:5859:1: entryRuleRelationshipDetail returns [EObject current=null] : iv_ruleRelationshipDetail= ruleRelationshipDetail EOF ;
    public final EObject entryRuleRelationshipDetail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipDetail = null;


        try {
            // InternalCypherParser.g:5859:59: (iv_ruleRelationshipDetail= ruleRelationshipDetail EOF )
            // InternalCypherParser.g:5860:2: iv_ruleRelationshipDetail= ruleRelationshipDetail EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipDetailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipDetail=ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipDetail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipDetail"


    // $ANTLR start "ruleRelationshipDetail"
    // InternalCypherParser.g:5866:1: ruleRelationshipDetail returns [EObject current=null] : ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? (this_RelationshipTypes_4= ruleRelationshipTypes[$current] )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket ) ;
    public final EObject ruleRelationshipDetail() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_7=null;
        EObject lv_variable_2_0 = null;

        EObject this_RelationshipTypes_4 = null;

        EObject lv_range_5_0 = null;

        EObject lv_properties_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5872:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? (this_RelationshipTypes_4= ruleRelationshipTypes[$current] )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket ) )
            // InternalCypherParser.g:5873:2: ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? (this_RelationshipTypes_4= ruleRelationshipTypes[$current] )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket )
            {
            // InternalCypherParser.g:5873:2: ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? (this_RelationshipTypes_4= ruleRelationshipTypes[$current] )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket )
            // InternalCypherParser.g:5874:3: () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? (this_RelationshipTypes_4= ruleRelationshipTypes[$current] )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket
            {
            // InternalCypherParser.g:5874:3: ()
            // InternalCypherParser.g:5875:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1());
              		
            }
            // InternalCypherParser.g:5888:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( ((LA84_0>=ALLSHORTESTPATHS && LA84_0<=WHERE)||(LA84_0>=CASE && LA84_0<=XOR)||(LA84_0>=AS && LA84_0<=OR)||LA84_0==RULE_ID) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // InternalCypherParser.g:5889:4: (lv_variable_2_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:5889:4: (lv_variable_2_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:5890:5: lv_variable_2_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_84);
                    lv_variable_2_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"variable",
                      						lv_variable_2_0,
                      						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:5907:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==QuestionMark) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // InternalCypherParser.g:5908:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalCypherParser.g:5908:4: (lv_optional_3_0= QuestionMark )
                    // InternalCypherParser.g:5909:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_85); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getRelationshipDetailRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:5921:3: (this_RelationshipTypes_4= ruleRelationshipTypes[$current] )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==Colon) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // InternalCypherParser.g:5922:4: this_RelationshipTypes_4= ruleRelationshipTypes[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getRelationshipDetailRule());
                      				}
                      				newCompositeNode(grammarAccess.getRelationshipDetailAccess().getRelationshipTypesParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_86);
                    this_RelationshipTypes_4=ruleRelationshipTypes(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_RelationshipTypes_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalCypherParser.g:5937:3: ( (lv_range_5_0= ruleRangeLiteral ) )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==Asterisk) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // InternalCypherParser.g:5938:4: (lv_range_5_0= ruleRangeLiteral )
                    {
                    // InternalCypherParser.g:5938:4: (lv_range_5_0= ruleRangeLiteral )
                    // InternalCypherParser.g:5939:5: lv_range_5_0= ruleRangeLiteral
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_87);
                    lv_range_5_0=ruleRangeLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"range",
                      						lv_range_5_0,
                      						"org.xtext.example.mydsl.Cypher.RangeLiteral");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:5956:3: ( (lv_properties_6_0= ruleProperties ) )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==DollarSign||LA88_0==LeftCurlyBracket) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // InternalCypherParser.g:5957:4: (lv_properties_6_0= ruleProperties )
                    {
                    // InternalCypherParser.g:5957:4: (lv_properties_6_0= ruleProperties )
                    // InternalCypherParser.g:5958:5: lv_properties_6_0= ruleProperties
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0());
                      				
                    }
                    pushFollow(FOLLOW_34);
                    lv_properties_6_0=ruleProperties();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"properties",
                      						lv_properties_6_0,
                      						"org.xtext.example.mydsl.Cypher.Properties");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipDetail"


    // $ANTLR start "entryRuleProperties"
    // InternalCypherParser.g:5983:1: entryRuleProperties returns [EObject current=null] : iv_ruleProperties= ruleProperties EOF ;
    public final EObject entryRuleProperties() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleProperties = null;


        try {
            // InternalCypherParser.g:5983:51: (iv_ruleProperties= ruleProperties EOF )
            // InternalCypherParser.g:5984:2: iv_ruleProperties= ruleProperties EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertiesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProperties=ruleProperties();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProperties; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProperties"


    // $ANTLR start "ruleProperties"
    // InternalCypherParser.g:5990:1: ruleProperties returns [EObject current=null] : (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter ) ;
    public final EObject ruleProperties() throws RecognitionException {
        EObject current = null;

        EObject this_MapLiteral_0 = null;

        EObject this_Parameter_1 = null;

        EObject this_LegacyParameter_2 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:5996:2: ( (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter ) )
            // InternalCypherParser.g:5997:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )
            {
            // InternalCypherParser.g:5997:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )
            int alt89=3;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // InternalCypherParser.g:5998:3: this_MapLiteral_0= ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MapLiteral_0=ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MapLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:6010:3: this_Parameter_1= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Parameter_1=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Parameter_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:6022:3: this_LegacyParameter_2= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyParameter_2=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyParameter_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProperties"


    // $ANTLR start "entryRuleRelType"
    // InternalCypherParser.g:6037:1: entryRuleRelType returns [String current=null] : iv_ruleRelType= ruleRelType EOF ;
    public final String entryRuleRelType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelType = null;


        try {
            // InternalCypherParser.g:6037:47: (iv_ruleRelType= ruleRelType EOF )
            // InternalCypherParser.g:6038:2: iv_ruleRelType= ruleRelType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelType=ruleRelType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelType"


    // $ANTLR start "ruleRelType"
    // InternalCypherParser.g:6044:1: ruleRelType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Colon this_RelTypeName_1= ruleRelTypeName ) ;
    public final AntlrDatatypeRuleToken ruleRelType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_RelTypeName_1 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6050:2: ( (kw= Colon this_RelTypeName_1= ruleRelTypeName ) )
            // InternalCypherParser.g:6051:2: (kw= Colon this_RelTypeName_1= ruleRelTypeName )
            {
            // InternalCypherParser.g:6051:2: (kw= Colon this_RelTypeName_1= ruleRelTypeName )
            // InternalCypherParser.g:6052:3: kw= Colon this_RelTypeName_1= ruleRelTypeName
            {
            kw=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getRelTypeAccess().getColonKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_RelTypeName_1=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_RelTypeName_1);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelType"


    // $ANTLR start "ruleRelationshipTypes"
    // InternalCypherParser.g:6072:1: ruleRelationshipTypes[EObject in_current] returns [EObject current=in_current] : (otherlv_0= Colon ( (lv_relTypeNames_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) ) )* ) ;
    public final EObject ruleRelationshipTypes(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_relTypeNames_1_0 = null;

        AntlrDatatypeRuleToken lv_relTypeNames_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6078:2: ( (otherlv_0= Colon ( (lv_relTypeNames_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) ) )* ) )
            // InternalCypherParser.g:6079:2: (otherlv_0= Colon ( (lv_relTypeNames_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) ) )* )
            {
            // InternalCypherParser.g:6079:2: (otherlv_0= Colon ( (lv_relTypeNames_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) ) )* )
            // InternalCypherParser.g:6080:3: otherlv_0= Colon ( (lv_relTypeNames_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) ) )*
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipTypesAccess().getColonKeyword_0());
              		
            }
            // InternalCypherParser.g:6084:3: ( (lv_relTypeNames_1_0= ruleRelTypeName ) )
            // InternalCypherParser.g:6085:4: (lv_relTypeNames_1_0= ruleRelTypeName )
            {
            // InternalCypherParser.g:6085:4: (lv_relTypeNames_1_0= ruleRelTypeName )
            // InternalCypherParser.g:6086:5: lv_relTypeNames_1_0= ruleRelTypeName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_88);
            lv_relTypeNames_1_0=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipTypesRule());
              					}
              					add(
              						current,
              						"relTypeNames",
              						lv_relTypeNames_1_0,
              						"org.xtext.example.mydsl.Cypher.RelTypeName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:6103:3: (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) ) )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==VerticalLine) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // InternalCypherParser.g:6104:4: otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeNames_4_0= ruleRelTypeName ) )
            	    {
            	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_89); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0());
            	      			
            	    }
            	    // InternalCypherParser.g:6108:4: (otherlv_3= Colon )?
            	    int alt90=2;
            	    int LA90_0 = input.LA(1);

            	    if ( (LA90_0==Colon) ) {
            	        alt90=1;
            	    }
            	    switch (alt90) {
            	        case 1 :
            	            // InternalCypherParser.g:6109:5: otherlv_3= Colon
            	            {
            	            otherlv_3=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    // InternalCypherParser.g:6114:4: ( (lv_relTypeNames_4_0= ruleRelTypeName ) )
            	    // InternalCypherParser.g:6115:5: (lv_relTypeNames_4_0= ruleRelTypeName )
            	    {
            	    // InternalCypherParser.g:6115:5: (lv_relTypeNames_4_0= ruleRelTypeName )
            	    // InternalCypherParser.g:6116:6: lv_relTypeNames_4_0= ruleRelTypeName
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_2_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_88);
            	    lv_relTypeNames_4_0=ruleRelTypeName();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRelationshipTypesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"relTypeNames",
            	      							lv_relTypeNames_4_0,
            	      							"org.xtext.example.mydsl.Cypher.RelTypeName");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipTypes"


    // $ANTLR start "ruleNodeLabels"
    // InternalCypherParser.g:6139:1: ruleNodeLabels[EObject in_current] returns [EObject current=in_current] : ( (lv_nodeLabels_0_0= ruleNodeLabel ) )+ ;
    public final EObject ruleNodeLabels(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_nodeLabels_0_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6145:2: ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) )+ )
            // InternalCypherParser.g:6146:2: ( (lv_nodeLabels_0_0= ruleNodeLabel ) )+
            {
            // InternalCypherParser.g:6146:2: ( (lv_nodeLabels_0_0= ruleNodeLabel ) )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==Colon) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // InternalCypherParser.g:6147:3: (lv_nodeLabels_0_0= ruleNodeLabel )
            	    {
            	    // InternalCypherParser.g:6147:3: (lv_nodeLabels_0_0= ruleNodeLabel )
            	    // InternalCypherParser.g:6148:4: lv_nodeLabels_0_0= ruleNodeLabel
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0());
            	      			
            	    }
            	    pushFollow(FOLLOW_90);
            	    lv_nodeLabels_0_0=ruleNodeLabel();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				if (current==null) {
            	      					current = createModelElementForParent(grammarAccess.getNodeLabelsRule());
            	      				}
            	      				add(
            	      					current,
            	      					"nodeLabels",
            	      					lv_nodeLabels_0_0,
            	      					"org.xtext.example.mydsl.Cypher.NodeLabel");
            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLabels"


    // $ANTLR start "entryRuleNodeLabel"
    // InternalCypherParser.g:6168:1: entryRuleNodeLabel returns [EObject current=null] : iv_ruleNodeLabel= ruleNodeLabel EOF ;
    public final EObject entryRuleNodeLabel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLabel = null;


        try {
            // InternalCypherParser.g:6168:50: (iv_ruleNodeLabel= ruleNodeLabel EOF )
            // InternalCypherParser.g:6169:2: iv_ruleNodeLabel= ruleNodeLabel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLabelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLabel=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLabel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLabel"


    // $ANTLR start "ruleNodeLabel"
    // InternalCypherParser.g:6175:1: ruleNodeLabel returns [EObject current=null] : (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) ) ;
    public final EObject ruleNodeLabel() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        AntlrDatatypeRuleToken lv_labelName_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6181:2: ( (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) ) )
            // InternalCypherParser.g:6182:2: (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) )
            {
            // InternalCypherParser.g:6182:2: (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) )
            // InternalCypherParser.g:6183:3: otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) )
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodeLabelAccess().getColonKeyword_0());
              		
            }
            // InternalCypherParser.g:6187:3: ( (lv_labelName_1_0= ruleLabelName ) )
            // InternalCypherParser.g:6188:4: (lv_labelName_1_0= ruleLabelName )
            {
            // InternalCypherParser.g:6188:4: (lv_labelName_1_0= ruleLabelName )
            // InternalCypherParser.g:6189:5: lv_labelName_1_0= ruleLabelName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_labelName_1_0=ruleLabelName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodeLabelRule());
              					}
              					set(
              						current,
              						"labelName",
              						lv_labelName_1_0,
              						"org.xtext.example.mydsl.Cypher.LabelName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLabel"


    // $ANTLR start "entryRuleRangeLiteral"
    // InternalCypherParser.g:6210:1: entryRuleRangeLiteral returns [EObject current=null] : iv_ruleRangeLiteral= ruleRangeLiteral EOF ;
    public final EObject entryRuleRangeLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeLiteral = null;


        try {
            // InternalCypherParser.g:6210:53: (iv_ruleRangeLiteral= ruleRangeLiteral EOF )
            // InternalCypherParser.g:6211:2: iv_ruleRangeLiteral= ruleRangeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRangeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRangeLiteral=ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRangeLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRangeLiteral"


    // $ANTLR start "ruleRangeLiteral"
    // InternalCypherParser.g:6217:1: ruleRangeLiteral returns [EObject current=null] : ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )? ) ;
    public final EObject ruleRangeLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_variableLength_3_0=null;
        AntlrDatatypeRuleToken lv_lower_2_0 = null;

        AntlrDatatypeRuleToken lv_upper_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6223:2: ( ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )? ) )
            // InternalCypherParser.g:6224:2: ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )? )
            {
            // InternalCypherParser.g:6224:2: ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )? )
            // InternalCypherParser.g:6225:3: () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )?
            {
            // InternalCypherParser.g:6225:3: ()
            // InternalCypherParser.g:6226:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Asterisk,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1());
              		
            }
            // InternalCypherParser.g:6239:3: ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )?
            int alt96=2;
            switch ( input.LA(1) ) {
                case FullStopFullStop:
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                    {
                    alt96=1;
                    }
                    break;
                case LeftCurlyBracket:
                    {
                    int LA96_2 = input.LA(2);

                    if ( (synpred121_InternalCypherParser()) ) {
                        alt96=1;
                    }
                    }
                    break;
                case DollarSign:
                    {
                    int LA96_3 = input.LA(2);

                    if ( (synpred121_InternalCypherParser()) ) {
                        alt96=1;
                    }
                    }
                    break;
                case RightSquareBracket:
                    {
                    int LA96_4 = input.LA(2);

                    if ( (synpred121_InternalCypherParser()) ) {
                        alt96=1;
                    }
                    }
                    break;
                case EOF:
                    {
                    int LA96_5 = input.LA(2);

                    if ( (synpred121_InternalCypherParser()) ) {
                        alt96=1;
                    }
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // InternalCypherParser.g:6240:4: ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )?
                    {
                    // InternalCypherParser.g:6240:4: ( (lv_lower_2_0= ruleNumber ) )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( ((LA93_0>=RULE_HEX && LA93_0<=RULE_DECIMAL)) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // InternalCypherParser.g:6241:5: (lv_lower_2_0= ruleNumber )
                            {
                            // InternalCypherParser.g:6241:5: (lv_lower_2_0= ruleNumber )
                            // InternalCypherParser.g:6242:6: lv_lower_2_0= ruleNumber
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0());
                              					
                            }
                            pushFollow(FOLLOW_92);
                            lv_lower_2_0=ruleNumber();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getRangeLiteralRule());
                              						}
                              						set(
                              							current,
                              							"lower",
                              							lv_lower_2_0,
                              							"org.xtext.example.mydsl.Cypher.Number");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    // InternalCypherParser.g:6259:4: ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==FullStopFullStop) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // InternalCypherParser.g:6260:5: ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )?
                            {
                            // InternalCypherParser.g:6260:5: ( (lv_variableLength_3_0= FullStopFullStop ) )
                            // InternalCypherParser.g:6261:6: (lv_variableLength_3_0= FullStopFullStop )
                            {
                            // InternalCypherParser.g:6261:6: (lv_variableLength_3_0= FullStopFullStop )
                            // InternalCypherParser.g:6262:7: lv_variableLength_3_0= FullStopFullStop
                            {
                            lv_variableLength_3_0=(Token)match(input,FullStopFullStop,FOLLOW_14); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_variableLength_3_0, grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getRangeLiteralRule());
                              							}
                              							setWithLastConsumed(current, "variableLength", lv_variableLength_3_0 != null, "..");
                              						
                            }

                            }


                            }

                            // InternalCypherParser.g:6274:5: ( (lv_upper_4_0= ruleNumber ) )?
                            int alt94=2;
                            int LA94_0 = input.LA(1);

                            if ( ((LA94_0>=RULE_HEX && LA94_0<=RULE_DECIMAL)) ) {
                                alt94=1;
                            }
                            switch (alt94) {
                                case 1 :
                                    // InternalCypherParser.g:6275:6: (lv_upper_4_0= ruleNumber )
                                    {
                                    // InternalCypherParser.g:6275:6: (lv_upper_4_0= ruleNumber )
                                    // InternalCypherParser.g:6276:7: lv_upper_4_0= ruleNumber
                                    {
                                    if ( state.backtracking==0 ) {

                                      							newCompositeNode(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0());
                                      						
                                    }
                                    pushFollow(FOLLOW_2);
                                    lv_upper_4_0=ruleNumber();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							if (current==null) {
                                      								current = createModelElementForParent(grammarAccess.getRangeLiteralRule());
                                      							}
                                      							set(
                                      								current,
                                      								"upper",
                                      								lv_upper_4_0,
                                      								"org.xtext.example.mydsl.Cypher.Number");
                                      							afterParserOrEnumRuleCall();
                                      						
                                    }

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRangeLiteral"


    // $ANTLR start "entryRuleLabelName"
    // InternalCypherParser.g:6299:1: entryRuleLabelName returns [String current=null] : iv_ruleLabelName= ruleLabelName EOF ;
    public final String entryRuleLabelName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLabelName = null;


        try {
            // InternalCypherParser.g:6299:49: (iv_ruleLabelName= ruleLabelName EOF )
            // InternalCypherParser.g:6300:2: iv_ruleLabelName= ruleLabelName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelName=ruleLabelName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLabelName"


    // $ANTLR start "ruleLabelName"
    // InternalCypherParser.g:6306:1: ruleLabelName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleLabelName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6312:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:6313:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLabelName"


    // $ANTLR start "entryRuleRelTypeName"
    // InternalCypherParser.g:6326:1: entryRuleRelTypeName returns [String current=null] : iv_ruleRelTypeName= ruleRelTypeName EOF ;
    public final String entryRuleRelTypeName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelTypeName = null;


        try {
            // InternalCypherParser.g:6326:51: (iv_ruleRelTypeName= ruleRelTypeName EOF )
            // InternalCypherParser.g:6327:2: iv_ruleRelTypeName= ruleRelTypeName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelTypeNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelTypeName=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelTypeName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelTypeName"


    // $ANTLR start "ruleRelTypeName"
    // InternalCypherParser.g:6333:1: ruleRelTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleRelTypeName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6339:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:6340:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelTypeName"


    // $ANTLR start "entryRuleExpression"
    // InternalCypherParser.g:6353:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalCypherParser.g:6353:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalCypherParser.g:6354:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalCypherParser.g:6360:1: ruleExpression returns [EObject current=null] : this_OrExpression_0= ruleOrExpression ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_OrExpression_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6366:2: (this_OrExpression_0= ruleOrExpression )
            // InternalCypherParser.g:6367:2: this_OrExpression_0= ruleOrExpression
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_OrExpression_0=ruleOrExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_OrExpression_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleOrExpression"
    // InternalCypherParser.g:6381:1: entryRuleOrExpression returns [EObject current=null] : iv_ruleOrExpression= ruleOrExpression EOF ;
    public final EObject entryRuleOrExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrExpression = null;


        try {
            // InternalCypherParser.g:6381:53: (iv_ruleOrExpression= ruleOrExpression EOF )
            // InternalCypherParser.g:6382:2: iv_ruleOrExpression= ruleOrExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrExpression=ruleOrExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrExpression"


    // $ANTLR start "ruleOrExpression"
    // InternalCypherParser.g:6388:1: ruleOrExpression returns [EObject current=null] : (this_XorExpression_0= ruleXorExpression ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) ) )* ) ;
    public final EObject ruleOrExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_XorExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6394:2: ( (this_XorExpression_0= ruleXorExpression ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) ) )* ) )
            // InternalCypherParser.g:6395:2: (this_XorExpression_0= ruleXorExpression ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) ) )* )
            {
            // InternalCypherParser.g:6395:2: (this_XorExpression_0= ruleXorExpression ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) ) )* )
            // InternalCypherParser.g:6396:3: this_XorExpression_0= ruleXorExpression ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_93);
            this_XorExpression_0=ruleXorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_XorExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:6407:3: ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) ) )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==OR) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // InternalCypherParser.g:6408:4: () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleXorExpression ) )
            	    {
            	    // InternalCypherParser.g:6408:4: ()
            	    // InternalCypherParser.g:6409:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:6418:4: ( (lv_operator_2_0= OR ) )
            	    // InternalCypherParser.g:6419:5: (lv_operator_2_0= OR )
            	    {
            	    // InternalCypherParser.g:6419:5: (lv_operator_2_0= OR )
            	    // InternalCypherParser.g:6420:6: lv_operator_2_0= OR
            	    {
            	    lv_operator_2_0=(Token)match(input,OR,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getOrExpressionRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "OR");
            	      					
            	    }

            	    }


            	    }

            	    // InternalCypherParser.g:6432:4: ( (lv_right_3_0= ruleXorExpression ) )
            	    // InternalCypherParser.g:6433:5: (lv_right_3_0= ruleXorExpression )
            	    {
            	    // InternalCypherParser.g:6433:5: (lv_right_3_0= ruleXorExpression )
            	    // InternalCypherParser.g:6434:6: lv_right_3_0= ruleXorExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_93);
            	    lv_right_3_0=ruleXorExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOrExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.XorExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrExpression"


    // $ANTLR start "entryRuleXorExpression"
    // InternalCypherParser.g:6456:1: entryRuleXorExpression returns [EObject current=null] : iv_ruleXorExpression= ruleXorExpression EOF ;
    public final EObject entryRuleXorExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXorExpression = null;


        try {
            // InternalCypherParser.g:6456:54: (iv_ruleXorExpression= ruleXorExpression EOF )
            // InternalCypherParser.g:6457:2: iv_ruleXorExpression= ruleXorExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXorExpression=ruleXorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXorExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXorExpression"


    // $ANTLR start "ruleXorExpression"
    // InternalCypherParser.g:6463:1: ruleXorExpression returns [EObject current=null] : (this_AndExpression_0= ruleAndExpression ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) ) )* ) ;
    public final EObject ruleXorExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_AndExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6469:2: ( (this_AndExpression_0= ruleAndExpression ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) ) )* ) )
            // InternalCypherParser.g:6470:2: (this_AndExpression_0= ruleAndExpression ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) ) )* )
            {
            // InternalCypherParser.g:6470:2: (this_AndExpression_0= ruleAndExpression ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) ) )* )
            // InternalCypherParser.g:6471:3: this_AndExpression_0= ruleAndExpression ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_94);
            this_AndExpression_0=ruleAndExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AndExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:6482:3: ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) ) )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==XOR) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // InternalCypherParser.g:6483:4: () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleAndExpression ) )
            	    {
            	    // InternalCypherParser.g:6483:4: ()
            	    // InternalCypherParser.g:6484:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:6493:4: ( (lv_operator_2_0= XOR ) )
            	    // InternalCypherParser.g:6494:5: (lv_operator_2_0= XOR )
            	    {
            	    // InternalCypherParser.g:6494:5: (lv_operator_2_0= XOR )
            	    // InternalCypherParser.g:6495:6: lv_operator_2_0= XOR
            	    {
            	    lv_operator_2_0=(Token)match(input,XOR,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getXorExpressionRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "XOR");
            	      					
            	    }

            	    }


            	    }

            	    // InternalCypherParser.g:6507:4: ( (lv_right_3_0= ruleAndExpression ) )
            	    // InternalCypherParser.g:6508:5: (lv_right_3_0= ruleAndExpression )
            	    {
            	    // InternalCypherParser.g:6508:5: (lv_right_3_0= ruleAndExpression )
            	    // InternalCypherParser.g:6509:6: lv_right_3_0= ruleAndExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_94);
            	    lv_right_3_0=ruleAndExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getXorExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.AndExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXorExpression"


    // $ANTLR start "entryRuleAndExpression"
    // InternalCypherParser.g:6531:1: entryRuleAndExpression returns [EObject current=null] : iv_ruleAndExpression= ruleAndExpression EOF ;
    public final EObject entryRuleAndExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAndExpression = null;


        try {
            // InternalCypherParser.g:6531:54: (iv_ruleAndExpression= ruleAndExpression EOF )
            // InternalCypherParser.g:6532:2: iv_ruleAndExpression= ruleAndExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAndExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAndExpression=ruleAndExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAndExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAndExpression"


    // $ANTLR start "ruleAndExpression"
    // InternalCypherParser.g:6538:1: ruleAndExpression returns [EObject current=null] : (this_NotExpression_0= ruleNotExpression ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) ) )* ) ;
    public final EObject ruleAndExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_NotExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6544:2: ( (this_NotExpression_0= ruleNotExpression ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) ) )* ) )
            // InternalCypherParser.g:6545:2: (this_NotExpression_0= ruleNotExpression ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) ) )* )
            {
            // InternalCypherParser.g:6545:2: (this_NotExpression_0= ruleNotExpression ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) ) )* )
            // InternalCypherParser.g:6546:3: this_NotExpression_0= ruleNotExpression ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_95);
            this_NotExpression_0=ruleNotExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_NotExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:6557:3: ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) ) )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==AND) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // InternalCypherParser.g:6558:4: () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleNotExpression ) )
            	    {
            	    // InternalCypherParser.g:6558:4: ()
            	    // InternalCypherParser.g:6559:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:6568:4: ( (lv_operator_2_0= AND ) )
            	    // InternalCypherParser.g:6569:5: (lv_operator_2_0= AND )
            	    {
            	    // InternalCypherParser.g:6569:5: (lv_operator_2_0= AND )
            	    // InternalCypherParser.g:6570:6: lv_operator_2_0= AND
            	    {
            	    lv_operator_2_0=(Token)match(input,AND,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getAndExpressionRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "AND");
            	      					
            	    }

            	    }


            	    }

            	    // InternalCypherParser.g:6582:4: ( (lv_right_3_0= ruleNotExpression ) )
            	    // InternalCypherParser.g:6583:5: (lv_right_3_0= ruleNotExpression )
            	    {
            	    // InternalCypherParser.g:6583:5: (lv_right_3_0= ruleNotExpression )
            	    // InternalCypherParser.g:6584:6: lv_right_3_0= ruleNotExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_95);
            	    lv_right_3_0=ruleNotExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAndExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.NotExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAndExpression"


    // $ANTLR start "entryRuleNotExpression"
    // InternalCypherParser.g:6606:1: entryRuleNotExpression returns [EObject current=null] : iv_ruleNotExpression= ruleNotExpression EOF ;
    public final EObject entryRuleNotExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNotExpression = null;


        try {
            // InternalCypherParser.g:6606:54: (iv_ruleNotExpression= ruleNotExpression EOF )
            // InternalCypherParser.g:6607:2: iv_ruleNotExpression= ruleNotExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNotExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNotExpression=ruleNotExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNotExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNotExpression"


    // $ANTLR start "ruleNotExpression"
    // InternalCypherParser.g:6613:1: ruleNotExpression returns [EObject current=null] : ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) ) | this_ComparisonExpression_3= ruleComparisonExpression ) ;
    public final EObject ruleNotExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_1_0=null;
        EObject lv_left_2_0 = null;

        EObject this_ComparisonExpression_3 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6619:2: ( ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) ) | this_ComparisonExpression_3= ruleComparisonExpression ) )
            // InternalCypherParser.g:6620:2: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) ) | this_ComparisonExpression_3= ruleComparisonExpression )
            {
            // InternalCypherParser.g:6620:2: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) ) | this_ComparisonExpression_3= ruleComparisonExpression )
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // InternalCypherParser.g:6621:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) )
                    {
                    // InternalCypherParser.g:6621:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) )
                    // InternalCypherParser.g:6622:4: () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) )
                    {
                    // InternalCypherParser.g:6622:4: ()
                    // InternalCypherParser.g:6623:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:6632:4: ( (lv_operator_1_0= NOT ) )
                    // InternalCypherParser.g:6633:5: (lv_operator_1_0= NOT )
                    {
                    // InternalCypherParser.g:6633:5: (lv_operator_1_0= NOT )
                    // InternalCypherParser.g:6634:6: lv_operator_1_0= NOT
                    {
                    lv_operator_1_0=(Token)match(input,NOT,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_1_0, grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNotExpressionRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_1_0, "NOT");
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:6646:4: ( (lv_left_2_0= ruleNotExpression ) )
                    // InternalCypherParser.g:6647:5: (lv_left_2_0= ruleNotExpression )
                    {
                    // InternalCypherParser.g:6647:5: (lv_left_2_0= ruleNotExpression )
                    // InternalCypherParser.g:6648:6: lv_left_2_0= ruleNotExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_2_0=ruleNotExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNotExpressionRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_2_0,
                      							"org.xtext.example.mydsl.Cypher.NotExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:6667:3: this_ComparisonExpression_3= ruleComparisonExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ComparisonExpression_3=ruleComparisonExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ComparisonExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNotExpression"


    // $ANTLR start "entryRuleComparisonExpression"
    // InternalCypherParser.g:6682:1: entryRuleComparisonExpression returns [EObject current=null] : iv_ruleComparisonExpression= ruleComparisonExpression EOF ;
    public final EObject entryRuleComparisonExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparisonExpression = null;


        try {
            // InternalCypherParser.g:6682:61: (iv_ruleComparisonExpression= ruleComparisonExpression EOF )
            // InternalCypherParser.g:6683:2: iv_ruleComparisonExpression= ruleComparisonExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getComparisonExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComparisonExpression=ruleComparisonExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComparisonExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComparisonExpression"


    // $ANTLR start "ruleComparisonExpression"
    // InternalCypherParser.g:6689:1: ruleComparisonExpression returns [EObject current=null] : (this_AddOrSubtractExpression_0= ruleAddOrSubtractExpression ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) ) )* ) ;
    public final EObject ruleComparisonExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        Token lv_operator_2_5=null;
        Token lv_operator_2_6=null;
        EObject this_AddOrSubtractExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6695:2: ( (this_AddOrSubtractExpression_0= ruleAddOrSubtractExpression ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) ) )* ) )
            // InternalCypherParser.g:6696:2: (this_AddOrSubtractExpression_0= ruleAddOrSubtractExpression ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) ) )* )
            {
            // InternalCypherParser.g:6696:2: (this_AddOrSubtractExpression_0= ruleAddOrSubtractExpression ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) ) )* )
            // InternalCypherParser.g:6697:3: this_AddOrSubtractExpression_0= ruleAddOrSubtractExpression ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_96);
            this_AddOrSubtractExpression_0=ruleAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AddOrSubtractExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:6708:3: ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) ) )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( ((LA102_0>=LessThanSignEqualsSign && LA102_0<=LessThanSignGreaterThanSign)||LA102_0==GreaterThanSignEqualsSign||(LA102_0>=LessThanSign && LA102_0<=GreaterThanSign)) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // InternalCypherParser.g:6709:4: () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleAddOrSubtractExpression ) )
            	    {
            	    // InternalCypherParser.g:6709:4: ()
            	    // InternalCypherParser.g:6710:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:6719:4: ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) )
            	    // InternalCypherParser.g:6720:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) )
            	    {
            	    // InternalCypherParser.g:6720:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) )
            	    // InternalCypherParser.g:6721:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign )
            	    {
            	    // InternalCypherParser.g:6721:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign )
            	    int alt101=6;
            	    switch ( input.LA(1) ) {
            	    case EqualsSign:
            	        {
            	        alt101=1;
            	        }
            	        break;
            	    case LessThanSignGreaterThanSign:
            	        {
            	        alt101=2;
            	        }
            	        break;
            	    case LessThanSign:
            	        {
            	        alt101=3;
            	        }
            	        break;
            	    case GreaterThanSign:
            	        {
            	        alt101=4;
            	        }
            	        break;
            	    case LessThanSignEqualsSign:
            	        {
            	        alt101=5;
            	        }
            	        break;
            	    case GreaterThanSignEqualsSign:
            	        {
            	        alt101=6;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 101, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt101) {
            	        case 1 :
            	            // InternalCypherParser.g:6722:7: lv_operator_2_1= EqualsSign
            	            {
            	            lv_operator_2_1=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getComparisonExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalCypherParser.g:6733:7: lv_operator_2_2= LessThanSignGreaterThanSign
            	            {
            	            lv_operator_2_2=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getComparisonExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalCypherParser.g:6744:7: lv_operator_2_3= LessThanSign
            	            {
            	            lv_operator_2_3=(Token)match(input,LessThanSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getComparisonExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalCypherParser.g:6755:7: lv_operator_2_4= GreaterThanSign
            	            {
            	            lv_operator_2_4=(Token)match(input,GreaterThanSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_4, grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getComparisonExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // InternalCypherParser.g:6766:7: lv_operator_2_5= LessThanSignEqualsSign
            	            {
            	            lv_operator_2_5=(Token)match(input,LessThanSignEqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_5, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getComparisonExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_5, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // InternalCypherParser.g:6777:7: lv_operator_2_6= GreaterThanSignEqualsSign
            	            {
            	            lv_operator_2_6=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_6, grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getComparisonExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_6, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalCypherParser.g:6790:4: ( (lv_right_3_0= ruleAddOrSubtractExpression ) )
            	    // InternalCypherParser.g:6791:5: (lv_right_3_0= ruleAddOrSubtractExpression )
            	    {
            	    // InternalCypherParser.g:6791:5: (lv_right_3_0= ruleAddOrSubtractExpression )
            	    // InternalCypherParser.g:6792:6: lv_right_3_0= ruleAddOrSubtractExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_right_3_0=ruleAddOrSubtractExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.AddOrSubtractExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComparisonExpression"


    // $ANTLR start "entryRuleAddOrSubtractExpression"
    // InternalCypherParser.g:6814:1: entryRuleAddOrSubtractExpression returns [EObject current=null] : iv_ruleAddOrSubtractExpression= ruleAddOrSubtractExpression EOF ;
    public final EObject entryRuleAddOrSubtractExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAddOrSubtractExpression = null;


        try {
            // InternalCypherParser.g:6814:64: (iv_ruleAddOrSubtractExpression= ruleAddOrSubtractExpression EOF )
            // InternalCypherParser.g:6815:2: iv_ruleAddOrSubtractExpression= ruleAddOrSubtractExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAddOrSubtractExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAddOrSubtractExpression=ruleAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAddOrSubtractExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAddOrSubtractExpression"


    // $ANTLR start "ruleAddOrSubtractExpression"
    // InternalCypherParser.g:6821:1: ruleAddOrSubtractExpression returns [EObject current=null] : (this_MultiplyDivideModuloExpression_0= ruleMultiplyDivideModuloExpression ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) ) )* ) ;
    public final EObject ruleAddOrSubtractExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_MultiplyDivideModuloExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6827:2: ( (this_MultiplyDivideModuloExpression_0= ruleMultiplyDivideModuloExpression ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) ) )* ) )
            // InternalCypherParser.g:6828:2: (this_MultiplyDivideModuloExpression_0= ruleMultiplyDivideModuloExpression ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) ) )* )
            {
            // InternalCypherParser.g:6828:2: (this_MultiplyDivideModuloExpression_0= ruleMultiplyDivideModuloExpression ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) ) )* )
            // InternalCypherParser.g:6829:3: this_MultiplyDivideModuloExpression_0= ruleMultiplyDivideModuloExpression ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_97);
            this_MultiplyDivideModuloExpression_0=ruleMultiplyDivideModuloExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MultiplyDivideModuloExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:6840:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) ) )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==PlusSign||LA104_0==HyphenMinus) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // InternalCypherParser.g:6841:4: () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) )
            	    {
            	    // InternalCypherParser.g:6841:4: ()
            	    // InternalCypherParser.g:6842:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:6851:4: ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) )
            	    // InternalCypherParser.g:6852:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
            	    {
            	    // InternalCypherParser.g:6852:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
            	    // InternalCypherParser.g:6853:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
            	    {
            	    // InternalCypherParser.g:6853:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
            	    int alt103=2;
            	    int LA103_0 = input.LA(1);

            	    if ( (LA103_0==PlusSign) ) {
            	        alt103=1;
            	    }
            	    else if ( (LA103_0==HyphenMinus) ) {
            	        alt103=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 103, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt103) {
            	        case 1 :
            	            // InternalCypherParser.g:6854:7: lv_operator_2_1= PlusSign
            	            {
            	            lv_operator_2_1=(Token)match(input,PlusSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAddOrSubtractExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalCypherParser.g:6865:7: lv_operator_2_2= HyphenMinus
            	            {
            	            lv_operator_2_2=(Token)match(input,HyphenMinus,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAddOrSubtractExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalCypherParser.g:6878:4: ( (lv_right_3_0= ruleMultiplyDivideModuloExpression ) )
            	    // InternalCypherParser.g:6879:5: (lv_right_3_0= ruleMultiplyDivideModuloExpression )
            	    {
            	    // InternalCypherParser.g:6879:5: (lv_right_3_0= ruleMultiplyDivideModuloExpression )
            	    // InternalCypherParser.g:6880:6: lv_right_3_0= ruleMultiplyDivideModuloExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_97);
            	    lv_right_3_0=ruleMultiplyDivideModuloExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAddOrSubtractExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.MultiplyDivideModuloExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAddOrSubtractExpression"


    // $ANTLR start "entryRuleMultiplyDivideModuloExpression"
    // InternalCypherParser.g:6902:1: entryRuleMultiplyDivideModuloExpression returns [EObject current=null] : iv_ruleMultiplyDivideModuloExpression= ruleMultiplyDivideModuloExpression EOF ;
    public final EObject entryRuleMultiplyDivideModuloExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultiplyDivideModuloExpression = null;


        try {
            // InternalCypherParser.g:6902:71: (iv_ruleMultiplyDivideModuloExpression= ruleMultiplyDivideModuloExpression EOF )
            // InternalCypherParser.g:6903:2: iv_ruleMultiplyDivideModuloExpression= ruleMultiplyDivideModuloExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiplyDivideModuloExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiplyDivideModuloExpression=ruleMultiplyDivideModuloExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiplyDivideModuloExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMultiplyDivideModuloExpression"


    // $ANTLR start "ruleMultiplyDivideModuloExpression"
    // InternalCypherParser.g:6909:1: ruleMultiplyDivideModuloExpression returns [EObject current=null] : (this_PowerOfExpression_0= rulePowerOfExpression ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) ) )* ) ;
    public final EObject ruleMultiplyDivideModuloExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        EObject this_PowerOfExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:6915:2: ( (this_PowerOfExpression_0= rulePowerOfExpression ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) ) )* ) )
            // InternalCypherParser.g:6916:2: (this_PowerOfExpression_0= rulePowerOfExpression ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) ) )* )
            {
            // InternalCypherParser.g:6916:2: (this_PowerOfExpression_0= rulePowerOfExpression ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) ) )* )
            // InternalCypherParser.g:6917:3: this_PowerOfExpression_0= rulePowerOfExpression ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_98);
            this_PowerOfExpression_0=rulePowerOfExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PowerOfExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:6928:3: ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) ) )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==PercentSign||LA106_0==Asterisk||LA106_0==Solidus) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // InternalCypherParser.g:6929:4: () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= rulePowerOfExpression ) )
            	    {
            	    // InternalCypherParser.g:6929:4: ()
            	    // InternalCypherParser.g:6930:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:6939:4: ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) )
            	    // InternalCypherParser.g:6940:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) )
            	    {
            	    // InternalCypherParser.g:6940:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) )
            	    // InternalCypherParser.g:6941:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign )
            	    {
            	    // InternalCypherParser.g:6941:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign )
            	    int alt105=3;
            	    switch ( input.LA(1) ) {
            	    case Asterisk:
            	        {
            	        alt105=1;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt105=2;
            	        }
            	        break;
            	    case PercentSign:
            	        {
            	        alt105=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 105, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt105) {
            	        case 1 :
            	            // InternalCypherParser.g:6942:7: lv_operator_2_1= Asterisk
            	            {
            	            lv_operator_2_1=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultiplyDivideModuloExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalCypherParser.g:6953:7: lv_operator_2_2= Solidus
            	            {
            	            lv_operator_2_2=(Token)match(input,Solidus,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultiplyDivideModuloExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalCypherParser.g:6964:7: lv_operator_2_3= PercentSign
            	            {
            	            lv_operator_2_3=(Token)match(input,PercentSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultiplyDivideModuloExpressionRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalCypherParser.g:6977:4: ( (lv_right_3_0= rulePowerOfExpression ) )
            	    // InternalCypherParser.g:6978:5: (lv_right_3_0= rulePowerOfExpression )
            	    {
            	    // InternalCypherParser.g:6978:5: (lv_right_3_0= rulePowerOfExpression )
            	    // InternalCypherParser.g:6979:6: lv_right_3_0= rulePowerOfExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_right_3_0=rulePowerOfExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplyDivideModuloExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.PowerOfExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMultiplyDivideModuloExpression"


    // $ANTLR start "entryRulePowerOfExpression"
    // InternalCypherParser.g:7001:1: entryRulePowerOfExpression returns [EObject current=null] : iv_rulePowerOfExpression= rulePowerOfExpression EOF ;
    public final EObject entryRulePowerOfExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePowerOfExpression = null;


        try {
            // InternalCypherParser.g:7001:58: (iv_rulePowerOfExpression= rulePowerOfExpression EOF )
            // InternalCypherParser.g:7002:2: iv_rulePowerOfExpression= rulePowerOfExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPowerOfExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePowerOfExpression=rulePowerOfExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePowerOfExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePowerOfExpression"


    // $ANTLR start "rulePowerOfExpression"
    // InternalCypherParser.g:7008:1: rulePowerOfExpression returns [EObject current=null] : (this_UnaryAddOrSubtractExpression_0= ruleUnaryAddOrSubtractExpression ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) ) )* ) ;
    public final EObject rulePowerOfExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_UnaryAddOrSubtractExpression_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7014:2: ( (this_UnaryAddOrSubtractExpression_0= ruleUnaryAddOrSubtractExpression ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) ) )* ) )
            // InternalCypherParser.g:7015:2: (this_UnaryAddOrSubtractExpression_0= ruleUnaryAddOrSubtractExpression ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) ) )* )
            {
            // InternalCypherParser.g:7015:2: (this_UnaryAddOrSubtractExpression_0= ruleUnaryAddOrSubtractExpression ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) ) )* )
            // InternalCypherParser.g:7016:3: this_UnaryAddOrSubtractExpression_0= ruleUnaryAddOrSubtractExpression ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_99);
            this_UnaryAddOrSubtractExpression_0=ruleUnaryAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryAddOrSubtractExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:7027:3: ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) ) )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==CircumflexAccent) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // InternalCypherParser.g:7028:4: () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) )
            	    {
            	    // InternalCypherParser.g:7028:4: ()
            	    // InternalCypherParser.g:7029:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:7038:4: ( (lv_operator_2_0= CircumflexAccent ) )
            	    // InternalCypherParser.g:7039:5: (lv_operator_2_0= CircumflexAccent )
            	    {
            	    // InternalCypherParser.g:7039:5: (lv_operator_2_0= CircumflexAccent )
            	    // InternalCypherParser.g:7040:6: lv_operator_2_0= CircumflexAccent
            	    {
            	    lv_operator_2_0=(Token)match(input,CircumflexAccent,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getPowerOfExpressionRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "^");
            	      					
            	    }

            	    }


            	    }

            	    // InternalCypherParser.g:7052:4: ( (lv_right_3_0= ruleUnaryAddOrSubtractExpression ) )
            	    // InternalCypherParser.g:7053:5: (lv_right_3_0= ruleUnaryAddOrSubtractExpression )
            	    {
            	    // InternalCypherParser.g:7053:5: (lv_right_3_0= ruleUnaryAddOrSubtractExpression )
            	    // InternalCypherParser.g:7054:6: lv_right_3_0= ruleUnaryAddOrSubtractExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_99);
            	    lv_right_3_0=ruleUnaryAddOrSubtractExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getPowerOfExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.xtext.example.mydsl.Cypher.UnaryAddOrSubtractExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePowerOfExpression"


    // $ANTLR start "entryRuleUnaryAddOrSubtractExpression"
    // InternalCypherParser.g:7076:1: entryRuleUnaryAddOrSubtractExpression returns [EObject current=null] : iv_ruleUnaryAddOrSubtractExpression= ruleUnaryAddOrSubtractExpression EOF ;
    public final EObject entryRuleUnaryAddOrSubtractExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryAddOrSubtractExpression = null;


        try {
            // InternalCypherParser.g:7076:69: (iv_ruleUnaryAddOrSubtractExpression= ruleUnaryAddOrSubtractExpression EOF )
            // InternalCypherParser.g:7077:2: iv_ruleUnaryAddOrSubtractExpression= ruleUnaryAddOrSubtractExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryAddOrSubtractExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryAddOrSubtractExpression=ruleUnaryAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryAddOrSubtractExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnaryAddOrSubtractExpression"


    // $ANTLR start "ruleUnaryAddOrSubtractExpression"
    // InternalCypherParser.g:7083:1: ruleUnaryAddOrSubtractExpression returns [EObject current=null] : (this_StringListNullOperatorExpression_0= ruleStringListNullOperatorExpression | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) ) ) ) ;
    public final EObject ruleUnaryAddOrSubtractExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_StringListNullOperatorExpression_0 = null;

        EObject lv_left_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7089:2: ( (this_StringListNullOperatorExpression_0= ruleStringListNullOperatorExpression | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) ) ) ) )
            // InternalCypherParser.g:7090:2: (this_StringListNullOperatorExpression_0= ruleStringListNullOperatorExpression | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) ) ) )
            {
            // InternalCypherParser.g:7090:2: (this_StringListNullOperatorExpression_0= ruleStringListNullOperatorExpression | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) ) ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=ALLSHORTESTPATHS && LA109_0<=WHERE)||(LA109_0>=CASE && LA109_0<=XOR)||(LA109_0>=AS && LA109_0<=OR)||LA109_0==DollarSign||LA109_0==LeftParenthesis||LA109_0==LeftSquareBracket||LA109_0==LeftCurlyBracket||LA109_0==RULE_ID||(LA109_0>=RULE_STRING_LITERAL && LA109_0<=RULE_DECIMAL)) ) {
                alt109=1;
            }
            else if ( (LA109_0==PlusSign||LA109_0==HyphenMinus) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // InternalCypherParser.g:7091:3: this_StringListNullOperatorExpression_0= ruleStringListNullOperatorExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StringListNullOperatorExpression_0=ruleStringListNullOperatorExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StringListNullOperatorExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:7103:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) ) )
                    {
                    // InternalCypherParser.g:7103:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) ) )
                    // InternalCypherParser.g:7104:4: () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) )
                    {
                    // InternalCypherParser.g:7104:4: ()
                    // InternalCypherParser.g:7105:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:7114:4: ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) )
                    // InternalCypherParser.g:7115:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
                    {
                    // InternalCypherParser.g:7115:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
                    // InternalCypherParser.g:7116:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
                    {
                    // InternalCypherParser.g:7116:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==PlusSign) ) {
                        alt108=1;
                    }
                    else if ( (LA108_0==HyphenMinus) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 0, input);

                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            // InternalCypherParser.g:7117:7: lv_operator_2_1= PlusSign
                            {
                            lv_operator_2_1=(Token)match(input,PlusSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_1, grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getUnaryAddOrSubtractExpressionRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalCypherParser.g:7128:7: lv_operator_2_2= HyphenMinus
                            {
                            lv_operator_2_2=(Token)match(input,HyphenMinus,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_2, grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getUnaryAddOrSubtractExpressionRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalCypherParser.g:7141:4: ( (lv_left_3_0= ruleUnaryAddOrSubtractExpression ) )
                    // InternalCypherParser.g:7142:5: (lv_left_3_0= ruleUnaryAddOrSubtractExpression )
                    {
                    // InternalCypherParser.g:7142:5: (lv_left_3_0= ruleUnaryAddOrSubtractExpression )
                    // InternalCypherParser.g:7143:6: lv_left_3_0= ruleUnaryAddOrSubtractExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_3_0=ruleUnaryAddOrSubtractExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryAddOrSubtractExpressionRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_3_0,
                      							"org.xtext.example.mydsl.Cypher.UnaryAddOrSubtractExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnaryAddOrSubtractExpression"


    // $ANTLR start "entryRuleStringListNullOperatorExpression"
    // InternalCypherParser.g:7165:1: entryRuleStringListNullOperatorExpression returns [EObject current=null] : iv_ruleStringListNullOperatorExpression= ruleStringListNullOperatorExpression EOF ;
    public final EObject entryRuleStringListNullOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringListNullOperatorExpression = null;


        try {
            // InternalCypherParser.g:7165:73: (iv_ruleStringListNullOperatorExpression= ruleStringListNullOperatorExpression EOF )
            // InternalCypherParser.g:7166:2: iv_ruleStringListNullOperatorExpression= ruleStringListNullOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringListNullOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringListNullOperatorExpression=ruleStringListNullOperatorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringListNullOperatorExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringListNullOperatorExpression"


    // $ANTLR start "ruleStringListNullOperatorExpression"
    // InternalCypherParser.g:7172:1: ruleStringListNullOperatorExpression returns [EObject current=null] : (this_PropertyOrLabelsExpression_0= rulePropertyOrLabelsExpression ( () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) ) )* ) ;
    public final EObject ruleStringListNullOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject this_PropertyOrLabelsExpression_0 = null;

        EObject lv_expressions_2_1 = null;

        EObject lv_expressions_2_2 = null;

        EObject lv_expressions_2_3 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7178:2: ( (this_PropertyOrLabelsExpression_0= rulePropertyOrLabelsExpression ( () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) ) )* ) )
            // InternalCypherParser.g:7179:2: (this_PropertyOrLabelsExpression_0= rulePropertyOrLabelsExpression ( () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) ) )* )
            {
            // InternalCypherParser.g:7179:2: (this_PropertyOrLabelsExpression_0= rulePropertyOrLabelsExpression ( () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) ) )* )
            // InternalCypherParser.g:7180:3: this_PropertyOrLabelsExpression_0= rulePropertyOrLabelsExpression ( () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrLabelsExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_100);
            this_PropertyOrLabelsExpression_0=rulePropertyOrLabelsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PropertyOrLabelsExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:7191:3: ( () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) ) )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==CONTAINS||LA111_0==STARTS||LA111_0==ENDS||LA111_0==EqualsSignTilde||(LA111_0>=IN && LA111_0<=IS)||LA111_0==LeftSquareBracket) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // InternalCypherParser.g:7192:4: () ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) )
            	    {
            	    // InternalCypherParser.g:7192:4: ()
            	    // InternalCypherParser.g:7193:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalCypherParser.g:7202:4: ( ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) ) )
            	    // InternalCypherParser.g:7203:5: ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) )
            	    {
            	    // InternalCypherParser.g:7203:5: ( (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression ) )
            	    // InternalCypherParser.g:7204:6: (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression )
            	    {
            	    // InternalCypherParser.g:7204:6: (lv_expressions_2_1= ruleStringOperatorExpression | lv_expressions_2_2= ruleListOperatorExpression | lv_expressions_2_3= ruleNullOperatorExpression )
            	    int alt110=3;
            	    switch ( input.LA(1) ) {
            	    case CONTAINS:
            	    case STARTS:
            	    case ENDS:
            	    case EqualsSignTilde:
            	    case IN:
            	        {
            	        alt110=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt110=2;
            	        }
            	        break;
            	    case IS:
            	        {
            	        alt110=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 110, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt110) {
            	        case 1 :
            	            // InternalCypherParser.g:7205:7: lv_expressions_2_1= ruleStringOperatorExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0());
            	              						
            	            }
            	            pushFollow(FOLLOW_100);
            	            lv_expressions_2_1=ruleStringOperatorExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getStringListNullOperatorExpressionRule());
            	              							}
            	              							add(
            	              								current,
            	              								"expressions",
            	              								lv_expressions_2_1,
            	              								"org.xtext.example.mydsl.Cypher.StringOperatorExpression");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalCypherParser.g:7221:7: lv_expressions_2_2= ruleListOperatorExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsListOperatorExpressionParserRuleCall_1_1_0_1());
            	              						
            	            }
            	            pushFollow(FOLLOW_100);
            	            lv_expressions_2_2=ruleListOperatorExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getStringListNullOperatorExpressionRule());
            	              							}
            	              							add(
            	              								current,
            	              								"expressions",
            	              								lv_expressions_2_2,
            	              								"org.xtext.example.mydsl.Cypher.ListOperatorExpression");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalCypherParser.g:7237:7: lv_expressions_2_3= ruleNullOperatorExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2());
            	              						
            	            }
            	            pushFollow(FOLLOW_100);
            	            lv_expressions_2_3=ruleNullOperatorExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getStringListNullOperatorExpressionRule());
            	              							}
            	              							add(
            	              								current,
            	              								"expressions",
            	              								lv_expressions_2_3,
            	              								"org.xtext.example.mydsl.Cypher.NullOperatorExpression");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringListNullOperatorExpression"


    // $ANTLR start "entryRuleListOperatorExpression"
    // InternalCypherParser.g:7260:1: entryRuleListOperatorExpression returns [EObject current=null] : iv_ruleListOperatorExpression= ruleListOperatorExpression EOF ;
    public final EObject entryRuleListOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleListOperatorExpression = null;


        try {
            // InternalCypherParser.g:7260:63: (iv_ruleListOperatorExpression= ruleListOperatorExpression EOF )
            // InternalCypherParser.g:7261:2: iv_ruleListOperatorExpression= ruleListOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleListOperatorExpression=ruleListOperatorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListOperatorExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListOperatorExpression"


    // $ANTLR start "ruleListOperatorExpression"
    // InternalCypherParser.g:7267:1: ruleListOperatorExpression returns [EObject current=null] : ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket ) | ( () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket ) ) ;
    public final EObject ruleListOperatorExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_expression_2_0 = null;

        EObject lv_lower_6_0 = null;

        EObject lv_upper_8_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7273:2: ( ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket ) | ( () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket ) ) )
            // InternalCypherParser.g:7274:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket ) | ( () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket ) )
            {
            // InternalCypherParser.g:7274:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket ) | ( () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket ) )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==LeftSquareBracket) ) {
                int LA114_1 = input.LA(2);

                if ( (synpred143_InternalCypherParser()) ) {
                    alt114=1;
                }
                else if ( (true) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // InternalCypherParser.g:7275:3: ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket )
                    {
                    // InternalCypherParser.g:7275:3: ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket )
                    // InternalCypherParser.g:7276:4: () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket
                    {
                    // InternalCypherParser.g:7276:4: ()
                    // InternalCypherParser.g:7277:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getListOperatorExpressionAccess().getIndexLookupExpressionAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_0_1());
                      			
                    }
                    // InternalCypherParser.g:7290:4: ( (lv_expression_2_0= ruleExpression ) )
                    // InternalCypherParser.g:7291:5: (lv_expression_2_0= ruleExpression )
                    {
                    // InternalCypherParser.g:7291:5: (lv_expression_2_0= ruleExpression )
                    // InternalCypherParser.g:7292:6: lv_expression_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getListOperatorExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_34);
                    lv_expression_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getListOperatorExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_0_3());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:7315:3: ( () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket )
                    {
                    // InternalCypherParser.g:7315:3: ( () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket )
                    // InternalCypherParser.g:7316:4: () otherlv_5= LeftSquareBracket ( (lv_lower_6_0= ruleExpression ) )? otherlv_7= FullStopFullStop ( (lv_upper_8_0= ruleExpression ) )? otherlv_9= RightSquareBracket
                    {
                    // InternalCypherParser.g:7316:4: ()
                    // InternalCypherParser.g:7317:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getListOperatorExpressionAccess().getIndexRangeExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_5=(Token)match(input,LeftSquareBracket,FOLLOW_101); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_1_1());
                      			
                    }
                    // InternalCypherParser.g:7330:4: ( (lv_lower_6_0= ruleExpression ) )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( ((LA112_0>=ALLSHORTESTPATHS && LA112_0<=WHERE)||(LA112_0>=CASE && LA112_0<=XOR)||(LA112_0>=AS && LA112_0<=OR)||LA112_0==DollarSign||LA112_0==LeftParenthesis||LA112_0==PlusSign||LA112_0==HyphenMinus||LA112_0==LeftSquareBracket||LA112_0==LeftCurlyBracket||LA112_0==RULE_ID||(LA112_0>=RULE_STRING_LITERAL && LA112_0<=RULE_DECIMAL)) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // InternalCypherParser.g:7331:5: (lv_lower_6_0= ruleExpression )
                            {
                            // InternalCypherParser.g:7331:5: (lv_lower_6_0= ruleExpression )
                            // InternalCypherParser.g:7332:6: lv_lower_6_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getListOperatorExpressionAccess().getLowerExpressionParserRuleCall_1_2_0());
                              					
                            }
                            pushFollow(FOLLOW_102);
                            lv_lower_6_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getListOperatorExpressionRule());
                              						}
                              						set(
                              							current,
                              							"lower",
                              							lv_lower_6_0,
                              							"org.xtext.example.mydsl.Cypher.Expression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    otherlv_7=(Token)match(input,FullStopFullStop,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getListOperatorExpressionAccess().getFullStopFullStopKeyword_1_3());
                      			
                    }
                    // InternalCypherParser.g:7353:4: ( (lv_upper_8_0= ruleExpression ) )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( ((LA113_0>=ALLSHORTESTPATHS && LA113_0<=WHERE)||(LA113_0>=CASE && LA113_0<=XOR)||(LA113_0>=AS && LA113_0<=OR)||LA113_0==DollarSign||LA113_0==LeftParenthesis||LA113_0==PlusSign||LA113_0==HyphenMinus||LA113_0==LeftSquareBracket||LA113_0==LeftCurlyBracket||LA113_0==RULE_ID||(LA113_0>=RULE_STRING_LITERAL && LA113_0<=RULE_DECIMAL)) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // InternalCypherParser.g:7354:5: (lv_upper_8_0= ruleExpression )
                            {
                            // InternalCypherParser.g:7354:5: (lv_upper_8_0= ruleExpression )
                            // InternalCypherParser.g:7355:6: lv_upper_8_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getListOperatorExpressionAccess().getUpperExpressionParserRuleCall_1_4_0());
                              					
                            }
                            pushFollow(FOLLOW_34);
                            lv_upper_8_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getListOperatorExpressionRule());
                              						}
                              						set(
                              							current,
                              							"upper",
                              							lv_upper_8_0,
                              							"org.xtext.example.mydsl.Cypher.Expression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_1_5());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListOperatorExpression"


    // $ANTLR start "entryRuleStringOperatorExpression"
    // InternalCypherParser.g:7381:1: entryRuleStringOperatorExpression returns [EObject current=null] : iv_ruleStringOperatorExpression= ruleStringOperatorExpression EOF ;
    public final EObject entryRuleStringOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringOperatorExpression = null;


        try {
            // InternalCypherParser.g:7381:65: (iv_ruleStringOperatorExpression= ruleStringOperatorExpression EOF )
            // InternalCypherParser.g:7382:2: iv_ruleStringOperatorExpression= ruleStringOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringOperatorExpression=ruleStringOperatorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringOperatorExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringOperatorExpression"


    // $ANTLR start "ruleStringOperatorExpression"
    // InternalCypherParser.g:7388:1: ruleStringOperatorExpression returns [EObject current=null] : ( ( ( () otherlv_1= EqualsSignTilde ) | ( () otherlv_3= IN ) | ( () otherlv_5= STARTS otherlv_6= WITH ) | ( () otherlv_8= ENDS otherlv_9= WITH ) | ( () otherlv_11= CONTAINS ) ) ( (lv_right_12_0= rulePropertyOrLabelsExpression ) ) ) ;
    public final EObject ruleStringOperatorExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        EObject lv_right_12_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7394:2: ( ( ( ( () otherlv_1= EqualsSignTilde ) | ( () otherlv_3= IN ) | ( () otherlv_5= STARTS otherlv_6= WITH ) | ( () otherlv_8= ENDS otherlv_9= WITH ) | ( () otherlv_11= CONTAINS ) ) ( (lv_right_12_0= rulePropertyOrLabelsExpression ) ) ) )
            // InternalCypherParser.g:7395:2: ( ( ( () otherlv_1= EqualsSignTilde ) | ( () otherlv_3= IN ) | ( () otherlv_5= STARTS otherlv_6= WITH ) | ( () otherlv_8= ENDS otherlv_9= WITH ) | ( () otherlv_11= CONTAINS ) ) ( (lv_right_12_0= rulePropertyOrLabelsExpression ) ) )
            {
            // InternalCypherParser.g:7395:2: ( ( ( () otherlv_1= EqualsSignTilde ) | ( () otherlv_3= IN ) | ( () otherlv_5= STARTS otherlv_6= WITH ) | ( () otherlv_8= ENDS otherlv_9= WITH ) | ( () otherlv_11= CONTAINS ) ) ( (lv_right_12_0= rulePropertyOrLabelsExpression ) ) )
            // InternalCypherParser.g:7396:3: ( ( () otherlv_1= EqualsSignTilde ) | ( () otherlv_3= IN ) | ( () otherlv_5= STARTS otherlv_6= WITH ) | ( () otherlv_8= ENDS otherlv_9= WITH ) | ( () otherlv_11= CONTAINS ) ) ( (lv_right_12_0= rulePropertyOrLabelsExpression ) )
            {
            // InternalCypherParser.g:7396:3: ( ( () otherlv_1= EqualsSignTilde ) | ( () otherlv_3= IN ) | ( () otherlv_5= STARTS otherlv_6= WITH ) | ( () otherlv_8= ENDS otherlv_9= WITH ) | ( () otherlv_11= CONTAINS ) )
            int alt115=5;
            switch ( input.LA(1) ) {
            case EqualsSignTilde:
                {
                alt115=1;
                }
                break;
            case IN:
                {
                alt115=2;
                }
                break;
            case STARTS:
                {
                alt115=3;
                }
                break;
            case ENDS:
                {
                alt115=4;
                }
                break;
            case CONTAINS:
                {
                alt115=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // InternalCypherParser.g:7397:4: ( () otherlv_1= EqualsSignTilde )
                    {
                    // InternalCypherParser.g:7397:4: ( () otherlv_1= EqualsSignTilde )
                    // InternalCypherParser.g:7398:5: () otherlv_1= EqualsSignTilde
                    {
                    // InternalCypherParser.g:7398:5: ()
                    // InternalCypherParser.g:7399:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_1=(Token)match(input,EqualsSignTilde,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:7414:4: ( () otherlv_3= IN )
                    {
                    // InternalCypherParser.g:7414:4: ( () otherlv_3= IN )
                    // InternalCypherParser.g:7415:5: () otherlv_3= IN
                    {
                    // InternalCypherParser.g:7415:5: ()
                    // InternalCypherParser.g:7416:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_3=(Token)match(input,IN,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:7431:4: ( () otherlv_5= STARTS otherlv_6= WITH )
                    {
                    // InternalCypherParser.g:7431:4: ( () otherlv_5= STARTS otherlv_6= WITH )
                    // InternalCypherParser.g:7432:5: () otherlv_5= STARTS otherlv_6= WITH
                    {
                    // InternalCypherParser.g:7432:5: ()
                    // InternalCypherParser.g:7433:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_5=(Token)match(input,STARTS,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1());
                      				
                    }
                    otherlv_6=(Token)match(input,WITH,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_6, grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2());
                      				
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:7452:4: ( () otherlv_8= ENDS otherlv_9= WITH )
                    {
                    // InternalCypherParser.g:7452:4: ( () otherlv_8= ENDS otherlv_9= WITH )
                    // InternalCypherParser.g:7453:5: () otherlv_8= ENDS otherlv_9= WITH
                    {
                    // InternalCypherParser.g:7453:5: ()
                    // InternalCypherParser.g:7454:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_8=(Token)match(input,ENDS,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_8, grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1());
                      				
                    }
                    otherlv_9=(Token)match(input,WITH,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_9, grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2());
                      				
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:7473:4: ( () otherlv_11= CONTAINS )
                    {
                    // InternalCypherParser.g:7473:4: ( () otherlv_11= CONTAINS )
                    // InternalCypherParser.g:7474:5: () otherlv_11= CONTAINS
                    {
                    // InternalCypherParser.g:7474:5: ()
                    // InternalCypherParser.g:7475:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_11=(Token)match(input,CONTAINS,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_11, grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1());
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:7490:3: ( (lv_right_12_0= rulePropertyOrLabelsExpression ) )
            // InternalCypherParser.g:7491:4: (lv_right_12_0= rulePropertyOrLabelsExpression )
            {
            // InternalCypherParser.g:7491:4: (lv_right_12_0= rulePropertyOrLabelsExpression )
            // InternalCypherParser.g:7492:5: lv_right_12_0= rulePropertyOrLabelsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrLabelsExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_right_12_0=rulePropertyOrLabelsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStringOperatorExpressionRule());
              					}
              					set(
              						current,
              						"right",
              						lv_right_12_0,
              						"org.xtext.example.mydsl.Cypher.PropertyOrLabelsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringOperatorExpression"


    // $ANTLR start "entryRuleNullOperatorExpression"
    // InternalCypherParser.g:7513:1: entryRuleNullOperatorExpression returns [EObject current=null] : iv_ruleNullOperatorExpression= ruleNullOperatorExpression EOF ;
    public final EObject entryRuleNullOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNullOperatorExpression = null;


        try {
            // InternalCypherParser.g:7513:63: (iv_ruleNullOperatorExpression= ruleNullOperatorExpression EOF )
            // InternalCypherParser.g:7514:2: iv_ruleNullOperatorExpression= ruleNullOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullOperatorExpression=ruleNullOperatorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullOperatorExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNullOperatorExpression"


    // $ANTLR start "ruleNullOperatorExpression"
    // InternalCypherParser.g:7520:1: ruleNullOperatorExpression returns [EObject current=null] : ( ( () otherlv_1= IS otherlv_2= NULL ) | ( () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL ) ) ;
    public final EObject ruleNullOperatorExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;


        	enterRule();

        try {
            // InternalCypherParser.g:7526:2: ( ( ( () otherlv_1= IS otherlv_2= NULL ) | ( () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL ) ) )
            // InternalCypherParser.g:7527:2: ( ( () otherlv_1= IS otherlv_2= NULL ) | ( () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL ) )
            {
            // InternalCypherParser.g:7527:2: ( ( () otherlv_1= IS otherlv_2= NULL ) | ( () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL ) )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==IS) ) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==NOT) ) {
                    alt116=2;
                }
                else if ( (LA116_1==NULL) ) {
                    alt116=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // InternalCypherParser.g:7528:3: ( () otherlv_1= IS otherlv_2= NULL )
                    {
                    // InternalCypherParser.g:7528:3: ( () otherlv_1= IS otherlv_2= NULL )
                    // InternalCypherParser.g:7529:4: () otherlv_1= IS otherlv_2= NULL
                    {
                    // InternalCypherParser.g:7529:4: ()
                    // InternalCypherParser.g:7530:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,IS,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1());
                      			
                    }
                    otherlv_2=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:7549:3: ( () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL )
                    {
                    // InternalCypherParser.g:7549:3: ( () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL )
                    // InternalCypherParser.g:7550:4: () otherlv_4= IS otherlv_5= NOT otherlv_6= NULL
                    {
                    // InternalCypherParser.g:7550:4: ()
                    // InternalCypherParser.g:7551:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_4=(Token)match(input,IS,FOLLOW_106); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1());
                      			
                    }
                    otherlv_5=(Token)match(input,NOT,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2());
                      			
                    }
                    otherlv_6=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNullOperatorExpression"


    // $ANTLR start "entryRulePropertyOrLabelsExpression"
    // InternalCypherParser.g:7577:1: entryRulePropertyOrLabelsExpression returns [EObject current=null] : iv_rulePropertyOrLabelsExpression= rulePropertyOrLabelsExpression EOF ;
    public final EObject entryRulePropertyOrLabelsExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyOrLabelsExpression = null;


        try {
            // InternalCypherParser.g:7577:67: (iv_rulePropertyOrLabelsExpression= rulePropertyOrLabelsExpression EOF )
            // InternalCypherParser.g:7578:2: iv_rulePropertyOrLabelsExpression= rulePropertyOrLabelsExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyOrLabelsExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyOrLabelsExpression=rulePropertyOrLabelsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyOrLabelsExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyOrLabelsExpression"


    // $ANTLR start "rulePropertyOrLabelsExpression"
    // InternalCypherParser.g:7584:1: rulePropertyOrLabelsExpression returns [EObject current=null] : (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () this_NodeLabels_4= ruleNodeLabels[$current] )? ) ;
    public final EObject rulePropertyOrLabelsExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Atom_0 = null;

        EObject lv_propertyLookups_2_0 = null;

        EObject this_NodeLabels_4 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7590:2: ( (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () this_NodeLabels_4= ruleNodeLabels[$current] )? ) )
            // InternalCypherParser.g:7591:2: (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () this_NodeLabels_4= ruleNodeLabels[$current] )? )
            {
            // InternalCypherParser.g:7591:2: (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () this_NodeLabels_4= ruleNodeLabels[$current] )? )
            // InternalCypherParser.g:7592:3: this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () this_NodeLabels_4= ruleNodeLabels[$current] )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPropertyOrLabelsExpressionAccess().getAtomParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_107);
            this_Atom_0=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Atom_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:7603:3: ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==FullStop) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // InternalCypherParser.g:7604:4: () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+
                    {
                    // InternalCypherParser.g:7604:4: ()
                    // InternalCypherParser.g:7605:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupExpressionLeftAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:7614:4: ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+
                    int cnt117=0;
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( (LA117_0==FullStop) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    // InternalCypherParser.g:7615:5: (lv_propertyLookups_2_0= rulePropertyLookup )
                    	    {
                    	    // InternalCypherParser.g:7615:5: (lv_propertyLookups_2_0= rulePropertyLookup )
                    	    // InternalCypherParser.g:7616:6: lv_propertyLookups_2_0= rulePropertyLookup
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    lv_propertyLookups_2_0=rulePropertyLookup();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getPropertyOrLabelsExpressionRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"propertyLookups",
                    	      							lv_propertyLookups_2_0,
                    	      							"org.xtext.example.mydsl.Cypher.PropertyLookup");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt117 >= 1 ) break loop117;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(117, input);
                                throw eee;
                        }
                        cnt117++;
                    } while (true);


                    }
                    break;

            }

            // InternalCypherParser.g:7634:3: ( () this_NodeLabels_4= ruleNodeLabels[$current] )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==Colon) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalCypherParser.g:7635:4: () this_NodeLabels_4= ruleNodeLabels[$current]
                    {
                    // InternalCypherParser.g:7635:4: ()
                    // InternalCypherParser.g:7636:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsExpressionLeftAction_2_0(),
                      						current);
                      				
                    }

                    }

                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getPropertyOrLabelsExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NodeLabels_4=ruleNodeLabels(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_NodeLabels_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyOrLabelsExpression"


    // $ANTLR start "entryRuleAtom"
    // InternalCypherParser.g:7664:1: entryRuleAtom returns [EObject current=null] : iv_ruleAtom= ruleAtom EOF ;
    public final EObject entryRuleAtom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAtom = null;


        try {
            // InternalCypherParser.g:7664:45: (iv_ruleAtom= ruleAtom EOF )
            // InternalCypherParser.g:7665:2: iv_ruleAtom= ruleAtom EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAtomRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAtom=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAtom; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAtom"


    // $ANTLR start "ruleAtom"
    // InternalCypherParser.g:7671:1: ruleAtom returns [EObject current=null] : (this_Literal_0= ruleLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter | this_CaseExpression_3= ruleCaseExpression | ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis ) | this_ListComprehension_9= ruleListComprehension | this_PatternComprehension_10= rulePatternComprehension | ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis ) | ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis ) | this_Reduce_23= ruleReduce | ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis ) | ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis ) | ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis ) | ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis ) | this_ShortestPathPattern_44= ruleShortestPathPattern | this_RelationshipsPattern_45= ruleRelationshipsPattern | this_ParenthesizedExpression_46= ruleParenthesizedExpression | this_FunctionInvocation_47= ruleFunctionInvocation | ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) ) ) ;
    public final EObject ruleAtom() throws RecognitionException {
        EObject current = null;

        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_36=null;
        Token otherlv_38=null;
        Token otherlv_40=null;
        Token otherlv_41=null;
        Token otherlv_43=null;
        EObject this_Literal_0 = null;

        EObject this_Parameter_1 = null;

        EObject this_LegacyParameter_2 = null;

        EObject this_CaseExpression_3 = null;

        EObject this_ListComprehension_9 = null;

        EObject this_PatternComprehension_10 = null;

        EObject lv_filterExpression_14_0 = null;

        EObject lv_filterExpression_19_0 = null;

        EObject lv_expression_21_0 = null;

        EObject this_Reduce_23 = null;

        EObject lv_filterExpression_27_0 = null;

        EObject lv_filterExpression_32_0 = null;

        EObject lv_filterExpression_37_0 = null;

        EObject lv_filterExpression_42_0 = null;

        EObject this_ShortestPathPattern_44 = null;

        EObject this_RelationshipsPattern_45 = null;

        EObject this_ParenthesizedExpression_46 = null;

        EObject this_FunctionInvocation_47 = null;

        EObject lv_variableRef_49_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:7677:2: ( (this_Literal_0= ruleLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter | this_CaseExpression_3= ruleCaseExpression | ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis ) | this_ListComprehension_9= ruleListComprehension | this_PatternComprehension_10= rulePatternComprehension | ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis ) | ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis ) | this_Reduce_23= ruleReduce | ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis ) | ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis ) | ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis ) | ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis ) | this_ShortestPathPattern_44= ruleShortestPathPattern | this_RelationshipsPattern_45= ruleRelationshipsPattern | this_ParenthesizedExpression_46= ruleParenthesizedExpression | this_FunctionInvocation_47= ruleFunctionInvocation | ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) ) ) )
            // InternalCypherParser.g:7678:2: (this_Literal_0= ruleLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter | this_CaseExpression_3= ruleCaseExpression | ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis ) | this_ListComprehension_9= ruleListComprehension | this_PatternComprehension_10= rulePatternComprehension | ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis ) | ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis ) | this_Reduce_23= ruleReduce | ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis ) | ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis ) | ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis ) | ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis ) | this_ShortestPathPattern_44= ruleShortestPathPattern | this_RelationshipsPattern_45= ruleRelationshipsPattern | this_ParenthesizedExpression_46= ruleParenthesizedExpression | this_FunctionInvocation_47= ruleFunctionInvocation | ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) ) )
            {
            // InternalCypherParser.g:7678:2: (this_Literal_0= ruleLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter | this_CaseExpression_3= ruleCaseExpression | ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis ) | this_ListComprehension_9= ruleListComprehension | this_PatternComprehension_10= rulePatternComprehension | ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis ) | ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis ) | this_Reduce_23= ruleReduce | ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis ) | ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis ) | ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis ) | ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis ) | this_ShortestPathPattern_44= ruleShortestPathPattern | this_RelationshipsPattern_45= ruleRelationshipsPattern | this_ParenthesizedExpression_46= ruleParenthesizedExpression | this_FunctionInvocation_47= ruleFunctionInvocation | ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) ) )
            int alt121=19;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // InternalCypherParser.g:7679:3: this_Literal_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:7691:3: this_Parameter_1= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getParameterParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Parameter_1=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Parameter_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:7703:3: this_LegacyParameter_2= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyParameter_2=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyParameter_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:7715:3: this_CaseExpression_3= ruleCaseExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CaseExpression_3=ruleCaseExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CaseExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:7727:3: ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis )
                    {
                    // InternalCypherParser.g:7727:3: ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis )
                    // InternalCypherParser.g:7728:4: () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis
                    {
                    // InternalCypherParser.g:7728:4: ()
                    // InternalCypherParser.g:7729:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getCountAction_4_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_5=(Token)match(input,COUNT,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getAtomAccess().getCOUNTKeyword_4_1());
                      			
                    }
                    otherlv_6=(Token)match(input,LeftParenthesis,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_2());
                      			
                    }
                    otherlv_7=(Token)match(input,Asterisk,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getAtomAccess().getAsteriskKeyword_4_3());
                      			
                    }
                    otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalCypherParser.g:7756:3: this_ListComprehension_9= ruleListComprehension
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ListComprehension_9=ruleListComprehension();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ListComprehension_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalCypherParser.g:7768:3: this_PatternComprehension_10= rulePatternComprehension
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PatternComprehension_10=rulePatternComprehension();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PatternComprehension_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalCypherParser.g:7780:3: ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis )
                    {
                    // InternalCypherParser.g:7780:3: ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis )
                    // InternalCypherParser.g:7781:4: () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis
                    {
                    // InternalCypherParser.g:7781:4: ()
                    // InternalCypherParser.g:7782:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getFilterAction_7_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_12=(Token)match(input,FILTER,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getAtomAccess().getFILTERKeyword_7_1());
                      			
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2());
                      			
                    }
                    // InternalCypherParser.g:7799:4: ( (lv_filterExpression_14_0= ruleFilterExpression ) )
                    // InternalCypherParser.g:7800:5: (lv_filterExpression_14_0= ruleFilterExpression )
                    {
                    // InternalCypherParser.g:7800:5: (lv_filterExpression_14_0= ruleFilterExpression )
                    // InternalCypherParser.g:7801:6: lv_filterExpression_14_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_7_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_filterExpression_14_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_14_0,
                      							"org.xtext.example.mydsl.Cypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_15, grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalCypherParser.g:7824:3: ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis )
                    {
                    // InternalCypherParser.g:7824:3: ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis )
                    // InternalCypherParser.g:7825:4: () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis
                    {
                    // InternalCypherParser.g:7825:4: ()
                    // InternalCypherParser.g:7826:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getExtractAction_8_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_17=(Token)match(input,EXTRACT,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_17, grammarAccess.getAtomAccess().getEXTRACTKeyword_8_1());
                      			
                    }
                    otherlv_18=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_18, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_8_2());
                      			
                    }
                    // InternalCypherParser.g:7843:4: ( (lv_filterExpression_19_0= ruleFilterExpression ) )
                    // InternalCypherParser.g:7844:5: (lv_filterExpression_19_0= ruleFilterExpression )
                    {
                    // InternalCypherParser.g:7844:5: (lv_filterExpression_19_0= ruleFilterExpression )
                    // InternalCypherParser.g:7845:6: lv_filterExpression_19_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_8_3_0());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    lv_filterExpression_19_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_19_0,
                      							"org.xtext.example.mydsl.Cypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:7862:4: (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==VerticalLine) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // InternalCypherParser.g:7863:5: otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) )
                            {
                            otherlv_20=(Token)match(input,VerticalLine,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_20, grammarAccess.getAtomAccess().getVerticalLineKeyword_8_4_0());
                              				
                            }
                            // InternalCypherParser.g:7867:5: ( (lv_expression_21_0= ruleExpression ) )
                            // InternalCypherParser.g:7868:6: (lv_expression_21_0= ruleExpression )
                            {
                            // InternalCypherParser.g:7868:6: (lv_expression_21_0= ruleExpression )
                            // InternalCypherParser.g:7869:7: lv_expression_21_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_8_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_26);
                            lv_expression_21_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAtomRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_21_0,
                              								"org.xtext.example.mydsl.Cypher.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_22=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_22, grammarAccess.getAtomAccess().getRightParenthesisKeyword_8_5());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalCypherParser.g:7893:3: this_Reduce_23= ruleReduce
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getReduceParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Reduce_23=ruleReduce();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Reduce_23;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalCypherParser.g:7905:3: ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis )
                    {
                    // InternalCypherParser.g:7905:3: ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis )
                    // InternalCypherParser.g:7906:4: () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis
                    {
                    // InternalCypherParser.g:7906:4: ()
                    // InternalCypherParser.g:7907:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getAllAction_10_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_25=(Token)match(input,ALL,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_25, grammarAccess.getAtomAccess().getALLKeyword_10_1());
                      			
                    }
                    otherlv_26=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_26, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_10_2());
                      			
                    }
                    // InternalCypherParser.g:7924:4: ( (lv_filterExpression_27_0= ruleFilterExpression ) )
                    // InternalCypherParser.g:7925:5: (lv_filterExpression_27_0= ruleFilterExpression )
                    {
                    // InternalCypherParser.g:7925:5: (lv_filterExpression_27_0= ruleFilterExpression )
                    // InternalCypherParser.g:7926:6: lv_filterExpression_27_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_10_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_filterExpression_27_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_27_0,
                      							"org.xtext.example.mydsl.Cypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_28=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_28, grammarAccess.getAtomAccess().getRightParenthesisKeyword_10_4());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalCypherParser.g:7949:3: ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis )
                    {
                    // InternalCypherParser.g:7949:3: ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis )
                    // InternalCypherParser.g:7950:4: () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis
                    {
                    // InternalCypherParser.g:7950:4: ()
                    // InternalCypherParser.g:7951:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getAnyAction_11_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_30=(Token)match(input,ANY,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_30, grammarAccess.getAtomAccess().getANYKeyword_11_1());
                      			
                    }
                    otherlv_31=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_31, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_11_2());
                      			
                    }
                    // InternalCypherParser.g:7968:4: ( (lv_filterExpression_32_0= ruleFilterExpression ) )
                    // InternalCypherParser.g:7969:5: (lv_filterExpression_32_0= ruleFilterExpression )
                    {
                    // InternalCypherParser.g:7969:5: (lv_filterExpression_32_0= ruleFilterExpression )
                    // InternalCypherParser.g:7970:6: lv_filterExpression_32_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_filterExpression_32_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_32_0,
                      							"org.xtext.example.mydsl.Cypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_33=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_33, grammarAccess.getAtomAccess().getRightParenthesisKeyword_11_4());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalCypherParser.g:7993:3: ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis )
                    {
                    // InternalCypherParser.g:7993:3: ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis )
                    // InternalCypherParser.g:7994:4: () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis
                    {
                    // InternalCypherParser.g:7994:4: ()
                    // InternalCypherParser.g:7995:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNoneAction_12_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_35=(Token)match(input,NONE,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_35, grammarAccess.getAtomAccess().getNONEKeyword_12_1());
                      			
                    }
                    otherlv_36=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_36, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2());
                      			
                    }
                    // InternalCypherParser.g:8012:4: ( (lv_filterExpression_37_0= ruleFilterExpression ) )
                    // InternalCypherParser.g:8013:5: (lv_filterExpression_37_0= ruleFilterExpression )
                    {
                    // InternalCypherParser.g:8013:5: (lv_filterExpression_37_0= ruleFilterExpression )
                    // InternalCypherParser.g:8014:6: lv_filterExpression_37_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_filterExpression_37_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_37_0,
                      							"org.xtext.example.mydsl.Cypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_38=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_38, grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_4());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalCypherParser.g:8037:3: ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis )
                    {
                    // InternalCypherParser.g:8037:3: ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis )
                    // InternalCypherParser.g:8038:4: () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis
                    {
                    // InternalCypherParser.g:8038:4: ()
                    // InternalCypherParser.g:8039:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getSingleAction_13_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_40=(Token)match(input,SINGLE,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_40, grammarAccess.getAtomAccess().getSINGLEKeyword_13_1());
                      			
                    }
                    otherlv_41=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_41, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_13_2());
                      			
                    }
                    // InternalCypherParser.g:8056:4: ( (lv_filterExpression_42_0= ruleFilterExpression ) )
                    // InternalCypherParser.g:8057:5: (lv_filterExpression_42_0= ruleFilterExpression )
                    {
                    // InternalCypherParser.g:8057:5: (lv_filterExpression_42_0= ruleFilterExpression )
                    // InternalCypherParser.g:8058:6: lv_filterExpression_42_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_filterExpression_42_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_42_0,
                      							"org.xtext.example.mydsl.Cypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_43=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_43, grammarAccess.getAtomAccess().getRightParenthesisKeyword_13_4());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalCypherParser.g:8081:3: this_ShortestPathPattern_44= ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ShortestPathPattern_44=ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortestPathPattern_44;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalCypherParser.g:8093:3: this_RelationshipsPattern_45= ruleRelationshipsPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RelationshipsPattern_45=ruleRelationshipsPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RelationshipsPattern_45;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalCypherParser.g:8105:3: this_ParenthesizedExpression_46= ruleParenthesizedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_16());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenthesizedExpression_46=ruleParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenthesizedExpression_46;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalCypherParser.g:8117:3: this_FunctionInvocation_47= ruleFunctionInvocation
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_17());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionInvocation_47=ruleFunctionInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionInvocation_47;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalCypherParser.g:8129:3: ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) )
                    {
                    // InternalCypherParser.g:8129:3: ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) )
                    // InternalCypherParser.g:8130:4: () ( (lv_variableRef_49_0= ruleVariableDeclaration ) )
                    {
                    // InternalCypherParser.g:8130:4: ()
                    // InternalCypherParser.g:8131:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getVariableRefAction_18_0(),
                      						current);
                      				
                    }

                    }

                    // InternalCypherParser.g:8140:4: ( (lv_variableRef_49_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:8141:5: (lv_variableRef_49_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:8141:5: (lv_variableRef_49_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:8142:6: lv_variableRef_49_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationParserRuleCall_18_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_variableRef_49_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"variableRef",
                      							lv_variableRef_49_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAtom"


    // $ANTLR start "entryRuleLiteral"
    // InternalCypherParser.g:8164:1: entryRuleLiteral returns [EObject current=null] : iv_ruleLiteral= ruleLiteral EOF ;
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteral = null;


        try {
            // InternalCypherParser.g:8164:48: (iv_ruleLiteral= ruleLiteral EOF )
            // InternalCypherParser.g:8165:2: iv_ruleLiteral= ruleLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteral"


    // $ANTLR start "ruleLiteral"
    // InternalCypherParser.g:8171:1: ruleLiteral returns [EObject current=null] : (this_NumberLiteral_0= ruleNumberLiteral | this_StringLiteral_1= ruleStringLiteral | ( () otherlv_3= NULL ) | this_BooleanLiteral_4= ruleBooleanLiteral | this_MapLiteral_5= ruleMapLiteral | this_ListLiteral_6= ruleListLiteral ) ;
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        EObject this_NumberLiteral_0 = null;

        EObject this_StringLiteral_1 = null;

        EObject this_BooleanLiteral_4 = null;

        EObject this_MapLiteral_5 = null;

        EObject this_ListLiteral_6 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8177:2: ( (this_NumberLiteral_0= ruleNumberLiteral | this_StringLiteral_1= ruleStringLiteral | ( () otherlv_3= NULL ) | this_BooleanLiteral_4= ruleBooleanLiteral | this_MapLiteral_5= ruleMapLiteral | this_ListLiteral_6= ruleListLiteral ) )
            // InternalCypherParser.g:8178:2: (this_NumberLiteral_0= ruleNumberLiteral | this_StringLiteral_1= ruleStringLiteral | ( () otherlv_3= NULL ) | this_BooleanLiteral_4= ruleBooleanLiteral | this_MapLiteral_5= ruleMapLiteral | this_ListLiteral_6= ruleListLiteral )
            {
            // InternalCypherParser.g:8178:2: (this_NumberLiteral_0= ruleNumberLiteral | this_StringLiteral_1= ruleStringLiteral | ( () otherlv_3= NULL ) | this_BooleanLiteral_4= ruleBooleanLiteral | this_MapLiteral_5= ruleMapLiteral | this_ListLiteral_6= ruleListLiteral )
            int alt122=6;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt122=1;
                }
                break;
            case RULE_STRING_LITERAL:
                {
                alt122=2;
                }
                break;
            case NULL:
                {
                alt122=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt122=4;
                }
                break;
            case LeftCurlyBracket:
                {
                alt122=5;
                }
                break;
            case LeftSquareBracket:
                {
                alt122=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // InternalCypherParser.g:8179:3: this_NumberLiteral_0= ruleNumberLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NumberLiteral_0=ruleNumberLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NumberLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:8191:3: this_StringLiteral_1= ruleStringLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_1=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StringLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:8203:3: ( () otherlv_3= NULL )
                    {
                    // InternalCypherParser.g:8203:3: ( () otherlv_3= NULL )
                    // InternalCypherParser.g:8204:4: () otherlv_3= NULL
                    {
                    // InternalCypherParser.g:8204:4: ()
                    // InternalCypherParser.g:8205:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getLiteralAccess().getNULLAction_2_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_3=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getLiteralAccess().getNULLKeyword_2_1());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:8220:3: this_BooleanLiteral_4= ruleBooleanLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_4=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BooleanLiteral_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:8232:3: this_MapLiteral_5= ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MapLiteral_5=ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MapLiteral_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalCypherParser.g:8244:3: this_ListLiteral_6= ruleListLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ListLiteral_6=ruleListLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ListLiteral_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteral"


    // $ANTLR start "entryRuleBooleanLiteral"
    // InternalCypherParser.g:8259:1: entryRuleBooleanLiteral returns [EObject current=null] : iv_ruleBooleanLiteral= ruleBooleanLiteral EOF ;
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBooleanLiteral = null;


        try {
            // InternalCypherParser.g:8259:55: (iv_ruleBooleanLiteral= ruleBooleanLiteral EOF )
            // InternalCypherParser.g:8260:2: iv_ruleBooleanLiteral= ruleBooleanLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBooleanLiteral"


    // $ANTLR start "ruleBooleanLiteral"
    // InternalCypherParser.g:8266:1: ruleBooleanLiteral returns [EObject current=null] : ( () ( ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) ) ) ) ;
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_1_1=null;
        Token lv_value_1_2=null;


        	enterRule();

        try {
            // InternalCypherParser.g:8272:2: ( ( () ( ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) ) ) ) )
            // InternalCypherParser.g:8273:2: ( () ( ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) ) ) )
            {
            // InternalCypherParser.g:8273:2: ( () ( ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) ) ) )
            // InternalCypherParser.g:8274:3: () ( ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) ) )
            {
            // InternalCypherParser.g:8274:3: ()
            // InternalCypherParser.g:8275:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:8284:3: ( ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) ) )
            // InternalCypherParser.g:8285:4: ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) )
            {
            // InternalCypherParser.g:8285:4: ( (lv_value_1_1= TRUE | lv_value_1_2= FALSE ) )
            // InternalCypherParser.g:8286:5: (lv_value_1_1= TRUE | lv_value_1_2= FALSE )
            {
            // InternalCypherParser.g:8286:5: (lv_value_1_1= TRUE | lv_value_1_2= FALSE )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==TRUE) ) {
                alt123=1;
            }
            else if ( (LA123_0==FALSE) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // InternalCypherParser.g:8287:6: lv_value_1_1= TRUE
                    {
                    lv_value_1_1=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_1_1, grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "value", lv_value_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:8298:6: lv_value_1_2= FALSE
                    {
                    lv_value_1_2=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_1_2, grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "value", lv_value_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBooleanLiteral"


    // $ANTLR start "entryRuleListLiteral"
    // InternalCypherParser.g:8315:1: entryRuleListLiteral returns [EObject current=null] : iv_ruleListLiteral= ruleListLiteral EOF ;
    public final EObject entryRuleListLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleListLiteral = null;


        try {
            // InternalCypherParser.g:8315:52: (iv_ruleListLiteral= ruleListLiteral EOF )
            // InternalCypherParser.g:8316:2: iv_ruleListLiteral= ruleListLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleListLiteral=ruleListLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListLiteral"


    // $ANTLR start "ruleListLiteral"
    // InternalCypherParser.g:8322:1: ruleListLiteral returns [EObject current=null] : ( () otherlv_1= LeftSquareBracket ( ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )? otherlv_5= RightSquareBracket ) ;
    public final EObject ruleListLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expressions_2_0 = null;

        EObject lv_expressions_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8328:2: ( ( () otherlv_1= LeftSquareBracket ( ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )? otherlv_5= RightSquareBracket ) )
            // InternalCypherParser.g:8329:2: ( () otherlv_1= LeftSquareBracket ( ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )? otherlv_5= RightSquareBracket )
            {
            // InternalCypherParser.g:8329:2: ( () otherlv_1= LeftSquareBracket ( ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )? otherlv_5= RightSquareBracket )
            // InternalCypherParser.g:8330:3: () otherlv_1= LeftSquareBracket ( ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )? otherlv_5= RightSquareBracket
            {
            // InternalCypherParser.g:8330:3: ()
            // InternalCypherParser.g:8331:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getListLiteralAccess().getListLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_103); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_1());
              		
            }
            // InternalCypherParser.g:8344:3: ( ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=ALLSHORTESTPATHS && LA125_0<=WHERE)||(LA125_0>=CASE && LA125_0<=XOR)||(LA125_0>=AS && LA125_0<=OR)||LA125_0==DollarSign||LA125_0==LeftParenthesis||LA125_0==PlusSign||LA125_0==HyphenMinus||LA125_0==LeftSquareBracket||LA125_0==LeftCurlyBracket||LA125_0==RULE_ID||(LA125_0>=RULE_STRING_LITERAL && LA125_0<=RULE_DECIMAL)) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // InternalCypherParser.g:8345:4: ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
                    {
                    // InternalCypherParser.g:8345:4: ( (lv_expressions_2_0= ruleExpression ) )
                    // InternalCypherParser.g:8346:5: (lv_expressions_2_0= ruleExpression )
                    {
                    // InternalCypherParser.g:8346:5: (lv_expressions_2_0= ruleExpression )
                    // InternalCypherParser.g:8347:6: lv_expressions_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_110);
                    lv_expressions_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getListLiteralRule());
                      						}
                      						add(
                      							current,
                      							"expressions",
                      							lv_expressions_2_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:8364:4: (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==Comma) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // InternalCypherParser.g:8365:5: otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalCypherParser.g:8369:5: ( (lv_expressions_4_0= ruleExpression ) )
                    	    // InternalCypherParser.g:8370:6: (lv_expressions_4_0= ruleExpression )
                    	    {
                    	    // InternalCypherParser.g:8370:6: (lv_expressions_4_0= ruleExpression )
                    	    // InternalCypherParser.g:8371:7: lv_expressions_4_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_110);
                    	    lv_expressions_4_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getListLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"expressions",
                    	      								lv_expressions_4_0,
                    	      								"org.xtext.example.mydsl.Cypher.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListLiteral"


    // $ANTLR start "entryRuleReduce"
    // InternalCypherParser.g:8398:1: entryRuleReduce returns [EObject current=null] : iv_ruleReduce= ruleReduce EOF ;
    public final EObject entryRuleReduce() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReduce = null;


        try {
            // InternalCypherParser.g:8398:47: (iv_ruleReduce= ruleReduce EOF )
            // InternalCypherParser.g:8399:2: iv_ruleReduce= ruleReduce EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReduceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReduce=ruleReduce();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReduce; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReduce"


    // $ANTLR start "ruleReduce"
    // InternalCypherParser.g:8405:1: ruleReduce returns [EObject current=null] : (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis ) ;
    public final EObject ruleReduce() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_accumulator_2_0 = null;

        EObject lv_accumulatorExpression_4_0 = null;

        EObject lv_idInColl_6_0 = null;

        EObject lv_expression_8_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8411:2: ( (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis ) )
            // InternalCypherParser.g:8412:2: (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis )
            {
            // InternalCypherParser.g:8412:2: (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis )
            // InternalCypherParser.g:8413:3: otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis
            {
            otherlv_0=(Token)match(input,REDUCE,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getReduceAccess().getREDUCEKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalCypherParser.g:8421:3: ( (lv_accumulator_2_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:8422:4: (lv_accumulator_2_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:8422:4: (lv_accumulator_2_0= ruleVariableDeclaration )
            // InternalCypherParser.g:8423:5: lv_accumulator_2_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_accumulator_2_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"accumulator",
              						lv_accumulator_2_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getReduceAccess().getEqualsSignKeyword_3());
              		
            }
            // InternalCypherParser.g:8444:3: ( (lv_accumulatorExpression_4_0= ruleExpression ) )
            // InternalCypherParser.g:8445:4: (lv_accumulatorExpression_4_0= ruleExpression )
            {
            // InternalCypherParser.g:8445:4: (lv_accumulatorExpression_4_0= ruleExpression )
            // InternalCypherParser.g:8446:5: lv_accumulatorExpression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_111);
            lv_accumulatorExpression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"accumulatorExpression",
              						lv_accumulatorExpression_4_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getReduceAccess().getCommaKeyword_5());
              		
            }
            // InternalCypherParser.g:8467:3: ( (lv_idInColl_6_0= ruleIdInColl ) )
            // InternalCypherParser.g:8468:4: (lv_idInColl_6_0= ruleIdInColl )
            {
            // InternalCypherParser.g:8468:4: (lv_idInColl_6_0= ruleIdInColl )
            // InternalCypherParser.g:8469:5: lv_idInColl_6_0= ruleIdInColl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_54);
            lv_idInColl_6_0=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"idInColl",
              						lv_idInColl_6_0,
              						"org.xtext.example.mydsl.Cypher.IdInColl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,VerticalLine,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getReduceAccess().getVerticalLineKeyword_7());
              		
            }
            // InternalCypherParser.g:8490:3: ( (lv_expression_8_0= ruleExpression ) )
            // InternalCypherParser.g:8491:4: (lv_expression_8_0= ruleExpression )
            {
            // InternalCypherParser.g:8491:4: (lv_expression_8_0= ruleExpression )
            // InternalCypherParser.g:8492:5: lv_expression_8_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_expression_8_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_8_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getReduceAccess().getRightParenthesisKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReduce"


    // $ANTLR start "entryRuleParenthesizedExpression"
    // InternalCypherParser.g:8517:1: entryRuleParenthesizedExpression returns [EObject current=null] : iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF ;
    public final EObject entryRuleParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParenthesizedExpression = null;


        try {
            // InternalCypherParser.g:8517:64: (iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF )
            // InternalCypherParser.g:8518:2: iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenthesizedExpression=ruleParenthesizedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenthesizedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParenthesizedExpression"


    // $ANTLR start "ruleParenthesizedExpression"
    // InternalCypherParser.g:8524:1: ruleParenthesizedExpression returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8530:2: ( (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis ) )
            // InternalCypherParser.g:8531:2: (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis )
            {
            // InternalCypherParser.g:8531:2: (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis )
            // InternalCypherParser.g:8532:3: otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalCypherParser.g:8536:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalCypherParser.g:8537:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalCypherParser.g:8537:4: (lv_expression_1_0= ruleExpression )
            // InternalCypherParser.g:8538:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParenthesizedExpression"


    // $ANTLR start "entryRuleRelationshipsPattern"
    // InternalCypherParser.g:8563:1: entryRuleRelationshipsPattern returns [EObject current=null] : iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF ;
    public final EObject entryRuleRelationshipsPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipsPattern = null;


        try {
            // InternalCypherParser.g:8563:61: (iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF )
            // InternalCypherParser.g:8564:2: iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipsPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipsPattern=ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipsPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipsPattern"


    // $ANTLR start "ruleRelationshipsPattern"
    // InternalCypherParser.g:8570:1: ruleRelationshipsPattern returns [EObject current=null] : ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ ) ;
    public final EObject ruleRelationshipsPattern() throws RecognitionException {
        EObject current = null;

        EObject lv_nodePattern_0_0 = null;

        EObject lv_chain_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8576:2: ( ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ ) )
            // InternalCypherParser.g:8577:2: ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ )
            {
            // InternalCypherParser.g:8577:2: ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ )
            // InternalCypherParser.g:8578:3: ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+
            {
            // InternalCypherParser.g:8578:3: ( (lv_nodePattern_0_0= ruleNodePattern ) )
            // InternalCypherParser.g:8579:4: (lv_nodePattern_0_0= ruleNodePattern )
            {
            // InternalCypherParser.g:8579:4: (lv_nodePattern_0_0= ruleNodePattern )
            // InternalCypherParser.g:8580:5: lv_nodePattern_0_0= ruleNodePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_32);
            lv_nodePattern_0_0=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipsPatternRule());
              					}
              					set(
              						current,
              						"nodePattern",
              						lv_nodePattern_0_0,
              						"org.xtext.example.mydsl.Cypher.NodePattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:8597:3: ( (lv_chain_1_0= rulePatternElementChain ) )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                alt126 = dfa126.predict(input);
                switch (alt126) {
            	case 1 :
            	    // InternalCypherParser.g:8598:4: (lv_chain_1_0= rulePatternElementChain )
            	    {
            	    // InternalCypherParser.g:8598:4: (lv_chain_1_0= rulePatternElementChain )
            	    // InternalCypherParser.g:8599:5: lv_chain_1_0= rulePatternElementChain
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_77);
            	    lv_chain_1_0=rulePatternElementChain();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getRelationshipsPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"chain",
            	      						lv_chain_1_0,
            	      						"org.xtext.example.mydsl.Cypher.PatternElementChain");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipsPattern"


    // $ANTLR start "entryRuleFilterExpression"
    // InternalCypherParser.g:8620:1: entryRuleFilterExpression returns [EObject current=null] : iv_ruleFilterExpression= ruleFilterExpression EOF ;
    public final EObject entryRuleFilterExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFilterExpression = null;


        try {
            // InternalCypherParser.g:8620:57: (iv_ruleFilterExpression= ruleFilterExpression EOF )
            // InternalCypherParser.g:8621:2: iv_ruleFilterExpression= ruleFilterExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFilterExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFilterExpression=ruleFilterExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFilterExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFilterExpression"


    // $ANTLR start "ruleFilterExpression"
    // InternalCypherParser.g:8627:1: ruleFilterExpression returns [EObject current=null] : ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? ) ;
    public final EObject ruleFilterExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_idInColl_0_0 = null;

        EObject lv_where_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8633:2: ( ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? ) )
            // InternalCypherParser.g:8634:2: ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? )
            {
            // InternalCypherParser.g:8634:2: ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? )
            // InternalCypherParser.g:8635:3: ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )?
            {
            // InternalCypherParser.g:8635:3: ( (lv_idInColl_0_0= ruleIdInColl ) )
            // InternalCypherParser.g:8636:4: (lv_idInColl_0_0= ruleIdInColl )
            {
            // InternalCypherParser.g:8636:4: (lv_idInColl_0_0= ruleIdInColl )
            // InternalCypherParser.g:8637:5: lv_idInColl_0_0= ruleIdInColl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_idInColl_0_0=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFilterExpressionRule());
              					}
              					set(
              						current,
              						"idInColl",
              						lv_idInColl_0_0,
              						"org.xtext.example.mydsl.Cypher.IdInColl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:8654:3: ( (lv_where_1_0= ruleWhere ) )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==WHERE) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // InternalCypherParser.g:8655:4: (lv_where_1_0= ruleWhere )
                    {
                    // InternalCypherParser.g:8655:4: (lv_where_1_0= ruleWhere )
                    // InternalCypherParser.g:8656:5: lv_where_1_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_1_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFilterExpressionRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_1_0,
                      						"org.xtext.example.mydsl.Cypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFilterExpression"


    // $ANTLR start "entryRuleIdInColl"
    // InternalCypherParser.g:8677:1: entryRuleIdInColl returns [EObject current=null] : iv_ruleIdInColl= ruleIdInColl EOF ;
    public final EObject entryRuleIdInColl() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdInColl = null;


        try {
            // InternalCypherParser.g:8677:49: (iv_ruleIdInColl= ruleIdInColl EOF )
            // InternalCypherParser.g:8678:2: iv_ruleIdInColl= ruleIdInColl EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdInCollRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdInColl=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdInColl; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdInColl"


    // $ANTLR start "ruleIdInColl"
    // InternalCypherParser.g:8684:1: ruleIdInColl returns [EObject current=null] : ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) ) ;
    public final EObject ruleIdInColl() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_variable_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8690:2: ( ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) ) )
            // InternalCypherParser.g:8691:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) )
            {
            // InternalCypherParser.g:8691:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) )
            // InternalCypherParser.g:8692:3: ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) )
            {
            // InternalCypherParser.g:8692:3: ( (lv_variable_0_0= ruleVariableDeclaration ) )
            // InternalCypherParser.g:8693:4: (lv_variable_0_0= ruleVariableDeclaration )
            {
            // InternalCypherParser.g:8693:4: (lv_variable_0_0= ruleVariableDeclaration )
            // InternalCypherParser.g:8694:5: lv_variable_0_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_53);
            lv_variable_0_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdInCollRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_0_0,
              						"org.xtext.example.mydsl.Cypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,IN,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIdInCollAccess().getINKeyword_1());
              		
            }
            // InternalCypherParser.g:8715:3: ( (lv_expression_2_0= ruleExpression ) )
            // InternalCypherParser.g:8716:4: (lv_expression_2_0= ruleExpression )
            {
            // InternalCypherParser.g:8716:4: (lv_expression_2_0= ruleExpression )
            // InternalCypherParser.g:8717:5: lv_expression_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdInCollRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdInColl"


    // $ANTLR start "entryRuleFunctionInvocation"
    // InternalCypherParser.g:8738:1: entryRuleFunctionInvocation returns [EObject current=null] : iv_ruleFunctionInvocation= ruleFunctionInvocation EOF ;
    public final EObject entryRuleFunctionInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionInvocation = null;


        try {
            // InternalCypherParser.g:8738:59: (iv_ruleFunctionInvocation= ruleFunctionInvocation EOF )
            // InternalCypherParser.g:8739:2: iv_ruleFunctionInvocation= ruleFunctionInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionInvocation=ruleFunctionInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionInvocation"


    // $ANTLR start "ruleFunctionInvocation"
    // InternalCypherParser.g:8745:1: ruleFunctionInvocation returns [EObject current=null] : ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) ;
    public final EObject ruleFunctionInvocation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_distinct_2_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_functionName_0_0 = null;

        EObject lv_parameter_3_0 = null;

        EObject lv_parameter_5_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8751:2: ( ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) )
            // InternalCypherParser.g:8752:2: ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            {
            // InternalCypherParser.g:8752:2: ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            // InternalCypherParser.g:8753:3: ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis
            {
            // InternalCypherParser.g:8753:3: ( (lv_functionName_0_0= ruleFunctionName ) )
            // InternalCypherParser.g:8754:4: (lv_functionName_0_0= ruleFunctionName )
            {
            // InternalCypherParser.g:8754:4: (lv_functionName_0_0= ruleFunctionName )
            // InternalCypherParser.g:8755:5: lv_functionName_0_0= ruleFunctionName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_functionName_0_0=ruleFunctionName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
              					}
              					set(
              						current,
              						"functionName",
              						lv_functionName_0_0,
              						"org.xtext.example.mydsl.Cypher.FunctionName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_112); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalCypherParser.g:8776:3: ( (lv_distinct_2_0= DISTINCT ) )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==DISTINCT) ) {
                int LA128_1 = input.LA(2);

                if ( (synpred183_InternalCypherParser()) ) {
                    alt128=1;
                }
            }
            switch (alt128) {
                case 1 :
                    // InternalCypherParser.g:8777:4: (lv_distinct_2_0= DISTINCT )
                    {
                    // InternalCypherParser.g:8777:4: (lv_distinct_2_0= DISTINCT )
                    // InternalCypherParser.g:8778:5: lv_distinct_2_0= DISTINCT
                    {
                    lv_distinct_2_0=(Token)match(input,DISTINCT,FOLLOW_112); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distinct_2_0, grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionInvocationRule());
                      					}
                      					setWithLastConsumed(current, "distinct", lv_distinct_2_0 != null, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalCypherParser.g:8790:3: ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( ((LA130_0>=ALLSHORTESTPATHS && LA130_0<=WHERE)||(LA130_0>=CASE && LA130_0<=XOR)||(LA130_0>=AS && LA130_0<=OR)||LA130_0==DollarSign||LA130_0==LeftParenthesis||LA130_0==PlusSign||LA130_0==HyphenMinus||LA130_0==LeftSquareBracket||LA130_0==LeftCurlyBracket||LA130_0==RULE_ID||(LA130_0>=RULE_STRING_LITERAL && LA130_0<=RULE_DECIMAL)) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // InternalCypherParser.g:8791:4: ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )*
                    {
                    // InternalCypherParser.g:8791:4: ( (lv_parameter_3_0= ruleExpression ) )
                    // InternalCypherParser.g:8792:5: (lv_parameter_3_0= ruleExpression )
                    {
                    // InternalCypherParser.g:8792:5: (lv_parameter_3_0= ruleExpression )
                    // InternalCypherParser.g:8793:6: lv_parameter_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_113);
                    lv_parameter_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
                      						}
                      						add(
                      							current,
                      							"parameter",
                      							lv_parameter_3_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:8810:4: (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )*
                    loop129:
                    do {
                        int alt129=2;
                        int LA129_0 = input.LA(1);

                        if ( (LA129_0==Comma) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                    	case 1 :
                    	    // InternalCypherParser.g:8811:5: otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    // InternalCypherParser.g:8815:5: ( (lv_parameter_5_0= ruleExpression ) )
                    	    // InternalCypherParser.g:8816:6: (lv_parameter_5_0= ruleExpression )
                    	    {
                    	    // InternalCypherParser.g:8816:6: (lv_parameter_5_0= ruleExpression )
                    	    // InternalCypherParser.g:8817:7: lv_parameter_5_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_113);
                    	    lv_parameter_5_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"parameter",
                    	      								lv_parameter_5_0,
                    	      								"org.xtext.example.mydsl.Cypher.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop129;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionInvocation"


    // $ANTLR start "entryRuleFunctionName"
    // InternalCypherParser.g:8844:1: entryRuleFunctionName returns [String current=null] : iv_ruleFunctionName= ruleFunctionName EOF ;
    public final String entryRuleFunctionName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFunctionName = null;


        try {
            // InternalCypherParser.g:8844:52: (iv_ruleFunctionName= ruleFunctionName EOF )
            // InternalCypherParser.g:8845:2: iv_ruleFunctionName= ruleFunctionName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionName=ruleFunctionName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionName"


    // $ANTLR start "ruleFunctionName"
    // InternalCypherParser.g:8851:1: ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleFunctionName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8857:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:8858:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionName"


    // $ANTLR start "entryRuleExplicitProcedureInvocation"
    // InternalCypherParser.g:8871:1: entryRuleExplicitProcedureInvocation returns [EObject current=null] : iv_ruleExplicitProcedureInvocation= ruleExplicitProcedureInvocation EOF ;
    public final EObject entryRuleExplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExplicitProcedureInvocation = null;


        try {
            // InternalCypherParser.g:8871:68: (iv_ruleExplicitProcedureInvocation= ruleExplicitProcedureInvocation EOF )
            // InternalCypherParser.g:8872:2: iv_ruleExplicitProcedureInvocation= ruleExplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExplicitProcedureInvocation=ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExplicitProcedureInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExplicitProcedureInvocation"


    // $ANTLR start "ruleExplicitProcedureInvocation"
    // InternalCypherParser.g:8878:1: ruleExplicitProcedureInvocation returns [EObject current=null] : ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleExplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_procedureName_0_0 = null;

        EObject lv_parameter_2_0 = null;

        EObject lv_parameter_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8884:2: ( ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis ) )
            // InternalCypherParser.g:8885:2: ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis )
            {
            // InternalCypherParser.g:8885:2: ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis )
            // InternalCypherParser.g:8886:3: ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis
            {
            // InternalCypherParser.g:8886:3: ( (lv_procedureName_0_0= ruleProcedureName ) )
            // InternalCypherParser.g:8887:4: (lv_procedureName_0_0= ruleProcedureName )
            {
            // InternalCypherParser.g:8887:4: (lv_procedureName_0_0= ruleProcedureName )
            // InternalCypherParser.g:8888:5: lv_procedureName_0_0= ruleProcedureName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_procedureName_0_0=ruleProcedureName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExplicitProcedureInvocationRule());
              					}
              					set(
              						current,
              						"procedureName",
              						lv_procedureName_0_0,
              						"org.xtext.example.mydsl.Cypher.ProcedureName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_112); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalCypherParser.g:8909:3: ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( ((LA132_0>=ALLSHORTESTPATHS && LA132_0<=WHERE)||(LA132_0>=CASE && LA132_0<=XOR)||(LA132_0>=AS && LA132_0<=OR)||LA132_0==DollarSign||LA132_0==LeftParenthesis||LA132_0==PlusSign||LA132_0==HyphenMinus||LA132_0==LeftSquareBracket||LA132_0==LeftCurlyBracket||LA132_0==RULE_ID||(LA132_0>=RULE_STRING_LITERAL && LA132_0<=RULE_DECIMAL)) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // InternalCypherParser.g:8910:4: ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )*
                    {
                    // InternalCypherParser.g:8910:4: ( (lv_parameter_2_0= ruleExpression ) )
                    // InternalCypherParser.g:8911:5: (lv_parameter_2_0= ruleExpression )
                    {
                    // InternalCypherParser.g:8911:5: (lv_parameter_2_0= ruleExpression )
                    // InternalCypherParser.g:8912:6: lv_parameter_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_113);
                    lv_parameter_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExplicitProcedureInvocationRule());
                      						}
                      						add(
                      							current,
                      							"parameter",
                      							lv_parameter_2_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:8929:4: (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )*
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==Comma) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // InternalCypherParser.g:8930:5: otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalCypherParser.g:8934:5: ( (lv_parameter_4_0= ruleExpression ) )
                    	    // InternalCypherParser.g:8935:6: (lv_parameter_4_0= ruleExpression )
                    	    {
                    	    // InternalCypherParser.g:8935:6: (lv_parameter_4_0= ruleExpression )
                    	    // InternalCypherParser.g:8936:7: lv_parameter_4_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_113);
                    	    lv_parameter_4_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExplicitProcedureInvocationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"parameter",
                    	      								lv_parameter_4_0,
                    	      								"org.xtext.example.mydsl.Cypher.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExplicitProcedureInvocation"


    // $ANTLR start "entryRuleImplicitProcedureInvocation"
    // InternalCypherParser.g:8963:1: entryRuleImplicitProcedureInvocation returns [EObject current=null] : iv_ruleImplicitProcedureInvocation= ruleImplicitProcedureInvocation EOF ;
    public final EObject entryRuleImplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleImplicitProcedureInvocation = null;


        try {
            // InternalCypherParser.g:8963:68: (iv_ruleImplicitProcedureInvocation= ruleImplicitProcedureInvocation EOF )
            // InternalCypherParser.g:8964:2: iv_ruleImplicitProcedureInvocation= ruleImplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImplicitProcedureInvocation=ruleImplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImplicitProcedureInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleImplicitProcedureInvocation"


    // $ANTLR start "ruleImplicitProcedureInvocation"
    // InternalCypherParser.g:8970:1: ruleImplicitProcedureInvocation returns [EObject current=null] : ( () ( (lv_procedureName_1_0= ruleProcedureName ) ) ) ;
    public final EObject ruleImplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        EObject lv_procedureName_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:8976:2: ( ( () ( (lv_procedureName_1_0= ruleProcedureName ) ) ) )
            // InternalCypherParser.g:8977:2: ( () ( (lv_procedureName_1_0= ruleProcedureName ) ) )
            {
            // InternalCypherParser.g:8977:2: ( () ( (lv_procedureName_1_0= ruleProcedureName ) ) )
            // InternalCypherParser.g:8978:3: () ( (lv_procedureName_1_0= ruleProcedureName ) )
            {
            // InternalCypherParser.g:8978:3: ()
            // InternalCypherParser.g:8979:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getImplicitProcedureInvocationAccess().getImplicitProcedureInvocationAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:8988:3: ( (lv_procedureName_1_0= ruleProcedureName ) )
            // InternalCypherParser.g:8989:4: (lv_procedureName_1_0= ruleProcedureName )
            {
            // InternalCypherParser.g:8989:4: (lv_procedureName_1_0= ruleProcedureName )
            // InternalCypherParser.g:8990:5: lv_procedureName_1_0= ruleProcedureName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_procedureName_1_0=ruleProcedureName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getImplicitProcedureInvocationRule());
              					}
              					set(
              						current,
              						"procedureName",
              						lv_procedureName_1_0,
              						"org.xtext.example.mydsl.Cypher.ProcedureName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleImplicitProcedureInvocation"


    // $ANTLR start "entryRuleProcedureResultField"
    // InternalCypherParser.g:9011:1: entryRuleProcedureResultField returns [String current=null] : iv_ruleProcedureResultField= ruleProcedureResultField EOF ;
    public final String entryRuleProcedureResultField() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleProcedureResultField = null;


        try {
            // InternalCypherParser.g:9011:60: (iv_ruleProcedureResultField= ruleProcedureResultField EOF )
            // InternalCypherParser.g:9012:2: iv_ruleProcedureResultField= ruleProcedureResultField EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getProcedureResultFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProcedureResultField=ruleProcedureResultField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProcedureResultField.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProcedureResultField"


    // $ANTLR start "ruleProcedureResultField"
    // InternalCypherParser.g:9018:1: ruleProcedureResultField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleProcedureResultField() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9024:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:9025:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProcedureResultField"


    // $ANTLR start "entryRuleProcedureName"
    // InternalCypherParser.g:9038:1: entryRuleProcedureName returns [EObject current=null] : iv_ruleProcedureName= ruleProcedureName EOF ;
    public final EObject entryRuleProcedureName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleProcedureName = null;


        try {
            // InternalCypherParser.g:9038:54: (iv_ruleProcedureName= ruleProcedureName EOF )
            // InternalCypherParser.g:9039:2: iv_ruleProcedureName= ruleProcedureName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getProcedureNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProcedureName=ruleProcedureName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProcedureName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProcedureName"


    // $ANTLR start "ruleProcedureName"
    // InternalCypherParser.g:9045:1: ruleProcedureName returns [EObject current=null] : ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) ;
    public final EObject ruleProcedureName() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_namespace_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9051:2: ( ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) )
            // InternalCypherParser.g:9052:2: ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            {
            // InternalCypherParser.g:9052:2: ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalCypherParser.g:9053:3: ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalCypherParser.g:9053:3: ( (lv_namespace_0_0= ruleNamespace ) )
            // InternalCypherParser.g:9054:4: (lv_namespace_0_0= ruleNamespace )
            {
            // InternalCypherParser.g:9054:4: (lv_namespace_0_0= ruleNamespace )
            // InternalCypherParser.g:9055:5: lv_namespace_0_0= ruleNamespace
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_namespace_0_0=ruleNamespace();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getProcedureNameRule());
              					}
              					set(
              						current,
              						"namespace",
              						lv_namespace_0_0,
              						"org.xtext.example.mydsl.Cypher.Namespace");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:9072:3: ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:9073:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:9073:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:9074:5: lv_name_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_name_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getProcedureNameRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProcedureName"


    // $ANTLR start "entryRuleNamespace"
    // InternalCypherParser.g:9095:1: entryRuleNamespace returns [String current=null] : iv_ruleNamespace= ruleNamespace EOF ;
    public final String entryRuleNamespace() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNamespace = null;


        try {
            // InternalCypherParser.g:9095:49: (iv_ruleNamespace= ruleNamespace EOF )
            // InternalCypherParser.g:9096:2: iv_ruleNamespace= ruleNamespace EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespace=ruleNamespace();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespace.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNamespace"


    // $ANTLR start "ruleNamespace"
    // InternalCypherParser.g:9102:1: ruleNamespace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )* ;
    public final AntlrDatatypeRuleToken ruleNamespace() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9108:2: ( (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )* )
            // InternalCypherParser.g:9109:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )*
            {
            // InternalCypherParser.g:9109:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )*
            loop133:
            do {
                int alt133=2;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // InternalCypherParser.g:9110:3: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop
            	    {
            	    if ( state.backtracking==0 ) {

            	      			newCompositeNode(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0());
            	      		
            	    }
            	    pushFollow(FOLLOW_114);
            	    this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_SYMBOLIC_NAME_X_0);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			afterParserOrEnumRuleCall();
            	      		
            	    }
            	    kw=(Token)match(input,FullStop,FOLLOW_7); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getNamespaceAccess().getFullStopKeyword_1());
            	      		
            	    }

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNamespace"


    // $ANTLR start "entryRuleListComprehension"
    // InternalCypherParser.g:9129:1: entryRuleListComprehension returns [EObject current=null] : iv_ruleListComprehension= ruleListComprehension EOF ;
    public final EObject entryRuleListComprehension() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleListComprehension = null;


        try {
            // InternalCypherParser.g:9129:58: (iv_ruleListComprehension= ruleListComprehension EOF )
            // InternalCypherParser.g:9130:2: iv_ruleListComprehension= ruleListComprehension EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleListComprehension=ruleListComprehension();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListComprehension; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListComprehension"


    // $ANTLR start "ruleListComprehension"
    // InternalCypherParser.g:9136:1: ruleListComprehension returns [EObject current=null] : (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket ) ;
    public final EObject ruleListComprehension() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_filterExpression_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9142:2: ( (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket ) )
            // InternalCypherParser.g:9143:2: (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket )
            {
            // InternalCypherParser.g:9143:2: (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket )
            // InternalCypherParser.g:9144:3: otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalCypherParser.g:9148:3: ( (lv_filterExpression_1_0= ruleFilterExpression ) )
            // InternalCypherParser.g:9149:4: (lv_filterExpression_1_0= ruleFilterExpression )
            {
            // InternalCypherParser.g:9149:4: (lv_filterExpression_1_0= ruleFilterExpression )
            // InternalCypherParser.g:9150:5: lv_filterExpression_1_0= ruleFilterExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_115);
            lv_filterExpression_1_0=ruleFilterExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getListComprehensionRule());
              					}
              					set(
              						current,
              						"filterExpression",
              						lv_filterExpression_1_0,
              						"org.xtext.example.mydsl.Cypher.FilterExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:9167:3: (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==VerticalLine) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // InternalCypherParser.g:9168:4: otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) )
                    {
                    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0());
                      			
                    }
                    // InternalCypherParser.g:9172:4: ( (lv_expression_3_0= ruleExpression ) )
                    // InternalCypherParser.g:9173:5: (lv_expression_3_0= ruleExpression )
                    {
                    // InternalCypherParser.g:9173:5: (lv_expression_3_0= ruleExpression )
                    // InternalCypherParser.g:9174:6: lv_expression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_34);
                    lv_expression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getListComprehensionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListComprehension"


    // $ANTLR start "entryRulePatternComprehension"
    // InternalCypherParser.g:9200:1: entryRulePatternComprehension returns [EObject current=null] : iv_rulePatternComprehension= rulePatternComprehension EOF ;
    public final EObject entryRulePatternComprehension() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternComprehension = null;


        try {
            // InternalCypherParser.g:9200:61: (iv_rulePatternComprehension= rulePatternComprehension EOF )
            // InternalCypherParser.g:9201:2: iv_rulePatternComprehension= rulePatternComprehension EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternComprehension=rulePatternComprehension();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternComprehension; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternComprehension"


    // $ANTLR start "rulePatternComprehension"
    // InternalCypherParser.g:9207:1: rulePatternComprehension returns [EObject current=null] : (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) ;
    public final EObject rulePatternComprehension() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_pathVariable_1_0 = null;

        EObject lv_pattern_3_0 = null;

        EObject lv_where_4_0 = null;

        EObject lv_expression_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9213:2: ( (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )
            // InternalCypherParser.g:9214:2: (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            {
            // InternalCypherParser.g:9214:2: (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            // InternalCypherParser.g:9215:3: otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalCypherParser.g:9219:3: ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( ((LA135_0>=ALLSHORTESTPATHS && LA135_0<=WHERE)||(LA135_0>=CASE && LA135_0<=XOR)||(LA135_0>=AS && LA135_0<=OR)||LA135_0==RULE_ID) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // InternalCypherParser.g:9220:4: ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign
                    {
                    // InternalCypherParser.g:9220:4: ( (lv_pathVariable_1_0= ruleVariableDeclaration ) )
                    // InternalCypherParser.g:9221:5: (lv_pathVariable_1_0= ruleVariableDeclaration )
                    {
                    // InternalCypherParser.g:9221:5: (lv_pathVariable_1_0= ruleVariableDeclaration )
                    // InternalCypherParser.g:9222:6: lv_pathVariable_1_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_pathVariable_1_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
                      						}
                      						set(
                      							current,
                      							"pathVariable",
                      							lv_pathVariable_1_0,
                      							"org.xtext.example.mydsl.Cypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalCypherParser.g:9244:3: ( (lv_pattern_3_0= ruleRelationshipsPattern ) )
            // InternalCypherParser.g:9245:4: (lv_pattern_3_0= ruleRelationshipsPattern )
            {
            // InternalCypherParser.g:9245:4: (lv_pattern_3_0= ruleRelationshipsPattern )
            // InternalCypherParser.g:9246:5: lv_pattern_3_0= ruleRelationshipsPattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_116);
            lv_pattern_3_0=ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_3_0,
              						"org.xtext.example.mydsl.Cypher.RelationshipsPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalCypherParser.g:9263:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==WHERE) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // InternalCypherParser.g:9264:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalCypherParser.g:9264:4: (lv_where_4_0= ruleWhere )
                    // InternalCypherParser.g:9265:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_54);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.xtext.example.mydsl.Cypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,VerticalLine,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4());
              		
            }
            // InternalCypherParser.g:9286:3: ( (lv_expression_6_0= ruleExpression ) )
            // InternalCypherParser.g:9287:4: (lv_expression_6_0= ruleExpression )
            {
            // InternalCypherParser.g:9287:4: (lv_expression_6_0= ruleExpression )
            // InternalCypherParser.g:9288:5: lv_expression_6_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_34);
            lv_expression_6_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_6_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternComprehension"


    // $ANTLR start "entryRulePropertyLookup"
    // InternalCypherParser.g:9313:1: entryRulePropertyLookup returns [EObject current=null] : iv_rulePropertyLookup= rulePropertyLookup EOF ;
    public final EObject entryRulePropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyLookup = null;


        try {
            // InternalCypherParser.g:9313:55: (iv_rulePropertyLookup= rulePropertyLookup EOF )
            // InternalCypherParser.g:9314:2: iv_rulePropertyLookup= rulePropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyLookup=rulePropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyLookup"


    // $ANTLR start "rulePropertyLookup"
    // InternalCypherParser.g:9320:1: rulePropertyLookup returns [EObject current=null] : (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) ) ;
    public final EObject rulePropertyLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_propertyOperator_2_1=null;
        Token lv_propertyOperator_2_2=null;
        AntlrDatatypeRuleToken lv_propertyKeyName_1_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9326:2: ( (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) ) )
            // InternalCypherParser.g:9327:2: (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) )
            {
            // InternalCypherParser.g:9327:2: (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) )
            // InternalCypherParser.g:9328:3: otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )
            {
            otherlv_0=(Token)match(input,FullStop,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0());
              		
            }
            // InternalCypherParser.g:9332:3: ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // InternalCypherParser.g:9333:4: ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) )
                    {
                    // InternalCypherParser.g:9333:4: ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) )
                    // InternalCypherParser.g:9334:5: ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) )
                    {
                    // InternalCypherParser.g:9334:5: ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) )
                    // InternalCypherParser.g:9335:6: (lv_propertyKeyName_1_0= rulePropertyKeyName )
                    {
                    // InternalCypherParser.g:9335:6: (lv_propertyKeyName_1_0= rulePropertyKeyName )
                    // InternalCypherParser.g:9336:7: lv_propertyKeyName_1_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_117);
                    lv_propertyKeyName_1_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyLookupRule());
                      							}
                      							set(
                      								current,
                      								"propertyKeyName",
                      								lv_propertyKeyName_1_0,
                      								"org.xtext.example.mydsl.Cypher.PropertyKeyName");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalCypherParser.g:9353:5: ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) )
                    // InternalCypherParser.g:9354:6: ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) )
                    {
                    // InternalCypherParser.g:9354:6: ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) )
                    // InternalCypherParser.g:9355:7: (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark )
                    {
                    // InternalCypherParser.g:9355:7: (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark )
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==QuestionMark) ) {
                        alt137=1;
                    }
                    else if ( (LA137_0==ExclamationMark) ) {
                        alt137=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);

                        throw nvae;
                    }
                    switch (alt137) {
                        case 1 :
                            // InternalCypherParser.g:9356:8: lv_propertyOperator_2_1= QuestionMark
                            {
                            lv_propertyOperator_2_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								newLeafNode(lv_propertyOperator_2_1, grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0());
                              							
                            }
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getPropertyLookupRule());
                              								}
                              								setWithLastConsumed(current, "propertyOperator", lv_propertyOperator_2_1, null);
                              							
                            }

                            }
                            break;
                        case 2 :
                            // InternalCypherParser.g:9367:8: lv_propertyOperator_2_2= ExclamationMark
                            {
                            lv_propertyOperator_2_2=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								newLeafNode(lv_propertyOperator_2_2, grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1());
                              							
                            }
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getPropertyLookupRule());
                              								}
                              								setWithLastConsumed(current, "propertyOperator", lv_propertyOperator_2_2, null);
                              							
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:9382:4: ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) )
                    {
                    // InternalCypherParser.g:9382:4: ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) )
                    // InternalCypherParser.g:9383:5: (lv_propertyKeyName_3_0= rulePropertyKeyName )
                    {
                    // InternalCypherParser.g:9383:5: (lv_propertyKeyName_3_0= rulePropertyKeyName )
                    // InternalCypherParser.g:9384:6: lv_propertyKeyName_3_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_propertyKeyName_3_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyLookupRule());
                      						}
                      						set(
                      							current,
                      							"propertyKeyName",
                      							lv_propertyKeyName_3_0,
                      							"org.xtext.example.mydsl.Cypher.PropertyKeyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyLookup"


    // $ANTLR start "entryRuleCaseExpression"
    // InternalCypherParser.g:9406:1: entryRuleCaseExpression returns [EObject current=null] : iv_ruleCaseExpression= ruleCaseExpression EOF ;
    public final EObject entryRuleCaseExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseExpression = null;


        try {
            // InternalCypherParser.g:9406:55: (iv_ruleCaseExpression= ruleCaseExpression EOF )
            // InternalCypherParser.g:9407:2: iv_ruleCaseExpression= ruleCaseExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseExpression=ruleCaseExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseExpression"


    // $ANTLR start "ruleCaseExpression"
    // InternalCypherParser.g:9413:1: ruleCaseExpression returns [EObject current=null] : ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END ) ;
    public final EObject ruleCaseExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_caseAlternatives_1_0 = null;

        EObject lv_caseExpression_3_0 = null;

        EObject lv_caseAlternatives_4_0 = null;

        EObject lv_elseExpression_6_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9419:2: ( ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END ) )
            // InternalCypherParser.g:9420:2: ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END )
            {
            // InternalCypherParser.g:9420:2: ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END )
            // InternalCypherParser.g:9421:3: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END
            {
            // InternalCypherParser.g:9421:3: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==CASE) ) {
                int LA141_1 = input.LA(2);

                if ( (synpred195_InternalCypherParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // InternalCypherParser.g:9422:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
                    {
                    // InternalCypherParser.g:9422:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
                    // InternalCypherParser.g:9423:5: otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
                    {
                    otherlv_0=(Token)match(input,CASE,FOLLOW_118); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0());
                      				
                    }
                    // InternalCypherParser.g:9427:5: ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==WHEN) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // InternalCypherParser.g:9428:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
                    	    {
                    	    // InternalCypherParser.g:9428:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
                    	    // InternalCypherParser.g:9429:7: lv_caseAlternatives_1_0= ruleCaseAlternatives
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_119);
                    	    lv_caseAlternatives_1_0=ruleCaseAlternatives();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"caseAlternatives",
                    	      								lv_caseAlternatives_1_0,
                    	      								"org.xtext.example.mydsl.Cypher.CaseAlternatives");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:9448:4: (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ )
                    {
                    // InternalCypherParser.g:9448:4: (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ )
                    // InternalCypherParser.g:9449:5: otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+
                    {
                    otherlv_2=(Token)match(input,CASE,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0());
                      				
                    }
                    // InternalCypherParser.g:9453:5: ( (lv_caseExpression_3_0= ruleExpression ) )
                    // InternalCypherParser.g:9454:6: (lv_caseExpression_3_0= ruleExpression )
                    {
                    // InternalCypherParser.g:9454:6: (lv_caseExpression_3_0= ruleExpression )
                    // InternalCypherParser.g:9455:7: lv_caseExpression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_118);
                    lv_caseExpression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                      							}
                      							set(
                      								current,
                      								"caseExpression",
                      								lv_caseExpression_3_0,
                      								"org.xtext.example.mydsl.Cypher.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalCypherParser.g:9472:5: ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+
                    int cnt140=0;
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==WHEN) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // InternalCypherParser.g:9473:6: (lv_caseAlternatives_4_0= ruleCaseAlternatives )
                    	    {
                    	    // InternalCypherParser.g:9473:6: (lv_caseAlternatives_4_0= ruleCaseAlternatives )
                    	    // InternalCypherParser.g:9474:7: lv_caseAlternatives_4_0= ruleCaseAlternatives
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_119);
                    	    lv_caseAlternatives_4_0=ruleCaseAlternatives();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"caseAlternatives",
                    	      								lv_caseAlternatives_4_0,
                    	      								"org.xtext.example.mydsl.Cypher.CaseAlternatives");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt140 >= 1 ) break loop140;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(140, input);
                                throw eee;
                        }
                        cnt140++;
                    } while (true);


                    }


                    }
                    break;

            }

            // InternalCypherParser.g:9493:3: (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ELSE) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // InternalCypherParser.g:9494:4: otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) )
                    {
                    otherlv_5=(Token)match(input,ELSE,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0());
                      			
                    }
                    // InternalCypherParser.g:9498:4: ( (lv_elseExpression_6_0= ruleExpression ) )
                    // InternalCypherParser.g:9499:5: (lv_elseExpression_6_0= ruleExpression )
                    {
                    // InternalCypherParser.g:9499:5: (lv_elseExpression_6_0= ruleExpression )
                    // InternalCypherParser.g:9500:6: lv_elseExpression_6_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_120);
                    lv_elseExpression_6_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                      						}
                      						set(
                      							current,
                      							"elseExpression",
                      							lv_elseExpression_6_0,
                      							"org.xtext.example.mydsl.Cypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getCaseExpressionAccess().getENDKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseExpression"


    // $ANTLR start "entryRuleCaseAlternatives"
    // InternalCypherParser.g:9526:1: entryRuleCaseAlternatives returns [EObject current=null] : iv_ruleCaseAlternatives= ruleCaseAlternatives EOF ;
    public final EObject entryRuleCaseAlternatives() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseAlternatives = null;


        try {
            // InternalCypherParser.g:9526:57: (iv_ruleCaseAlternatives= ruleCaseAlternatives EOF )
            // InternalCypherParser.g:9527:2: iv_ruleCaseAlternatives= ruleCaseAlternatives EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseAlternativesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseAlternatives=ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseAlternatives; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseAlternatives"


    // $ANTLR start "ruleCaseAlternatives"
    // InternalCypherParser.g:9533:1: ruleCaseAlternatives returns [EObject current=null] : (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) ) ;
    public final EObject ruleCaseAlternatives() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_when_1_0 = null;

        EObject lv_then_3_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9539:2: ( (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) ) )
            // InternalCypherParser.g:9540:2: (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) )
            {
            // InternalCypherParser.g:9540:2: (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) )
            // InternalCypherParser.g:9541:3: otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,WHEN,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0());
              		
            }
            // InternalCypherParser.g:9545:3: ( (lv_when_1_0= ruleExpression ) )
            // InternalCypherParser.g:9546:4: (lv_when_1_0= ruleExpression )
            {
            // InternalCypherParser.g:9546:4: (lv_when_1_0= ruleExpression )
            // InternalCypherParser.g:9547:5: lv_when_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_121);
            lv_when_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativesRule());
              					}
              					set(
              						current,
              						"when",
              						lv_when_1_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,THEN,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2());
              		
            }
            // InternalCypherParser.g:9568:3: ( (lv_then_3_0= ruleExpression ) )
            // InternalCypherParser.g:9569:4: (lv_then_3_0= ruleExpression )
            {
            // InternalCypherParser.g:9569:4: (lv_then_3_0= ruleExpression )
            // InternalCypherParser.g:9570:5: lv_then_3_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_then_3_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativesRule());
              					}
              					set(
              						current,
              						"then",
              						lv_then_3_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseAlternatives"


    // $ANTLR start "entryRuleVariableDeclaration"
    // InternalCypherParser.g:9591:1: entryRuleVariableDeclaration returns [EObject current=null] : iv_ruleVariableDeclaration= ruleVariableDeclaration EOF ;
    public final EObject entryRuleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDeclaration = null;


        try {
            // InternalCypherParser.g:9591:60: (iv_ruleVariableDeclaration= ruleVariableDeclaration EOF )
            // InternalCypherParser.g:9592:2: iv_ruleVariableDeclaration= ruleVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclaration=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableDeclaration"


    // $ANTLR start "ruleVariableDeclaration"
    // InternalCypherParser.g:9598:1: ruleVariableDeclaration returns [EObject current=null] : ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) ;
    public final EObject ruleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9604:2: ( ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) )
            // InternalCypherParser.g:9605:2: ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            {
            // InternalCypherParser.g:9605:2: ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalCypherParser.g:9606:3: () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalCypherParser.g:9606:3: ()
            // InternalCypherParser.g:9607:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:9616:3: ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalCypherParser.g:9617:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalCypherParser.g:9617:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:9618:5: lv_name_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_name_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableDeclaration"


    // $ANTLR start "entryRuleStringLiteral"
    // InternalCypherParser.g:9639:1: entryRuleStringLiteral returns [EObject current=null] : iv_ruleStringLiteral= ruleStringLiteral EOF ;
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringLiteral = null;


        try {
            // InternalCypherParser.g:9639:54: (iv_ruleStringLiteral= ruleStringLiteral EOF )
            // InternalCypherParser.g:9640:2: iv_ruleStringLiteral= ruleStringLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringLiteral"


    // $ANTLR start "ruleStringLiteral"
    // InternalCypherParser.g:9646:1: ruleStringLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_STRING_LITERAL ) ) ;
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalCypherParser.g:9652:2: ( ( (lv_value_0_0= RULE_STRING_LITERAL ) ) )
            // InternalCypherParser.g:9653:2: ( (lv_value_0_0= RULE_STRING_LITERAL ) )
            {
            // InternalCypherParser.g:9653:2: ( (lv_value_0_0= RULE_STRING_LITERAL ) )
            // InternalCypherParser.g:9654:3: (lv_value_0_0= RULE_STRING_LITERAL )
            {
            // InternalCypherParser.g:9654:3: (lv_value_0_0= RULE_STRING_LITERAL )
            // InternalCypherParser.g:9655:4: lv_value_0_0= RULE_STRING_LITERAL
            {
            lv_value_0_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtext.example.mydsl.Cypher.STRING_LITERAL");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringLiteral"


    // $ANTLR start "entryRuleNumberLiteral"
    // InternalCypherParser.g:9674:1: entryRuleNumberLiteral returns [EObject current=null] : iv_ruleNumberLiteral= ruleNumberLiteral EOF ;
    public final EObject entryRuleNumberLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNumberLiteral = null;


        try {
            // InternalCypherParser.g:9674:54: (iv_ruleNumberLiteral= ruleNumberLiteral EOF )
            // InternalCypherParser.g:9675:2: iv_ruleNumberLiteral= ruleNumberLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumberLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumberLiteral=ruleNumberLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumberLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNumberLiteral"


    // $ANTLR start "ruleNumberLiteral"
    // InternalCypherParser.g:9681:1: ruleNumberLiteral returns [EObject current=null] : ( (lv_value_0_0= ruleNumber ) ) ;
    public final EObject ruleNumberLiteral() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_0_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9687:2: ( ( (lv_value_0_0= ruleNumber ) ) )
            // InternalCypherParser.g:9688:2: ( (lv_value_0_0= ruleNumber ) )
            {
            // InternalCypherParser.g:9688:2: ( (lv_value_0_0= ruleNumber ) )
            // InternalCypherParser.g:9689:3: (lv_value_0_0= ruleNumber )
            {
            // InternalCypherParser.g:9689:3: (lv_value_0_0= ruleNumber )
            // InternalCypherParser.g:9690:4: lv_value_0_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_value_0_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
              				}
              				set(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtext.example.mydsl.Cypher.Number");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNumberLiteral"


    // $ANTLR start "entryRuleMapLiteral"
    // InternalCypherParser.g:9710:1: entryRuleMapLiteral returns [EObject current=null] : iv_ruleMapLiteral= ruleMapLiteral EOF ;
    public final EObject entryRuleMapLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMapLiteral = null;


        try {
            // InternalCypherParser.g:9710:51: (iv_ruleMapLiteral= ruleMapLiteral EOF )
            // InternalCypherParser.g:9711:2: iv_ruleMapLiteral= ruleMapLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMapLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMapLiteral=ruleMapLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMapLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMapLiteral"


    // $ANTLR start "ruleMapLiteral"
    // InternalCypherParser.g:9717:1: ruleMapLiteral returns [EObject current=null] : ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket ) ;
    public final EObject ruleMapLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_entries_2_0 = null;

        EObject lv_entries_4_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9723:2: ( ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket ) )
            // InternalCypherParser.g:9724:2: ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket )
            {
            // InternalCypherParser.g:9724:2: ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket )
            // InternalCypherParser.g:9725:3: () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket
            {
            // InternalCypherParser.g:9725:3: ()
            // InternalCypherParser.g:9726:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getMapLiteralAccess().getMapLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_122); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            // InternalCypherParser.g:9739:3: ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( ((LA144_0>=ALLSHORTESTPATHS && LA144_0<=WHERE)||(LA144_0>=CASE && LA144_0<=XOR)||(LA144_0>=AS && LA144_0<=OR)||LA144_0==RULE_ID) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // InternalCypherParser.g:9740:4: ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )*
                    {
                    // InternalCypherParser.g:9740:4: ( (lv_entries_2_0= ruleMapLiteralEntry ) )
                    // InternalCypherParser.g:9741:5: (lv_entries_2_0= ruleMapLiteralEntry )
                    {
                    // InternalCypherParser.g:9741:5: (lv_entries_2_0= ruleMapLiteralEntry )
                    // InternalCypherParser.g:9742:6: lv_entries_2_0= ruleMapLiteralEntry
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_123);
                    lv_entries_2_0=ruleMapLiteralEntry();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMapLiteralRule());
                      						}
                      						add(
                      							current,
                      							"entries",
                      							lv_entries_2_0,
                      							"org.xtext.example.mydsl.Cypher.MapLiteralEntry");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalCypherParser.g:9759:4: (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )*
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==Comma) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // InternalCypherParser.g:9760:5: otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalCypherParser.g:9764:5: ( (lv_entries_4_0= ruleMapLiteralEntry ) )
                    	    // InternalCypherParser.g:9765:6: (lv_entries_4_0= ruleMapLiteralEntry )
                    	    {
                    	    // InternalCypherParser.g:9765:6: (lv_entries_4_0= ruleMapLiteralEntry )
                    	    // InternalCypherParser.g:9766:7: lv_entries_4_0= ruleMapLiteralEntry
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_123);
                    	    lv_entries_4_0=ruleMapLiteralEntry();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getMapLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_4_0,
                    	      								"org.xtext.example.mydsl.Cypher.MapLiteralEntry");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop143;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMapLiteral"


    // $ANTLR start "entryRuleMapLiteralEntry"
    // InternalCypherParser.g:9793:1: entryRuleMapLiteralEntry returns [EObject current=null] : iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF ;
    public final EObject entryRuleMapLiteralEntry() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMapLiteralEntry = null;


        try {
            // InternalCypherParser.g:9793:56: (iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF )
            // InternalCypherParser.g:9794:2: iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMapLiteralEntryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMapLiteralEntry=ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMapLiteralEntry; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMapLiteralEntry"


    // $ANTLR start "ruleMapLiteralEntry"
    // InternalCypherParser.g:9800:1: ruleMapLiteralEntry returns [EObject current=null] : ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) ) ;
    public final EObject ruleMapLiteralEntry() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_key_0_0 = null;

        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9806:2: ( ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) ) )
            // InternalCypherParser.g:9807:2: ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) )
            {
            // InternalCypherParser.g:9807:2: ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) )
            // InternalCypherParser.g:9808:3: ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) )
            {
            // InternalCypherParser.g:9808:3: ( (lv_key_0_0= rulePropertyKeyName ) )
            // InternalCypherParser.g:9809:4: (lv_key_0_0= rulePropertyKeyName )
            {
            // InternalCypherParser.g:9809:4: (lv_key_0_0= rulePropertyKeyName )
            // InternalCypherParser.g:9810:5: lv_key_0_0= rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_key_0_0=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMapLiteralEntryRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.xtext.example.mydsl.Cypher.PropertyKeyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1());
              		
            }
            // InternalCypherParser.g:9831:3: ( (lv_value_2_0= ruleExpression ) )
            // InternalCypherParser.g:9832:4: (lv_value_2_0= ruleExpression )
            {
            // InternalCypherParser.g:9832:4: (lv_value_2_0= ruleExpression )
            // InternalCypherParser.g:9833:5: lv_value_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMapLiteralEntryRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.xtext.example.mydsl.Cypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMapLiteralEntry"


    // $ANTLR start "entryRuleLegacyParameter"
    // InternalCypherParser.g:9854:1: entryRuleLegacyParameter returns [EObject current=null] : iv_ruleLegacyParameter= ruleLegacyParameter EOF ;
    public final EObject entryRuleLegacyParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLegacyParameter = null;


        try {
            // InternalCypherParser.g:9854:56: (iv_ruleLegacyParameter= ruleLegacyParameter EOF )
            // InternalCypherParser.g:9855:2: iv_ruleLegacyParameter= ruleLegacyParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyParameter=ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLegacyParameter"


    // $ANTLR start "ruleLegacyParameter"
    // InternalCypherParser.g:9861:1: ruleLegacyParameter returns [EObject current=null] : (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket ) ;
    public final EObject ruleLegacyParameter() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_parameter_1_1 = null;

        AntlrDatatypeRuleToken lv_parameter_1_2 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9867:2: ( (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket ) )
            // InternalCypherParser.g:9868:2: (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket )
            {
            // InternalCypherParser.g:9868:2: (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket )
            // InternalCypherParser.g:9869:3: otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_124); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            // InternalCypherParser.g:9873:3: ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) )
            // InternalCypherParser.g:9874:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            {
            // InternalCypherParser.g:9874:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            // InternalCypherParser.g:9875:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            {
            // InternalCypherParser.g:9875:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=ALLSHORTESTPATHS && LA145_0<=WHERE)||(LA145_0>=CASE && LA145_0<=XOR)||(LA145_0>=AS && LA145_0<=OR)||LA145_0==RULE_ID) ) {
                alt145=1;
            }
            else if ( ((LA145_0>=RULE_HEX && LA145_0<=RULE_DECIMAL)) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // InternalCypherParser.g:9876:6: lv_parameter_1_1= ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_125);
                    lv_parameter_1_1=ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLegacyParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_1,
                      							"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:9892:6: lv_parameter_1_2= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_125);
                    lv_parameter_1_2=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLegacyParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_2,
                      							"org.xtext.example.mydsl.Cypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLegacyParameter"


    // $ANTLR start "entryRuleParameter"
    // InternalCypherParser.g:9918:1: entryRuleParameter returns [EObject current=null] : iv_ruleParameter= ruleParameter EOF ;
    public final EObject entryRuleParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameter = null;


        try {
            // InternalCypherParser.g:9918:50: (iv_ruleParameter= ruleParameter EOF )
            // InternalCypherParser.g:9919:2: iv_ruleParameter= ruleParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameter=ruleParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameter"


    // $ANTLR start "ruleParameter"
    // InternalCypherParser.g:9925:1: ruleParameter returns [EObject current=null] : (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) ) ;
    public final EObject ruleParameter() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        AntlrDatatypeRuleToken lv_parameter_1_1 = null;

        AntlrDatatypeRuleToken lv_parameter_1_2 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9931:2: ( (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) ) )
            // InternalCypherParser.g:9932:2: (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) )
            {
            // InternalCypherParser.g:9932:2: (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) )
            // InternalCypherParser.g:9933:3: otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) )
            {
            otherlv_0=(Token)match(input,DollarSign,FOLLOW_124); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getDollarSignKeyword_0());
              		
            }
            // InternalCypherParser.g:9937:3: ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) )
            // InternalCypherParser.g:9938:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            {
            // InternalCypherParser.g:9938:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            // InternalCypherParser.g:9939:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            {
            // InternalCypherParser.g:9939:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ALLSHORTESTPATHS && LA146_0<=WHERE)||(LA146_0>=CASE && LA146_0<=XOR)||(LA146_0>=AS && LA146_0<=OR)||LA146_0==RULE_ID) ) {
                alt146=1;
            }
            else if ( ((LA146_0>=RULE_HEX && LA146_0<=RULE_DECIMAL)) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // InternalCypherParser.g:9940:6: lv_parameter_1_1= ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_parameter_1_1=ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_1,
                      							"org.xtext.example.mydsl.Cypher.SYMBOLIC_NAME_X");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:9956:6: lv_parameter_1_2= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_parameter_1_2=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_2,
                      							"org.xtext.example.mydsl.Cypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameter"


    // $ANTLR start "entryRulePropertyExpression"
    // InternalCypherParser.g:9978:1: entryRulePropertyExpression returns [EObject current=null] : iv_rulePropertyExpression= rulePropertyExpression EOF ;
    public final EObject entryRulePropertyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyExpression = null;


        try {
            // InternalCypherParser.g:9978:59: (iv_rulePropertyExpression= rulePropertyExpression EOF )
            // InternalCypherParser.g:9979:2: iv_rulePropertyExpression= rulePropertyExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyExpression=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyExpression"


    // $ANTLR start "rulePropertyExpression"
    // InternalCypherParser.g:9985:1: rulePropertyExpression returns [EObject current=null] : (this_Atom_0= ruleAtom ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ ) ;
    public final EObject rulePropertyExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Atom_0 = null;

        EObject lv_propertyLookups_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:9991:2: ( (this_Atom_0= ruleAtom ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ ) )
            // InternalCypherParser.g:9992:2: (this_Atom_0= ruleAtom ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ )
            {
            // InternalCypherParser.g:9992:2: (this_Atom_0= ruleAtom ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ )
            // InternalCypherParser.g:9993:3: this_Atom_0= ruleAtom ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPropertyExpressionAccess().getAtomParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_114);
            this_Atom_0=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Atom_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalCypherParser.g:10004:3: ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+
            int cnt147=0;
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==FullStop) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // InternalCypherParser.g:10005:4: (lv_propertyLookups_1_0= rulePropertyLookup )
            	    {
            	    // InternalCypherParser.g:10005:4: (lv_propertyLookups_1_0= rulePropertyLookup )
            	    // InternalCypherParser.g:10006:5: lv_propertyLookups_1_0= rulePropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_propertyLookups_1_0=rulePropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyExpressionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"propertyLookups",
            	      						lv_propertyLookups_1_0,
            	      						"org.xtext.example.mydsl.Cypher.PropertyLookup");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyExpression"


    // $ANTLR start "entryRulePropertyKeyName"
    // InternalCypherParser.g:10027:1: entryRulePropertyKeyName returns [String current=null] : iv_rulePropertyKeyName= rulePropertyKeyName EOF ;
    public final String entryRulePropertyKeyName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePropertyKeyName = null;


        try {
            // InternalCypherParser.g:10027:55: (iv_rulePropertyKeyName= rulePropertyKeyName EOF )
            // InternalCypherParser.g:10028:2: iv_rulePropertyKeyName= rulePropertyKeyName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyKeyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyKeyName=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyKeyName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyKeyName"


    // $ANTLR start "rulePropertyKeyName"
    // InternalCypherParser.g:10034:1: rulePropertyKeyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken rulePropertyKeyName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:10040:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalCypherParser.g:10041:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyKeyName"


    // $ANTLR start "entryRuleLeftArrowHead"
    // InternalCypherParser.g:10054:1: entryRuleLeftArrowHead returns [String current=null] : iv_ruleLeftArrowHead= ruleLeftArrowHead EOF ;
    public final String entryRuleLeftArrowHead() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLeftArrowHead = null;


        try {
            // InternalCypherParser.g:10054:53: (iv_ruleLeftArrowHead= ruleLeftArrowHead EOF )
            // InternalCypherParser.g:10055:2: iv_ruleLeftArrowHead= ruleLeftArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftArrowHead=ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftArrowHead.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLeftArrowHead"


    // $ANTLR start "ruleLeftArrowHead"
    // InternalCypherParser.g:10061:1: ruleLeftArrowHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= LessThanSign ;
    public final AntlrDatatypeRuleToken ruleLeftArrowHead() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalCypherParser.g:10067:2: (kw= LessThanSign )
            // InternalCypherParser.g:10068:2: kw= LessThanSign
            {
            kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLeftArrowHead"


    // $ANTLR start "entryRuleRightArrowHead"
    // InternalCypherParser.g:10076:1: entryRuleRightArrowHead returns [String current=null] : iv_ruleRightArrowHead= ruleRightArrowHead EOF ;
    public final String entryRuleRightArrowHead() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRightArrowHead = null;


        try {
            // InternalCypherParser.g:10076:54: (iv_ruleRightArrowHead= ruleRightArrowHead EOF )
            // InternalCypherParser.g:10077:2: iv_ruleRightArrowHead= ruleRightArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRightArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRightArrowHead=ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRightArrowHead.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRightArrowHead"


    // $ANTLR start "ruleRightArrowHead"
    // InternalCypherParser.g:10083:1: ruleRightArrowHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= GreaterThanSign ;
    public final AntlrDatatypeRuleToken ruleRightArrowHead() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalCypherParser.g:10089:2: (kw= GreaterThanSign )
            // InternalCypherParser.g:10090:2: kw= GreaterThanSign
            {
            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRightArrowHead"


    // $ANTLR start "entryRuleDash"
    // InternalCypherParser.g:10098:1: entryRuleDash returns [String current=null] : iv_ruleDash= ruleDash EOF ;
    public final String entryRuleDash() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDash = null;


        try {
            // InternalCypherParser.g:10098:44: (iv_ruleDash= ruleDash EOF )
            // InternalCypherParser.g:10099:2: iv_ruleDash= ruleDash EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDashRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDash=ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDash.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDash"


    // $ANTLR start "ruleDash"
    // InternalCypherParser.g:10105:1: ruleDash returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= HyphenMinus ;
    public final AntlrDatatypeRuleToken ruleDash() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalCypherParser.g:10111:2: (kw= HyphenMinus )
            // InternalCypherParser.g:10112:2: kw= HyphenMinus
            {
            kw=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getDashAccess().getHyphenMinusKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDash"


    // $ANTLR start "entryRuleDecimalInteger"
    // InternalCypherParser.g:10120:1: entryRuleDecimalInteger returns [EObject current=null] : iv_ruleDecimalInteger= ruleDecimalInteger EOF ;
    public final EObject entryRuleDecimalInteger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDecimalInteger = null;


        try {
            // InternalCypherParser.g:10120:55: (iv_ruleDecimalInteger= ruleDecimalInteger EOF )
            // InternalCypherParser.g:10121:2: iv_ruleDecimalInteger= ruleDecimalInteger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDecimalIntegerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDecimalInteger=ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDecimalInteger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDecimalInteger"


    // $ANTLR start "ruleDecimalInteger"
    // InternalCypherParser.g:10127:1: ruleDecimalInteger returns [EObject current=null] : ( () ( (lv_value_1_0= ruleNumber ) ) ) ;
    public final EObject ruleDecimalInteger() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalCypherParser.g:10133:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) )
            // InternalCypherParser.g:10134:2: ( () ( (lv_value_1_0= ruleNumber ) ) )
            {
            // InternalCypherParser.g:10134:2: ( () ( (lv_value_1_0= ruleNumber ) ) )
            // InternalCypherParser.g:10135:3: () ( (lv_value_1_0= ruleNumber ) )
            {
            // InternalCypherParser.g:10135:3: ()
            // InternalCypherParser.g:10136:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0(),
              					current);
              			
            }

            }

            // InternalCypherParser.g:10145:3: ( (lv_value_1_0= ruleNumber ) )
            // InternalCypherParser.g:10146:4: (lv_value_1_0= ruleNumber )
            {
            // InternalCypherParser.g:10146:4: (lv_value_1_0= ruleNumber )
            // InternalCypherParser.g:10147:5: lv_value_1_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDecimalIntegerRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xtext.example.mydsl.Cypher.Number");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDecimalInteger"


    // $ANTLR start "entryRuleNumber"
    // InternalCypherParser.g:10168:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalCypherParser.g:10170:2: (iv_ruleNumber= ruleNumber EOF )
            // InternalCypherParser.g:10171:2: iv_ruleNumber= ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumber=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumber.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalCypherParser.g:10180:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_HEX_0=null;
        Token this_INT_1=null;
        Token this_DECIMAL_2=null;
        Token kw=null;
        Token this_INT_4=null;
        Token this_DECIMAL_5=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalCypherParser.g:10187:2: ( (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) )
            // InternalCypherParser.g:10188:2: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            {
            // InternalCypherParser.g:10188:2: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==RULE_HEX) ) {
                alt151=1;
            }
            else if ( ((LA151_0>=RULE_INT && LA151_0<=RULE_DECIMAL)) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // InternalCypherParser.g:10189:3: this_HEX_0= RULE_HEX
                    {
                    this_HEX_0=(Token)match(input,RULE_HEX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_HEX_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:10197:3: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    {
                    // InternalCypherParser.g:10197:3: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    // InternalCypherParser.g:10198:4: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    {
                    // InternalCypherParser.g:10198:4: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL )
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==RULE_INT) ) {
                        alt148=1;
                    }
                    else if ( (LA148_0==RULE_DECIMAL) ) {
                        alt148=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 0, input);

                        throw nvae;
                    }
                    switch (alt148) {
                        case 1 :
                            // InternalCypherParser.g:10199:5: this_INT_1= RULE_INT
                            {
                            this_INT_1=(Token)match(input,RULE_INT,FOLLOW_126); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_INT_1);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalCypherParser.g:10207:5: this_DECIMAL_2= RULE_DECIMAL
                            {
                            this_DECIMAL_2=(Token)match(input,RULE_DECIMAL,FOLLOW_126); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_DECIMAL_2);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalCypherParser.g:10215:4: (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==FullStop) ) {
                        int LA150_1 = input.LA(2);

                        if ( ((LA150_1>=RULE_INT && LA150_1<=RULE_DECIMAL)) ) {
                            alt150=1;
                        }
                    }
                    switch (alt150) {
                        case 1 :
                            // InternalCypherParser.g:10216:5: kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            {
                            kw=(Token)match(input,FullStop,FOLLOW_127); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0());
                              				
                            }
                            // InternalCypherParser.g:10221:5: (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            int alt149=2;
                            int LA149_0 = input.LA(1);

                            if ( (LA149_0==RULE_INT) ) {
                                alt149=1;
                            }
                            else if ( (LA149_0==RULE_DECIMAL) ) {
                                alt149=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 149, 0, input);

                                throw nvae;
                            }
                            switch (alt149) {
                                case 1 :
                                    // InternalCypherParser.g:10222:6: this_INT_4= RULE_INT
                                    {
                                    this_INT_4=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current.merge(this_INT_4);
                                      					
                                    }
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0());
                                      					
                                    }

                                    }
                                    break;
                                case 2 :
                                    // InternalCypherParser.g:10230:6: this_DECIMAL_5= RULE_DECIMAL
                                    {
                                    this_DECIMAL_5=(Token)match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current.merge(this_DECIMAL_5);
                                      					
                                    }
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1());
                                      					
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleSYMBOLIC_NAME_X"
    // InternalCypherParser.g:10247:1: entryRuleSYMBOLIC_NAME_X returns [String current=null] : iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF ;
    public final String entryRuleSYMBOLIC_NAME_X() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSYMBOLIC_NAME_X = null;


        try {
            // InternalCypherParser.g:10247:55: (iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF )
            // InternalCypherParser.g:10248:2: iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSYMBOLIC_NAME_X=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSYMBOLIC_NAME_X.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSYMBOLIC_NAME_X"


    // $ANTLR start "ruleSYMBOLIC_NAME_X"
    // InternalCypherParser.g:10254:1: ruleSYMBOLIC_NAME_X returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN ) ;
    public final AntlrDatatypeRuleToken ruleSYMBOLIC_NAME_X() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalCypherParser.g:10260:2: ( (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN ) )
            // InternalCypherParser.g:10261:2: (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN )
            {
            // InternalCypherParser.g:10261:2: (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN )
            int alt152=76;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt152=1;
                }
                break;
            case CYPHER:
                {
                alt152=2;
                }
                break;
            case EXPLAIN:
                {
                alt152=3;
                }
                break;
            case PROFILE:
                {
                alt152=4;
                }
                break;
            case USING:
                {
                alt152=5;
                }
                break;
            case PERIODIC:
                {
                alt152=6;
                }
                break;
            case COMMIT:
                {
                alt152=7;
                }
                break;
            case UNION:
                {
                alt152=8;
                }
                break;
            case ALL:
                {
                alt152=9;
                }
                break;
            case CREATE:
                {
                alt152=10;
                }
                break;
            case INDEX:
                {
                alt152=11;
                }
                break;
            case ON:
                {
                alt152=12;
                }
                break;
            case DROP:
                {
                alt152=13;
                }
                break;
            case CONSTRAINT:
                {
                alt152=14;
                }
                break;
            case ASSERT:
                {
                alt152=15;
                }
                break;
            case IS:
                {
                alt152=16;
                }
                break;
            case UNIQUE:
                {
                alt152=17;
                }
                break;
            case EXISTS:
                {
                alt152=18;
                }
                break;
            case LOAD:
                {
                alt152=19;
                }
                break;
            case CSV:
                {
                alt152=20;
                }
                break;
            case WITH:
                {
                alt152=21;
                }
                break;
            case HEADERS:
                {
                alt152=22;
                }
                break;
            case FROM:
                {
                alt152=23;
                }
                break;
            case AS:
                {
                alt152=24;
                }
                break;
            case FIELDTERMINATOR:
                {
                alt152=25;
                }
                break;
            case OPTIONAL:
                {
                alt152=26;
                }
                break;
            case MATCH:
                {
                alt152=27;
                }
                break;
            case UNWIND:
                {
                alt152=28;
                }
                break;
            case MERGE:
                {
                alt152=29;
                }
                break;
            case SET:
                {
                alt152=30;
                }
                break;
            case DELETE:
                {
                alt152=31;
                }
                break;
            case DETACH:
                {
                alt152=32;
                }
                break;
            case REMOVE:
                {
                alt152=33;
                }
                break;
            case FOREACH:
                {
                alt152=34;
                }
                break;
            case IN:
                {
                alt152=35;
                }
                break;
            case DISTINCT:
                {
                alt152=36;
                }
                break;
            case RETURN:
                {
                alt152=37;
                }
                break;
            case ORDER:
                {
                alt152=38;
                }
                break;
            case BY:
                {
                alt152=39;
                }
                break;
            case SKIP:
                {
                alt152=40;
                }
                break;
            case LIMIT:
                {
                alt152=41;
                }
                break;
            case DESCENDING:
                {
                alt152=42;
                }
                break;
            case DESC:
                {
                alt152=43;
                }
                break;
            case ASCENDING:
                {
                alt152=44;
                }
                break;
            case ASC:
                {
                alt152=45;
                }
                break;
            case JOIN:
                {
                alt152=46;
                }
                break;
            case SCAN:
                {
                alt152=47;
                }
                break;
            case START:
                {
                alt152=48;
                }
                break;
            case NODE:
                {
                alt152=49;
                }
                break;
            case RELATIONSHIP:
                {
                alt152=50;
                }
                break;
            case REL:
                {
                alt152=51;
                }
                break;
            case WHERE:
                {
                alt152=52;
                }
                break;
            case SHORTESTPATH:
                {
                alt152=53;
                }
                break;
            case ALLSHORTESTPATHS:
                {
                alt152=54;
                }
                break;
            case OR:
                {
                alt152=55;
                }
                break;
            case XOR:
                {
                alt152=56;
                }
                break;
            case AND:
                {
                alt152=57;
                }
                break;
            case NOT:
                {
                alt152=58;
                }
                break;
            case STARTS:
                {
                alt152=59;
                }
                break;
            case ENDS:
                {
                alt152=60;
                }
                break;
            case CONTAINS:
                {
                alt152=61;
                }
                break;
            case NULL:
                {
                alt152=62;
                }
                break;
            case TRUE:
                {
                alt152=63;
                }
                break;
            case FALSE:
                {
                alt152=64;
                }
                break;
            case COUNT:
                {
                alt152=65;
                }
                break;
            case FILTER:
                {
                alt152=66;
                }
                break;
            case EXTRACT:
                {
                alt152=67;
                }
                break;
            case ANY:
                {
                alt152=68;
                }
                break;
            case NONE:
                {
                alt152=69;
                }
                break;
            case SINGLE:
                {
                alt152=70;
                }
                break;
            case REDUCE:
                {
                alt152=71;
                }
                break;
            case CASE:
                {
                alt152=72;
                }
                break;
            case ELSE:
                {
                alt152=73;
                }
                break;
            case END:
                {
                alt152=74;
                }
                break;
            case WHEN:
                {
                alt152=75;
                }
                break;
            case THEN:
                {
                alt152=76;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // InternalCypherParser.g:10262:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalCypherParser.g:10270:3: kw= CYPHER
                    {
                    kw=(Token)match(input,CYPHER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalCypherParser.g:10276:3: kw= EXPLAIN
                    {
                    kw=(Token)match(input,EXPLAIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalCypherParser.g:10282:3: kw= PROFILE
                    {
                    kw=(Token)match(input,PROFILE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalCypherParser.g:10288:3: kw= USING
                    {
                    kw=(Token)match(input,USING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalCypherParser.g:10294:3: kw= PERIODIC
                    {
                    kw=(Token)match(input,PERIODIC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalCypherParser.g:10300:3: kw= COMMIT
                    {
                    kw=(Token)match(input,COMMIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalCypherParser.g:10306:3: kw= UNION
                    {
                    kw=(Token)match(input,UNION,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalCypherParser.g:10312:3: kw= ALL
                    {
                    kw=(Token)match(input,ALL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalCypherParser.g:10318:3: kw= CREATE
                    {
                    kw=(Token)match(input,CREATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalCypherParser.g:10324:3: kw= INDEX
                    {
                    kw=(Token)match(input,INDEX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalCypherParser.g:10330:3: kw= ON
                    {
                    kw=(Token)match(input,ON,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalCypherParser.g:10336:3: kw= DROP
                    {
                    kw=(Token)match(input,DROP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalCypherParser.g:10342:3: kw= CONSTRAINT
                    {
                    kw=(Token)match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalCypherParser.g:10348:3: kw= ASSERT
                    {
                    kw=(Token)match(input,ASSERT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalCypherParser.g:10354:3: kw= IS
                    {
                    kw=(Token)match(input,IS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalCypherParser.g:10360:3: kw= UNIQUE
                    {
                    kw=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalCypherParser.g:10366:3: kw= EXISTS
                    {
                    kw=(Token)match(input,EXISTS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalCypherParser.g:10372:3: kw= LOAD
                    {
                    kw=(Token)match(input,LOAD,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalCypherParser.g:10378:3: kw= CSV
                    {
                    kw=(Token)match(input,CSV,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalCypherParser.g:10384:3: kw= WITH
                    {
                    kw=(Token)match(input,WITH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalCypherParser.g:10390:3: kw= HEADERS
                    {
                    kw=(Token)match(input,HEADERS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalCypherParser.g:10396:3: kw= FROM
                    {
                    kw=(Token)match(input,FROM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalCypherParser.g:10402:3: kw= AS
                    {
                    kw=(Token)match(input,AS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalCypherParser.g:10408:3: kw= FIELDTERMINATOR
                    {
                    kw=(Token)match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    // InternalCypherParser.g:10414:3: kw= OPTIONAL
                    {
                    kw=(Token)match(input,OPTIONAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    // InternalCypherParser.g:10420:3: kw= MATCH
                    {
                    kw=(Token)match(input,MATCH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    // InternalCypherParser.g:10426:3: kw= UNWIND
                    {
                    kw=(Token)match(input,UNWIND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    // InternalCypherParser.g:10432:3: kw= MERGE
                    {
                    kw=(Token)match(input,MERGE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    // InternalCypherParser.g:10438:3: kw= SET
                    {
                    kw=(Token)match(input,SET,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    // InternalCypherParser.g:10444:3: kw= DELETE
                    {
                    kw=(Token)match(input,DELETE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    // InternalCypherParser.g:10450:3: kw= DETACH
                    {
                    kw=(Token)match(input,DETACH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    // InternalCypherParser.g:10456:3: kw= REMOVE
                    {
                    kw=(Token)match(input,REMOVE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    // InternalCypherParser.g:10462:3: kw= FOREACH
                    {
                    kw=(Token)match(input,FOREACH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    // InternalCypherParser.g:10468:3: kw= IN
                    {
                    kw=(Token)match(input,IN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    // InternalCypherParser.g:10474:3: kw= DISTINCT
                    {
                    kw=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    // InternalCypherParser.g:10480:3: kw= RETURN
                    {
                    kw=(Token)match(input,RETURN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36());
                      		
                    }

                    }
                    break;
                case 38 :
                    // InternalCypherParser.g:10486:3: kw= ORDER
                    {
                    kw=(Token)match(input,ORDER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37());
                      		
                    }

                    }
                    break;
                case 39 :
                    // InternalCypherParser.g:10492:3: kw= BY
                    {
                    kw=(Token)match(input,BY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38());
                      		
                    }

                    }
                    break;
                case 40 :
                    // InternalCypherParser.g:10498:3: kw= SKIP
                    {
                    kw=(Token)match(input,SKIP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39());
                      		
                    }

                    }
                    break;
                case 41 :
                    // InternalCypherParser.g:10504:3: kw= LIMIT
                    {
                    kw=(Token)match(input,LIMIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40());
                      		
                    }

                    }
                    break;
                case 42 :
                    // InternalCypherParser.g:10510:3: kw= DESCENDING
                    {
                    kw=(Token)match(input,DESCENDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41());
                      		
                    }

                    }
                    break;
                case 43 :
                    // InternalCypherParser.g:10516:3: kw= DESC
                    {
                    kw=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42());
                      		
                    }

                    }
                    break;
                case 44 :
                    // InternalCypherParser.g:10522:3: kw= ASCENDING
                    {
                    kw=(Token)match(input,ASCENDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43());
                      		
                    }

                    }
                    break;
                case 45 :
                    // InternalCypherParser.g:10528:3: kw= ASC
                    {
                    kw=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44());
                      		
                    }

                    }
                    break;
                case 46 :
                    // InternalCypherParser.g:10534:3: kw= JOIN
                    {
                    kw=(Token)match(input,JOIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45());
                      		
                    }

                    }
                    break;
                case 47 :
                    // InternalCypherParser.g:10540:3: kw= SCAN
                    {
                    kw=(Token)match(input,SCAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46());
                      		
                    }

                    }
                    break;
                case 48 :
                    // InternalCypherParser.g:10546:3: kw= START
                    {
                    kw=(Token)match(input,START,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47());
                      		
                    }

                    }
                    break;
                case 49 :
                    // InternalCypherParser.g:10552:3: kw= NODE
                    {
                    kw=(Token)match(input,NODE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48());
                      		
                    }

                    }
                    break;
                case 50 :
                    // InternalCypherParser.g:10558:3: kw= RELATIONSHIP
                    {
                    kw=(Token)match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49());
                      		
                    }

                    }
                    break;
                case 51 :
                    // InternalCypherParser.g:10564:3: kw= REL
                    {
                    kw=(Token)match(input,REL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50());
                      		
                    }

                    }
                    break;
                case 52 :
                    // InternalCypherParser.g:10570:3: kw= WHERE
                    {
                    kw=(Token)match(input,WHERE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51());
                      		
                    }

                    }
                    break;
                case 53 :
                    // InternalCypherParser.g:10576:3: kw= SHORTESTPATH
                    {
                    kw=(Token)match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52());
                      		
                    }

                    }
                    break;
                case 54 :
                    // InternalCypherParser.g:10582:3: kw= ALLSHORTESTPATHS
                    {
                    kw=(Token)match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53());
                      		
                    }

                    }
                    break;
                case 55 :
                    // InternalCypherParser.g:10588:3: kw= OR
                    {
                    kw=(Token)match(input,OR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54());
                      		
                    }

                    }
                    break;
                case 56 :
                    // InternalCypherParser.g:10594:3: kw= XOR
                    {
                    kw=(Token)match(input,XOR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55());
                      		
                    }

                    }
                    break;
                case 57 :
                    // InternalCypherParser.g:10600:3: kw= AND
                    {
                    kw=(Token)match(input,AND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56());
                      		
                    }

                    }
                    break;
                case 58 :
                    // InternalCypherParser.g:10606:3: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57());
                      		
                    }

                    }
                    break;
                case 59 :
                    // InternalCypherParser.g:10612:3: kw= STARTS
                    {
                    kw=(Token)match(input,STARTS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58());
                      		
                    }

                    }
                    break;
                case 60 :
                    // InternalCypherParser.g:10618:3: kw= ENDS
                    {
                    kw=(Token)match(input,ENDS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59());
                      		
                    }

                    }
                    break;
                case 61 :
                    // InternalCypherParser.g:10624:3: kw= CONTAINS
                    {
                    kw=(Token)match(input,CONTAINS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60());
                      		
                    }

                    }
                    break;
                case 62 :
                    // InternalCypherParser.g:10630:3: kw= NULL
                    {
                    kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61());
                      		
                    }

                    }
                    break;
                case 63 :
                    // InternalCypherParser.g:10636:3: kw= TRUE
                    {
                    kw=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62());
                      		
                    }

                    }
                    break;
                case 64 :
                    // InternalCypherParser.g:10642:3: kw= FALSE
                    {
                    kw=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63());
                      		
                    }

                    }
                    break;
                case 65 :
                    // InternalCypherParser.g:10648:3: kw= COUNT
                    {
                    kw=(Token)match(input,COUNT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64());
                      		
                    }

                    }
                    break;
                case 66 :
                    // InternalCypherParser.g:10654:3: kw= FILTER
                    {
                    kw=(Token)match(input,FILTER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65());
                      		
                    }

                    }
                    break;
                case 67 :
                    // InternalCypherParser.g:10660:3: kw= EXTRACT
                    {
                    kw=(Token)match(input,EXTRACT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66());
                      		
                    }

                    }
                    break;
                case 68 :
                    // InternalCypherParser.g:10666:3: kw= ANY
                    {
                    kw=(Token)match(input,ANY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67());
                      		
                    }

                    }
                    break;
                case 69 :
                    // InternalCypherParser.g:10672:3: kw= NONE
                    {
                    kw=(Token)match(input,NONE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68());
                      		
                    }

                    }
                    break;
                case 70 :
                    // InternalCypherParser.g:10678:3: kw= SINGLE
                    {
                    kw=(Token)match(input,SINGLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69());
                      		
                    }

                    }
                    break;
                case 71 :
                    // InternalCypherParser.g:10684:3: kw= REDUCE
                    {
                    kw=(Token)match(input,REDUCE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70());
                      		
                    }

                    }
                    break;
                case 72 :
                    // InternalCypherParser.g:10690:3: kw= CASE
                    {
                    kw=(Token)match(input,CASE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71());
                      		
                    }

                    }
                    break;
                case 73 :
                    // InternalCypherParser.g:10696:3: kw= ELSE
                    {
                    kw=(Token)match(input,ELSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72());
                      		
                    }

                    }
                    break;
                case 74 :
                    // InternalCypherParser.g:10702:3: kw= END
                    {
                    kw=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73());
                      		
                    }

                    }
                    break;
                case 75 :
                    // InternalCypherParser.g:10708:3: kw= WHEN
                    {
                    kw=(Token)match(input,WHEN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74());
                      		
                    }

                    }
                    break;
                case 76 :
                    // InternalCypherParser.g:10714:3: kw= THEN
                    {
                    kw=(Token)match(input,THEN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSYMBOLIC_NAME_X"

    // $ANTLR start synpred3_InternalCypherParser
    public final void synpred3_InternalCypherParser_fragment() throws RecognitionException {   
        Token lv_explain_2_0=null;

        // InternalCypherParser.g:181:4: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) )
        // InternalCypherParser.g:181:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
        {
        // InternalCypherParser.g:181:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
        // InternalCypherParser.g:182:5: {...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_InternalCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalCypherParser.g:182:109: ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
        // InternalCypherParser.g:183:6: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
        // InternalCypherParser.g:186:9: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
        // InternalCypherParser.g:186:10: {...}? => ( (lv_explain_2_0= EXPLAIN ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_InternalCypherParser", "true");
        }
        // InternalCypherParser.g:186:19: ( (lv_explain_2_0= EXPLAIN ) )
        // InternalCypherParser.g:186:20: (lv_explain_2_0= EXPLAIN )
        {
        // InternalCypherParser.g:186:20: (lv_explain_2_0= EXPLAIN )
        // InternalCypherParser.g:187:10: lv_explain_2_0= EXPLAIN
        {
        lv_explain_2_0=(Token)match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred3_InternalCypherParser

    // $ANTLR start synpred4_InternalCypherParser
    public final void synpred4_InternalCypherParser_fragment() throws RecognitionException {   
        Token lv_profile_3_0=null;

        // InternalCypherParser.g:204:4: ( ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) )
        // InternalCypherParser.g:204:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
        {
        // InternalCypherParser.g:204:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
        // InternalCypherParser.g:205:5: {...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred4_InternalCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalCypherParser.g:205:109: ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
        // InternalCypherParser.g:206:6: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
        // InternalCypherParser.g:209:9: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
        // InternalCypherParser.g:209:10: {...}? => ( (lv_profile_3_0= PROFILE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred4_InternalCypherParser", "true");
        }
        // InternalCypherParser.g:209:19: ( (lv_profile_3_0= PROFILE ) )
        // InternalCypherParser.g:209:20: (lv_profile_3_0= PROFILE )
        {
        // InternalCypherParser.g:209:20: (lv_profile_3_0= PROFILE )
        // InternalCypherParser.g:210:10: lv_profile_3_0= PROFILE
        {
        lv_profile_3_0=(Token)match(input,PROFILE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred4_InternalCypherParser

    // $ANTLR start synpred5_InternalCypherParser
    public final void synpred5_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_cypherOption_4_0 = null;


        // InternalCypherParser.g:232:10: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )
        // InternalCypherParser.g:232:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred5_InternalCypherParser", "true");
        }
        // InternalCypherParser.g:232:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
        // InternalCypherParser.g:232:20: (lv_cypherOption_4_0= ruleCypherOption )
        {
        // InternalCypherParser.g:232:20: (lv_cypherOption_4_0= ruleCypherOption )
        // InternalCypherParser.g:233:10: lv_cypherOption_4_0= ruleCypherOption
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_cypherOption_4_0=ruleCypherOption();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred5_InternalCypherParser

    // $ANTLR start synpred6_InternalCypherParser
    public final void synpred6_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_cypherOption_4_0 = null;


        // InternalCypherParser.g:227:4: ( ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )
        // InternalCypherParser.g:227:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
        {
        // InternalCypherParser.g:227:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
        // InternalCypherParser.g:228:5: {...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred6_InternalCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
        }
        // InternalCypherParser.g:228:109: ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
        // InternalCypherParser.g:229:6: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
        // InternalCypherParser.g:232:9: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
        int cnt154=0;
        loop154:
        do {
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==CYPHER) && ((true))) {
                alt154=1;
            }


            switch (alt154) {
        	case 1 :
        	    // InternalCypherParser.g:232:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred6_InternalCypherParser", "true");
        	    }
        	    // InternalCypherParser.g:232:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
        	    // InternalCypherParser.g:232:20: (lv_cypherOption_4_0= ruleCypherOption )
        	    {
        	    // InternalCypherParser.g:232:20: (lv_cypherOption_4_0= ruleCypherOption )
        	    // InternalCypherParser.g:233:10: lv_cypherOption_4_0= ruleCypherOption
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_cypherOption_4_0=ruleCypherOption();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt154 >= 1 ) break loop154;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(154, input);
                    throw eee;
            }
            cnt154++;
        } while (true);


        }


        }


        }
    }
    // $ANTLR end synpred6_InternalCypherParser

    // $ANTLR start synpred10_InternalCypherParser
    public final void synpred10_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_RegularQuery_0 = null;


        // InternalCypherParser.g:494:3: (this_RegularQuery_0= ruleRegularQuery )
        // InternalCypherParser.g:494:3: this_RegularQuery_0= ruleRegularQuery
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_RegularQuery_0=ruleRegularQuery();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_InternalCypherParser

    // $ANTLR start synpred11_InternalCypherParser
    public final void synpred11_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_StandaloneCall_1 = null;


        // InternalCypherParser.g:506:3: (this_StandaloneCall_1= ruleStandaloneCall )
        // InternalCypherParser.g:506:3: this_StandaloneCall_1= ruleStandaloneCall
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_StandaloneCall_1=ruleStandaloneCall();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_InternalCypherParser

    // $ANTLR start synpred16_InternalCypherParser
    public final void synpred16_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_MultiPartQuery_0 = null;


        // InternalCypherParser.g:839:3: (this_MultiPartQuery_0= ruleMultiPartQuery )
        // InternalCypherParser.g:839:3: this_MultiPartQuery_0= ruleMultiPartQuery
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_MultiPartQuery_0=ruleMultiPartQuery();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_InternalCypherParser

    // $ANTLR start synpred18_InternalCypherParser
    public final void synpred18_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_readingClauses_0_0 = null;

        EObject lv_return_1_0 = null;


        // InternalCypherParser.g:881:3: ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) ) )
        // InternalCypherParser.g:881:3: ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) )
        {
        // InternalCypherParser.g:881:3: ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) )
        // InternalCypherParser.g:882:4: ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) )
        {
        // InternalCypherParser.g:882:4: ( (lv_readingClauses_0_0= ruleReadingClause ) )*
        loop156:
        do {
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==OPTIONAL||LA156_0==UNWIND||LA156_0==MATCH||LA156_0==START||LA156_0==CALL||LA156_0==LOAD) ) {
                alt156=1;
            }


            switch (alt156) {
        	case 1 :
        	    // InternalCypherParser.g:883:5: (lv_readingClauses_0_0= ruleReadingClause )
        	    {
        	    // InternalCypherParser.g:883:5: (lv_readingClauses_0_0= ruleReadingClause )
        	    // InternalCypherParser.g:884:6: lv_readingClauses_0_0= ruleReadingClause
        	    {
        	    if ( state.backtracking==0 ) {

        	      						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0_0());
        	      					
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_readingClauses_0_0=ruleReadingClause();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop156;
            }
        } while (true);

        // InternalCypherParser.g:901:4: ( (lv_return_1_0= ruleReturn ) )
        // InternalCypherParser.g:902:5: (lv_return_1_0= ruleReturn )
        {
        // InternalCypherParser.g:902:5: (lv_return_1_0= ruleReturn )
        // InternalCypherParser.g:903:6: lv_return_1_0= ruleReturn
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_0_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_return_1_0=ruleReturn();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred18_InternalCypherParser

    // $ANTLR start synpred20_InternalCypherParser
    public final void synpred20_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_updatingClauses_3_0 = null;


        // InternalCypherParser.g:943:5: ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )
        // InternalCypherParser.g:943:5: (lv_updatingClauses_3_0= ruleUpdatingClause )
        {
        // InternalCypherParser.g:943:5: (lv_updatingClauses_3_0= ruleUpdatingClause )
        // InternalCypherParser.g:944:6: lv_updatingClauses_3_0= ruleUpdatingClause
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_updatingClauses_3_0=ruleUpdatingClause();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred20_InternalCypherParser

    // $ANTLR start synpred21_InternalCypherParser
    public final void synpred21_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_return_4_0 = null;


        // InternalCypherParser.g:962:5: ( (lv_return_4_0= ruleReturn ) )
        // InternalCypherParser.g:962:5: (lv_return_4_0= ruleReturn )
        {
        // InternalCypherParser.g:962:5: (lv_return_4_0= ruleReturn )
        // InternalCypherParser.g:963:6: lv_return_4_0= ruleReturn
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_1_2_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_return_4_0=ruleReturn();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred21_InternalCypherParser

    // $ANTLR start synpred22_InternalCypherParser
    public final void synpred22_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_subQueries_0_0 = null;


        // InternalCypherParser.g:1001:4: ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )
        // InternalCypherParser.g:1001:4: (lv_subQueries_0_0= ruleMultiPartSubQuery )
        {
        // InternalCypherParser.g:1001:4: (lv_subQueries_0_0= ruleMultiPartSubQuery )
        // InternalCypherParser.g:1002:5: lv_subQueries_0_0= ruleMultiPartSubQuery
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getMultiPartQueryAccess().getSubQueriesMultiPartSubQueryParserRuleCall_0_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_subQueries_0_0=ruleMultiPartSubQuery();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred22_InternalCypherParser

    // $ANTLR start synpred34_InternalCypherParser
    public final void synpred34_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateIndex_0 = null;


        // InternalCypherParser.g:1301:3: (this_CreateIndex_0= ruleCreateIndex )
        // InternalCypherParser.g:1301:3: this_CreateIndex_0= ruleCreateIndex
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateIndex_0=ruleCreateIndex();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_InternalCypherParser

    // $ANTLR start synpred35_InternalCypherParser
    public final void synpred35_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_DropIndex_1 = null;


        // InternalCypherParser.g:1313:3: (this_DropIndex_1= ruleDropIndex )
        // InternalCypherParser.g:1313:3: this_DropIndex_1= ruleDropIndex
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropIndex_1=ruleDropIndex();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_InternalCypherParser

    // $ANTLR start synpred36_InternalCypherParser
    public final void synpred36_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateUniqueConstraint_2 = null;


        // InternalCypherParser.g:1325:3: (this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint )
        // InternalCypherParser.g:1325:3: this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateUniqueConstraint_2=ruleCreateUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_InternalCypherParser

    // $ANTLR start synpred37_InternalCypherParser
    public final void synpred37_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_DropUniqueConstraint_3 = null;


        // InternalCypherParser.g:1337:3: (this_DropUniqueConstraint_3= ruleDropUniqueConstraint )
        // InternalCypherParser.g:1337:3: this_DropUniqueConstraint_3= ruleDropUniqueConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropUniqueConstraint_3=ruleDropUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_InternalCypherParser

    // $ANTLR start synpred38_InternalCypherParser
    public final void synpred38_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateNodePropertyExistenceConstraint_4 = null;


        // InternalCypherParser.g:1349:3: (this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint )
        // InternalCypherParser.g:1349:3: this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateNodePropertyExistenceConstraint_4=ruleCreateNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_InternalCypherParser

    // $ANTLR start synpred39_InternalCypherParser
    public final void synpred39_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_DropNodePropertyExistenceConstraint_5 = null;


        // InternalCypherParser.g:1361:3: (this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint )
        // InternalCypherParser.g:1361:3: this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropNodePropertyExistenceConstraint_5=ruleDropNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_InternalCypherParser

    // $ANTLR start synpred40_InternalCypherParser
    public final void synpred40_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateRelationshipPropertyExistenceConstraint_6 = null;


        // InternalCypherParser.g:1373:3: (this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint )
        // InternalCypherParser.g:1373:3: this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateRelationshipPropertyExistenceConstraint_6=ruleCreateRelationshipPropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_InternalCypherParser

    // $ANTLR start synpred67_InternalCypherParser
    public final void synpred67_InternalCypherParser_fragment() throws RecognitionException {   
        Token lv_distinct_0_0=null;

        // InternalCypherParser.g:3739:4: ( (lv_distinct_0_0= DISTINCT ) )
        // InternalCypherParser.g:3739:4: (lv_distinct_0_0= DISTINCT )
        {
        // InternalCypherParser.g:3739:4: (lv_distinct_0_0= DISTINCT )
        // InternalCypherParser.g:3740:5: lv_distinct_0_0= DISTINCT
        {
        lv_distinct_0_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred67_InternalCypherParser

    // $ANTLR start synpred121_InternalCypherParser
    public final void synpred121_InternalCypherParser_fragment() throws RecognitionException {   
        Token lv_variableLength_3_0=null;
        AntlrDatatypeRuleToken lv_lower_2_0 = null;

        AntlrDatatypeRuleToken lv_upper_4_0 = null;


        // InternalCypherParser.g:6240:4: ( ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )? )
        // InternalCypherParser.g:6240:4: ( (lv_lower_2_0= ruleNumber ) )? ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )?
        {
        // InternalCypherParser.g:6240:4: ( (lv_lower_2_0= ruleNumber ) )?
        int alt164=2;
        int LA164_0 = input.LA(1);

        if ( ((LA164_0>=RULE_HEX && LA164_0<=RULE_DECIMAL)) ) {
            alt164=1;
        }
        switch (alt164) {
            case 1 :
                // InternalCypherParser.g:6241:5: (lv_lower_2_0= ruleNumber )
                {
                // InternalCypherParser.g:6241:5: (lv_lower_2_0= ruleNumber )
                // InternalCypherParser.g:6242:6: lv_lower_2_0= ruleNumber
                {
                if ( state.backtracking==0 ) {

                  						newCompositeNode(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0());
                  					
                }
                pushFollow(FOLLOW_92);
                lv_lower_2_0=ruleNumber();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }

        // InternalCypherParser.g:6259:4: ( ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )? )?
        int alt166=2;
        int LA166_0 = input.LA(1);

        if ( (LA166_0==FullStopFullStop) ) {
            alt166=1;
        }
        switch (alt166) {
            case 1 :
                // InternalCypherParser.g:6260:5: ( (lv_variableLength_3_0= FullStopFullStop ) ) ( (lv_upper_4_0= ruleNumber ) )?
                {
                // InternalCypherParser.g:6260:5: ( (lv_variableLength_3_0= FullStopFullStop ) )
                // InternalCypherParser.g:6261:6: (lv_variableLength_3_0= FullStopFullStop )
                {
                // InternalCypherParser.g:6261:6: (lv_variableLength_3_0= FullStopFullStop )
                // InternalCypherParser.g:6262:7: lv_variableLength_3_0= FullStopFullStop
                {
                lv_variableLength_3_0=(Token)match(input,FullStopFullStop,FOLLOW_14); if (state.failed) return ;

                }


                }

                // InternalCypherParser.g:6274:5: ( (lv_upper_4_0= ruleNumber ) )?
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( ((LA165_0>=RULE_HEX && LA165_0<=RULE_DECIMAL)) ) {
                    alt165=1;
                }
                switch (alt165) {
                    case 1 :
                        // InternalCypherParser.g:6275:6: (lv_upper_4_0= ruleNumber )
                        {
                        // InternalCypherParser.g:6275:6: (lv_upper_4_0= ruleNumber )
                        // InternalCypherParser.g:6276:7: lv_upper_4_0= ruleNumber
                        {
                        if ( state.backtracking==0 ) {

                          							newCompositeNode(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0());
                          						
                        }
                        pushFollow(FOLLOW_2);
                        lv_upper_4_0=ruleNumber();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred121_InternalCypherParser

    // $ANTLR start synpred125_InternalCypherParser
    public final void synpred125_InternalCypherParser_fragment() throws RecognitionException {   
        Token lv_operator_1_0=null;
        EObject lv_left_2_0 = null;


        // InternalCypherParser.g:6621:3: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) ) )
        // InternalCypherParser.g:6621:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) )
        {
        // InternalCypherParser.g:6621:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) )
        // InternalCypherParser.g:6622:4: () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) )
        {
        // InternalCypherParser.g:6622:4: ()
        // InternalCypherParser.g:6623:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalCypherParser.g:6632:4: ( (lv_operator_1_0= NOT ) )
        // InternalCypherParser.g:6633:5: (lv_operator_1_0= NOT )
        {
        // InternalCypherParser.g:6633:5: (lv_operator_1_0= NOT )
        // InternalCypherParser.g:6634:6: lv_operator_1_0= NOT
        {
        lv_operator_1_0=(Token)match(input,NOT,FOLLOW_39); if (state.failed) return ;

        }


        }

        // InternalCypherParser.g:6646:4: ( (lv_left_2_0= ruleNotExpression ) )
        // InternalCypherParser.g:6647:5: (lv_left_2_0= ruleNotExpression )
        {
        // InternalCypherParser.g:6647:5: (lv_left_2_0= ruleNotExpression )
        // InternalCypherParser.g:6648:6: lv_left_2_0= ruleNotExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_left_2_0=ruleNotExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred125_InternalCypherParser

    // $ANTLR start synpred143_InternalCypherParser
    public final void synpred143_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;


        // InternalCypherParser.g:7275:3: ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket ) )
        // InternalCypherParser.g:7275:3: ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket )
        {
        // InternalCypherParser.g:7275:3: ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket )
        // InternalCypherParser.g:7276:4: () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) otherlv_3= RightSquareBracket
        {
        // InternalCypherParser.g:7276:4: ()
        // InternalCypherParser.g:7277:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_39); if (state.failed) return ;
        // InternalCypherParser.g:7290:4: ( (lv_expression_2_0= ruleExpression ) )
        // InternalCypherParser.g:7291:5: (lv_expression_2_0= ruleExpression )
        {
        // InternalCypherParser.g:7291:5: (lv_expression_2_0= ruleExpression )
        // InternalCypherParser.g:7292:6: lv_expression_2_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getListOperatorExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0());
          					
        }
        pushFollow(FOLLOW_34);
        lv_expression_2_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred143_InternalCypherParser

    // $ANTLR start synpred154_InternalCypherParser
    public final void synpred154_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_Literal_0 = null;


        // InternalCypherParser.g:7679:3: (this_Literal_0= ruleLiteral )
        // InternalCypherParser.g:7679:3: this_Literal_0= ruleLiteral
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_Literal_0=ruleLiteral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_InternalCypherParser

    // $ANTLR start synpred156_InternalCypherParser
    public final void synpred156_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_LegacyParameter_2 = null;


        // InternalCypherParser.g:7703:3: (this_LegacyParameter_2= ruleLegacyParameter )
        // InternalCypherParser.g:7703:3: this_LegacyParameter_2= ruleLegacyParameter
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_LegacyParameter_2=ruleLegacyParameter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_InternalCypherParser

    // $ANTLR start synpred157_InternalCypherParser
    public final void synpred157_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_CaseExpression_3 = null;


        // InternalCypherParser.g:7715:3: (this_CaseExpression_3= ruleCaseExpression )
        // InternalCypherParser.g:7715:3: this_CaseExpression_3= ruleCaseExpression
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CaseExpression_3=ruleCaseExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_InternalCypherParser

    // $ANTLR start synpred158_InternalCypherParser
    public final void synpred158_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;

        // InternalCypherParser.g:7727:3: ( ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis ) )
        // InternalCypherParser.g:7727:3: ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis )
        {
        // InternalCypherParser.g:7727:3: ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis )
        // InternalCypherParser.g:7728:4: () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis
        {
        // InternalCypherParser.g:7728:4: ()
        // InternalCypherParser.g:7729:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_5=(Token)match(input,COUNT,FOLLOW_25); if (state.failed) return ;
        otherlv_6=(Token)match(input,LeftParenthesis,FOLLOW_108); if (state.failed) return ;
        otherlv_7=(Token)match(input,Asterisk,FOLLOW_26); if (state.failed) return ;
        otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred158_InternalCypherParser

    // $ANTLR start synpred159_InternalCypherParser
    public final void synpred159_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_ListComprehension_9 = null;


        // InternalCypherParser.g:7756:3: (this_ListComprehension_9= ruleListComprehension )
        // InternalCypherParser.g:7756:3: this_ListComprehension_9= ruleListComprehension
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ListComprehension_9=ruleListComprehension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_InternalCypherParser

    // $ANTLR start synpred160_InternalCypherParser
    public final void synpred160_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_PatternComprehension_10 = null;


        // InternalCypherParser.g:7768:3: (this_PatternComprehension_10= rulePatternComprehension )
        // InternalCypherParser.g:7768:3: this_PatternComprehension_10= rulePatternComprehension
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_PatternComprehension_10=rulePatternComprehension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_InternalCypherParser

    // $ANTLR start synpred161_InternalCypherParser
    public final void synpred161_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        EObject lv_filterExpression_14_0 = null;


        // InternalCypherParser.g:7780:3: ( ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis ) )
        // InternalCypherParser.g:7780:3: ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis )
        {
        // InternalCypherParser.g:7780:3: ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis )
        // InternalCypherParser.g:7781:4: () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis
        {
        // InternalCypherParser.g:7781:4: ()
        // InternalCypherParser.g:7782:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_12=(Token)match(input,FILTER,FOLLOW_25); if (state.failed) return ;
        otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalCypherParser.g:7799:4: ( (lv_filterExpression_14_0= ruleFilterExpression ) )
        // InternalCypherParser.g:7800:5: (lv_filterExpression_14_0= ruleFilterExpression )
        {
        // InternalCypherParser.g:7800:5: (lv_filterExpression_14_0= ruleFilterExpression )
        // InternalCypherParser.g:7801:6: lv_filterExpression_14_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_7_3_0());
          					
        }
        pushFollow(FOLLOW_26);
        lv_filterExpression_14_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred161_InternalCypherParser

    // $ANTLR start synpred163_InternalCypherParser
    public final void synpred163_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        EObject lv_filterExpression_19_0 = null;

        EObject lv_expression_21_0 = null;


        // InternalCypherParser.g:7824:3: ( ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis ) )
        // InternalCypherParser.g:7824:3: ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis )
        {
        // InternalCypherParser.g:7824:3: ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis )
        // InternalCypherParser.g:7825:4: () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis
        {
        // InternalCypherParser.g:7825:4: ()
        // InternalCypherParser.g:7826:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_17=(Token)match(input,EXTRACT,FOLLOW_25); if (state.failed) return ;
        otherlv_18=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalCypherParser.g:7843:4: ( (lv_filterExpression_19_0= ruleFilterExpression ) )
        // InternalCypherParser.g:7844:5: (lv_filterExpression_19_0= ruleFilterExpression )
        {
        // InternalCypherParser.g:7844:5: (lv_filterExpression_19_0= ruleFilterExpression )
        // InternalCypherParser.g:7845:6: lv_filterExpression_19_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_8_3_0());
          					
        }
        pushFollow(FOLLOW_109);
        lv_filterExpression_19_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalCypherParser.g:7862:4: (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==VerticalLine) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // InternalCypherParser.g:7863:5: otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) )
                {
                otherlv_20=(Token)match(input,VerticalLine,FOLLOW_39); if (state.failed) return ;
                // InternalCypherParser.g:7867:5: ( (lv_expression_21_0= ruleExpression ) )
                // InternalCypherParser.g:7868:6: (lv_expression_21_0= ruleExpression )
                {
                // InternalCypherParser.g:7868:6: (lv_expression_21_0= ruleExpression )
                // InternalCypherParser.g:7869:7: lv_expression_21_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  							newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_8_4_1_0());
                  						
                }
                pushFollow(FOLLOW_26);
                lv_expression_21_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        otherlv_22=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred163_InternalCypherParser

    // $ANTLR start synpred164_InternalCypherParser
    public final void synpred164_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_Reduce_23 = null;


        // InternalCypherParser.g:7893:3: (this_Reduce_23= ruleReduce )
        // InternalCypherParser.g:7893:3: this_Reduce_23= ruleReduce
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_Reduce_23=ruleReduce();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_InternalCypherParser

    // $ANTLR start synpred165_InternalCypherParser
    public final void synpred165_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        EObject lv_filterExpression_27_0 = null;


        // InternalCypherParser.g:7905:3: ( ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis ) )
        // InternalCypherParser.g:7905:3: ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis )
        {
        // InternalCypherParser.g:7905:3: ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis )
        // InternalCypherParser.g:7906:4: () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis
        {
        // InternalCypherParser.g:7906:4: ()
        // InternalCypherParser.g:7907:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_25=(Token)match(input,ALL,FOLLOW_25); if (state.failed) return ;
        otherlv_26=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalCypherParser.g:7924:4: ( (lv_filterExpression_27_0= ruleFilterExpression ) )
        // InternalCypherParser.g:7925:5: (lv_filterExpression_27_0= ruleFilterExpression )
        {
        // InternalCypherParser.g:7925:5: (lv_filterExpression_27_0= ruleFilterExpression )
        // InternalCypherParser.g:7926:6: lv_filterExpression_27_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_10_3_0());
          					
        }
        pushFollow(FOLLOW_26);
        lv_filterExpression_27_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_28=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred165_InternalCypherParser

    // $ANTLR start synpred166_InternalCypherParser
    public final void synpred166_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_30=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        EObject lv_filterExpression_32_0 = null;


        // InternalCypherParser.g:7949:3: ( ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis ) )
        // InternalCypherParser.g:7949:3: ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis )
        {
        // InternalCypherParser.g:7949:3: ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis )
        // InternalCypherParser.g:7950:4: () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis
        {
        // InternalCypherParser.g:7950:4: ()
        // InternalCypherParser.g:7951:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_30=(Token)match(input,ANY,FOLLOW_25); if (state.failed) return ;
        otherlv_31=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalCypherParser.g:7968:4: ( (lv_filterExpression_32_0= ruleFilterExpression ) )
        // InternalCypherParser.g:7969:5: (lv_filterExpression_32_0= ruleFilterExpression )
        {
        // InternalCypherParser.g:7969:5: (lv_filterExpression_32_0= ruleFilterExpression )
        // InternalCypherParser.g:7970:6: lv_filterExpression_32_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0());
          					
        }
        pushFollow(FOLLOW_26);
        lv_filterExpression_32_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_33=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred166_InternalCypherParser

    // $ANTLR start synpred167_InternalCypherParser
    public final void synpred167_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_35=null;
        Token otherlv_36=null;
        Token otherlv_38=null;
        EObject lv_filterExpression_37_0 = null;


        // InternalCypherParser.g:7993:3: ( ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis ) )
        // InternalCypherParser.g:7993:3: ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis )
        {
        // InternalCypherParser.g:7993:3: ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis )
        // InternalCypherParser.g:7994:4: () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis
        {
        // InternalCypherParser.g:7994:4: ()
        // InternalCypherParser.g:7995:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_35=(Token)match(input,NONE,FOLLOW_25); if (state.failed) return ;
        otherlv_36=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalCypherParser.g:8012:4: ( (lv_filterExpression_37_0= ruleFilterExpression ) )
        // InternalCypherParser.g:8013:5: (lv_filterExpression_37_0= ruleFilterExpression )
        {
        // InternalCypherParser.g:8013:5: (lv_filterExpression_37_0= ruleFilterExpression )
        // InternalCypherParser.g:8014:6: lv_filterExpression_37_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0());
          					
        }
        pushFollow(FOLLOW_26);
        lv_filterExpression_37_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_38=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred167_InternalCypherParser

    // $ANTLR start synpred168_InternalCypherParser
    public final void synpred168_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_40=null;
        Token otherlv_41=null;
        Token otherlv_43=null;
        EObject lv_filterExpression_42_0 = null;


        // InternalCypherParser.g:8037:3: ( ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis ) )
        // InternalCypherParser.g:8037:3: ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis )
        {
        // InternalCypherParser.g:8037:3: ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis )
        // InternalCypherParser.g:8038:4: () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis
        {
        // InternalCypherParser.g:8038:4: ()
        // InternalCypherParser.g:8039:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_40=(Token)match(input,SINGLE,FOLLOW_25); if (state.failed) return ;
        otherlv_41=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalCypherParser.g:8056:4: ( (lv_filterExpression_42_0= ruleFilterExpression ) )
        // InternalCypherParser.g:8057:5: (lv_filterExpression_42_0= ruleFilterExpression )
        {
        // InternalCypherParser.g:8057:5: (lv_filterExpression_42_0= ruleFilterExpression )
        // InternalCypherParser.g:8058:6: lv_filterExpression_42_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0());
          					
        }
        pushFollow(FOLLOW_26);
        lv_filterExpression_42_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_43=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred168_InternalCypherParser

    // $ANTLR start synpred169_InternalCypherParser
    public final void synpred169_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_ShortestPathPattern_44 = null;


        // InternalCypherParser.g:8081:3: (this_ShortestPathPattern_44= ruleShortestPathPattern )
        // InternalCypherParser.g:8081:3: this_ShortestPathPattern_44= ruleShortestPathPattern
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ShortestPathPattern_44=ruleShortestPathPattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_InternalCypherParser

    // $ANTLR start synpred170_InternalCypherParser
    public final void synpred170_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_RelationshipsPattern_45 = null;


        // InternalCypherParser.g:8093:3: (this_RelationshipsPattern_45= ruleRelationshipsPattern )
        // InternalCypherParser.g:8093:3: this_RelationshipsPattern_45= ruleRelationshipsPattern
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_RelationshipsPattern_45=ruleRelationshipsPattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_InternalCypherParser

    // $ANTLR start synpred171_InternalCypherParser
    public final void synpred171_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_ParenthesizedExpression_46 = null;


        // InternalCypherParser.g:8105:3: (this_ParenthesizedExpression_46= ruleParenthesizedExpression )
        // InternalCypherParser.g:8105:3: this_ParenthesizedExpression_46= ruleParenthesizedExpression
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ParenthesizedExpression_46=ruleParenthesizedExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_InternalCypherParser

    // $ANTLR start synpred172_InternalCypherParser
    public final void synpred172_InternalCypherParser_fragment() throws RecognitionException {   
        EObject this_FunctionInvocation_47 = null;


        // InternalCypherParser.g:8117:3: (this_FunctionInvocation_47= ruleFunctionInvocation )
        // InternalCypherParser.g:8117:3: this_FunctionInvocation_47= ruleFunctionInvocation
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_FunctionInvocation_47=ruleFunctionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_InternalCypherParser

    // $ANTLR start synpred181_InternalCypherParser
    public final void synpred181_InternalCypherParser_fragment() throws RecognitionException {   
        EObject lv_chain_1_0 = null;


        // InternalCypherParser.g:8598:4: ( (lv_chain_1_0= rulePatternElementChain ) )
        // InternalCypherParser.g:8598:4: (lv_chain_1_0= rulePatternElementChain )
        {
        // InternalCypherParser.g:8598:4: (lv_chain_1_0= rulePatternElementChain )
        // InternalCypherParser.g:8599:5: lv_chain_1_0= rulePatternElementChain
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_chain_1_0=rulePatternElementChain();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred181_InternalCypherParser

    // $ANTLR start synpred183_InternalCypherParser
    public final void synpred183_InternalCypherParser_fragment() throws RecognitionException {   
        Token lv_distinct_2_0=null;

        // InternalCypherParser.g:8777:4: ( (lv_distinct_2_0= DISTINCT ) )
        // InternalCypherParser.g:8777:4: (lv_distinct_2_0= DISTINCT )
        {
        // InternalCypherParser.g:8777:4: (lv_distinct_2_0= DISTINCT )
        // InternalCypherParser.g:8778:5: lv_distinct_2_0= DISTINCT
        {
        lv_distinct_2_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred183_InternalCypherParser

    // $ANTLR start synpred195_InternalCypherParser
    public final void synpred195_InternalCypherParser_fragment() throws RecognitionException {   
        Token otherlv_0=null;
        EObject lv_caseAlternatives_1_0 = null;


        // InternalCypherParser.g:9422:4: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) )
        // InternalCypherParser.g:9422:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
        {
        // InternalCypherParser.g:9422:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
        // InternalCypherParser.g:9423:5: otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
        {
        otherlv_0=(Token)match(input,CASE,FOLLOW_118); if (state.failed) return ;
        // InternalCypherParser.g:9427:5: ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
        int cnt177=0;
        loop177:
        do {
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==WHEN) ) {
                alt177=1;
            }


            switch (alt177) {
        	case 1 :
        	    // InternalCypherParser.g:9428:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
        	    {
        	    // InternalCypherParser.g:9428:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
        	    // InternalCypherParser.g:9429:7: lv_caseAlternatives_1_0= ruleCaseAlternatives
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0());
        	      						
        	    }
        	    pushFollow(FOLLOW_128);
        	    lv_caseAlternatives_1_0=ruleCaseAlternatives();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt177 >= 1 ) break loop177;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(177, input);
                    throw eee;
            }
            cnt177++;
        } while (true);


        }


        }
    }
    // $ANTLR end synpred195_InternalCypherParser

    // Delegated rules

    public final boolean synpred40_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA138 dfa138 = new DFA138(this);
    static final String dfa_1s = "\26\uffff";
    static final String dfa_2s = "\1\10\21\uffff\3\10\1\uffff";
    static final String dfa_3s = "\2\4\1\10\1\105\1\4\1\47\2\4\1\uffff\1\4\1\132\1\30\5\4\1\16\2\15\1\4\1\uffff";
    static final String dfa_4s = "\2\156\2\145\1\156\1\145\1\156\1\165\1\uffff\1\156\2\145\5\165\3\145\1\165\1\uffff";
    static final String dfa_5s = "\10\uffff\1\2\14\uffff\1\1";
    static final String dfa_6s = "\26\uffff}>";
    static final String[] dfa_7s = {
            "\11\25\1\5\1\25\1\22\1\25\1\12\1\25\1\23\2\25\1\1\1\24\1\14\1\13\3\25\1\16\1\20\3\25\1\7\4\25\1\6\1\11\1\25\1\4\1\25\1\21\1\25\1\uffff\1\10\2\25\1\2\4\25\1\3\10\25\1\17\10\25\1\15\1\25\6\uffff\6\25\27\uffff\1\25",
            "\52\10\2\uffff\33\10\6\uffff\6\10\3\uffff\1\10\12\uffff\1\25\10\uffff\1\10",
            "\1\10\34\uffff\1\10\77\uffff\1\25",
            "\1\10\37\uffff\1\25",
            "\52\10\2\uffff\33\10\6\uffff\6\10\16\uffff\1\25\10\uffff\1\10",
            "\1\10\75\uffff\1\25",
            "\52\10\2\uffff\33\10\6\uffff\6\10\3\uffff\1\10\12\uffff\1\25\10\uffff\1\10",
            "\52\10\2\uffff\33\10\6\uffff\6\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\5\uffff\1\25\2\uffff\1\10\2\uffff\1\10\2\uffff\1\10\3\uffff\4\10",
            "",
            "\52\10\2\uffff\33\10\6\uffff\6\10\3\uffff\1\10\12\uffff\1\25\10\uffff\1\10",
            "\1\10\12\uffff\1\25",
            "\1\10\114\uffff\1\25",
            "\52\10\2\uffff\33\10\6\uffff\6\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\5\uffff\1\25\2\uffff\1\10\2\uffff\1\10\2\uffff\1\10\3\uffff\4\10",
            "\52\10\2\uffff\33\10\6\uffff\6\10\1\uffff\1\10\1\uffff\1\10\12\uffff\1\25\2\uffff\1\10\2\uffff\1\10\2\uffff\1\10\3\uffff\4\10",
            "\52\10\2\uffff\33\10\6\uffff\6\10\1\uffff\1\10\1\uffff\1\10\12\uffff\1\25\2\uffff\1\10\2\uffff\1\10\2\uffff\1\10\3\uffff\4\10",
            "\52\10\2\uffff\33\10\6\uffff\6\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\1\uffff\1\10\5\uffff\1\25\2\uffff\1\10\2\uffff\1\10\2\uffff\1\10\3\uffff\4\10",
            "\52\10\2\uffff\33\10\6\uffff\6\10\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\1\uffff\1\10\5\uffff\1\25\2\uffff\1\10\2\uffff\1\10\2\uffff\1\10\3\uffff\4\10",
            "\1\10\126\uffff\1\25",
            "\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\4\10\3\uffff\2\10\3\uffff\1\10\4\uffff\2\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\1\10\4\uffff\1\10\10\uffff\1\10\10\uffff\1\10\33\uffff\1\25",
            "\1\10\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\4\10\3\uffff\2\10\3\uffff\1\10\4\uffff\2\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\2\uffff\1\10\4\uffff\1\10\10\uffff\1\10\10\uffff\1\10\33\uffff\1\25",
            "\52\10\1\uffff\34\10\6\uffff\6\10\16\uffff\1\25\10\uffff\1\10\4\uffff\3\10",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()* loopback of 317:3: ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*";
        }
    }
    static final String dfa_8s = "\22\uffff";
    static final String dfa_9s = "\1\15\5\uffff\1\0\13\uffff";
    static final String dfa_10s = "\1\111\5\uffff\1\0\13\uffff";
    static final String dfa_11s = "\1\uffff\1\1\16\uffff\1\3\1\2";
    static final String dfa_12s = "\6\uffff\1\0\13\uffff}>";
    static final String[] dfa_13s = {
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\20\2\uffff\1\6\7\uffff\1\1\10\uffff\1\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "493:2: (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalCypherParser()) ) {s = 1;}

                        else if ( (synpred11_InternalCypherParser()) ) {s = 17;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\20\uffff";
    static final String dfa_15s = "\1\15\15\0\2\uffff";
    static final String dfa_16s = "\1\111\15\0\2\uffff";
    static final String dfa_17s = "\16\uffff\1\1\1\2";
    static final String dfa_18s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\uffff}>";
    static final String[] dfa_19s = {
            "\1\3\3\uffff\1\11\4\uffff\1\7\1\uffff\1\13\1\12\3\uffff\1\15\1\17\3\uffff\1\5\4\uffff\1\4\1\10\1\uffff\1\2\4\uffff\1\6\7\uffff\1\1\10\uffff\1\16\10\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "838:2: (this_MultiPartQuery_0= ruleMultiPartQuery | this_SinglePartQuery_1= ruleSinglePartQuery )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_1 = input.LA(1);

                         
                        int index13_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA13_12 = input.LA(1);

                         
                        int index13_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA13_13 = input.LA(1);

                         
                        int index13_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_20s = "\17\uffff";
    static final String dfa_21s = "\1\15\6\0\10\uffff";
    static final String dfa_22s = "\1\111\6\0\10\uffff";
    static final String dfa_23s = "\7\uffff\1\1\1\2\6\uffff";
    static final String dfa_24s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\10\uffff}>";
    static final String[] dfa_25s = {
            "\1\3\3\uffff\1\10\4\uffff\1\10\1\uffff\2\10\3\uffff\1\10\1\7\3\uffff\1\5\4\uffff\1\4\1\10\1\uffff\1\2\4\uffff\1\6\7\uffff\1\1\21\uffff\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "880:2: ( ( ( (lv_readingClauses_0_0= ruleReadingClause ) )* ( (lv_return_1_0= ruleReturn ) ) ) | ( ( (lv_readingClauses_2_0= ruleReadingClause ) )* ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+ ( (lv_return_4_0= ruleReturn ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_26s = "\12\uffff";
    static final String dfa_27s = "\1\1\11\uffff";
    static final String dfa_28s = "\1\15\1\uffff\7\0\1\uffff";
    static final String dfa_29s = "\1\143\1\uffff\7\0\1\uffff";
    static final String dfa_30s = "\1\uffff\1\2\7\uffff\1\1";
    static final String dfa_31s = "\2\uffff\1\1\1\0\1\5\1\3\1\2\1\4\1\6\1\uffff}>";
    static final String[] dfa_32s = {
            "\1\1\3\uffff\1\4\4\uffff\1\2\1\uffff\1\6\1\5\3\uffff\1\10\1\1\3\uffff\1\1\4\uffff\1\1\1\3\1\uffff\3\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\7\31\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = dfa_26;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "()+ loopback of 942:4: ( (lv_updatingClauses_3_0= ruleUpdatingClause ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_33s = "\1\2\25\uffff";
    static final String dfa_34s = "\1\15\1\0\24\uffff";
    static final String dfa_35s = "\1\143\1\0\24\uffff";
    static final String dfa_36s = "\2\uffff\1\2\22\uffff\1\1";
    static final String dfa_37s = "\1\uffff\1\0\24\uffff}>";
    static final String[] dfa_38s = {
            "\1\2\3\uffff\1\2\4\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\1\3\uffff\1\2\4\uffff\2\2\1\uffff\3\2\2\uffff\1\2\2\uffff\1\2\4\uffff\1\2\10\uffff\1\2\10\uffff\1\2\31\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = dfa_1;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "961:4: ( (lv_return_4_0= ruleReturn ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_1 = input.LA(1);

                         
                        int index17_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index17_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_39s = "\1\15\6\0\1\uffff\7\0\1\uffff";
    static final String dfa_40s = "\1\111\6\0\1\uffff\7\0\1\uffff";
    static final String dfa_41s = "\7\uffff\1\2\7\uffff\1\1";
    static final String dfa_42s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\uffff}>";
    static final String[] dfa_43s = {
            "\1\3\3\uffff\1\12\4\uffff\1\10\1\uffff\1\14\1\13\3\uffff\1\16\1\7\3\uffff\1\5\4\uffff\1\4\1\11\1\uffff\1\2\4\uffff\1\6\7\uffff\1\1\10\uffff\1\17\10\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final char[] dfa_40 = DFA.unpackEncodedStringToUnsignedChars(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[][] dfa_43 = unpackEncodedStringArray(dfa_43s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_39;
            this.max = dfa_40;
            this.accept = dfa_41;
            this.special = dfa_42;
            this.transition = dfa_43;
        }
        public String getDescription() {
            return "()+ loopback of 1000:3: ( (lv_subQueries_0_0= ruleMultiPartSubQuery ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_9 = input.LA(1);

                         
                        int index19_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_12 = input.LA(1);

                         
                        int index19_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_44s = "\13\uffff";
    static final String dfa_45s = "\1\26\2\0\10\uffff";
    static final String dfa_46s = "\1\62\2\0\10\uffff";
    static final String dfa_47s = "\3\uffff\1\1\1\3\1\5\1\7\1\2\1\4\1\6\1\10";
    static final String dfa_48s = "\1\uffff\1\0\1\1\10\uffff}>";
    static final String[] dfa_49s = {
            "\1\1\33\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[][] dfa_49 = unpackEncodedStringArray(dfa_49s);

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = dfa_44;
            this.eof = dfa_44;
            this.min = dfa_45;
            this.max = dfa_46;
            this.accept = dfa_47;
            this.special = dfa_48;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "1300:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_1 = input.LA(1);

                         
                        int index24_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_InternalCypherParser()) ) {s = 3;}

                        else if ( (synpred36_InternalCypherParser()) ) {s = 4;}

                        else if ( (synpred38_InternalCypherParser()) ) {s = 5;}

                        else if ( (synpred40_InternalCypherParser()) ) {s = 6;}

                         
                        input.seek(index24_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_2 = input.LA(1);

                         
                        int index24_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_InternalCypherParser()) ) {s = 7;}

                        else if ( (synpred37_InternalCypherParser()) ) {s = 8;}

                        else if ( (synpred39_InternalCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index24_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_50s = "\121\uffff";
    static final String dfa_51s = "\1\4\1\uffff\3\113\1\4\110\113\3\uffff";
    static final String dfa_52s = "\1\165\1\uffff\3\145\1\165\110\145\3\uffff";
    static final String dfa_53s = "\1\uffff\1\1\114\uffff\1\3\1\2\1\4";
    static final String dfa_54s = "\121\uffff}>";
    static final String[] dfa_55s = {
            "\1\17\1\47\1\100\1\16\1\34\1\70\1\72\1\111\1\62\1\50\1\25\1\22\1\10\1\60\1\44\1\23\1\35\1\26\1\30\1\21\1\55\1\56\1\40\1\7\1\11\1\57\1\63\1\15\1\107\1\37\1\52\1\6\1\4\1\31\1\67\1\51\1\53\1\64\1\76\1\27\1\24\1\102\2\uffff\1\5\1\71\1\33\1\112\1\110\1\45\1\74\1\41\1\77\1\14\1\2\1\75\1\66\1\115\1\3\1\114\1\43\1\12\1\105\1\13\1\73\1\42\1\113\1\106\1\101\1\54\1\104\6\uffff\1\46\1\65\1\61\1\36\1\32\1\103\1\uffff\1\1\1\uffff\1\1\15\uffff\1\1\2\uffff\1\1\2\uffff\1\20\3\uffff\4\1",
            "",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\52\1\2\uffff\33\1\1\116\5\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\120\2\uffff\1\117\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "",
            "",
            ""
    };

    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final char[] dfa_51 = DFA.unpackEncodedStringToUnsignedChars(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[][] dfa_55 = unpackEncodedStringArray(dfa_55s);

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "2798:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) this_NodeLabels_10= ruleNodeLabels[$current] ) )";
        }
    }
    static final String dfa_56s = "\117\uffff";
    static final String dfa_57s = "\1\4\107\132\1\4\4\132\2\uffff";
    static final String dfa_58s = "\1\165\107\142\1\165\4\142\2\uffff";
    static final String dfa_59s = "\115\uffff\1\2\1\1";
    static final String dfa_60s = "\117\uffff}>";
    static final String[] dfa_61s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\1\uffff\1\115\1\uffff\1\115\15\uffff\1\115\2\uffff\1\115\2\uffff\1\1\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\52\115\2\uffff\33\115\6\uffff\6\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\1\uffff\2\115\1\uffff\1\116\5\uffff\1\115\2\uffff\1\115\2\uffff\1\115\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "",
            ""
    };

    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final char[] dfa_58 = DFA.unpackEncodedStringToUnsignedChars(dfa_58s);
    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[][] dfa_61 = unpackEncodedStringArray(dfa_61s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_56;
            this.eof = dfa_56;
            this.min = dfa_57;
            this.max = dfa_58;
            this.accept = dfa_59;
            this.special = dfa_60;
            this.transition = dfa_61;
        }
        public String getDescription() {
            return "3135:2: ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) this_NodeLabels_2= ruleNodeLabels[$current] ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) )";
        }
    }
    static final String dfa_62s = "\120\uffff";
    static final String dfa_63s = "\1\uffff\114\116\3\uffff";
    static final String dfa_64s = "\1\4\114\15\1\4\2\uffff";
    static final String dfa_65s = "\1\156\114\143\1\156\2\uffff";
    static final String dfa_66s = "\116\uffff\1\2\1\1";
    static final String dfa_67s = "\120\uffff}>";
    static final String[] dfa_68s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\20\uffff\1\117\5\uffff\1\115\2\uffff\1\116",
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "",
            ""
    };

    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final char[] dfa_64 = DFA.unpackEncodedStringToUnsignedChars(dfa_64s);
    static final char[] dfa_65 = DFA.unpackEncodedStringToUnsignedChars(dfa_65s);
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final short[][] dfa_68 = unpackEncodedStringArray(dfa_68s);

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = dfa_62;
            this.eof = dfa_63;
            this.min = dfa_64;
            this.max = dfa_65;
            this.accept = dfa_66;
            this.special = dfa_67;
            this.transition = dfa_68;
        }
        public String getDescription() {
            return "3401:5: (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation )";
        }
    }
    static final String dfa_69s = "\1\uffff\114\116\2\uffff";
    static final String dfa_70s = "\1\4\114\15\2\uffff";
    static final String dfa_71s = "\1\156\114\143\2\uffff";
    static final String dfa_72s = "\115\uffff\1\1\1\2";
    static final String[] dfa_73s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\1\116\1\uffff\1\116\2\uffff\1\116\2\uffff\1\116\4\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\14\uffff\1\116\4\uffff\1\116",
            "",
            ""
    };
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final char[] dfa_70 = DFA.unpackEncodedStringToUnsignedChars(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final short[][] dfa_73 = unpackEncodedStringArray(dfa_73s);

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = dfa_56;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_60;
            this.transition = dfa_73;
        }
        public String getDescription() {
            return "3562:3: ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )?";
        }
    }
    static final String dfa_74s = "\131\uffff";
    static final String dfa_75s = "\1\4\1\0\127\uffff";
    static final String dfa_76s = "\1\165\1\0\127\uffff";
    static final String dfa_77s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_78s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_79s = {
            "\10\2\1\1\41\2\2\uffff\33\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[][] dfa_79 = unpackEncodedStringArray(dfa_79s);

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_77;
            this.special = dfa_78;
            this.transition = dfa_79;
        }
        public String getDescription() {
            return "3738:3: ( (lv_distinct_0_0= DISTINCT ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_80s = "\122\uffff";
    static final String dfa_81s = "\1\132\1\4\1\uffff\114\132\1\4\2\uffff";
    static final String dfa_82s = "\1\142\1\156\1\uffff\114\132\1\162\2\uffff";
    static final String dfa_83s = "\2\uffff\1\3\115\uffff\1\2\1\1";
    static final String dfa_84s = "\122\uffff}>";
    static final String[] dfa_85s = {
            "\1\2\7\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\27\uffff\1\3",
            "",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\52\121\2\uffff\33\121\6\uffff\6\121\1\uffff\1\120\25\uffff\1\121\3\uffff\1\120",
            "",
            ""
    };

    static final short[] dfa_80 = DFA.unpackEncodedString(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final short[] dfa_83 = DFA.unpackEncodedString(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[][] dfa_85 = unpackEncodedStringArray(dfa_85s);

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = dfa_80;
            this.eof = dfa_80;
            this.min = dfa_81;
            this.max = dfa_82;
            this.accept = dfa_83;
            this.special = dfa_84;
            this.transition = dfa_85;
        }
        public String getDescription() {
            return "4737:3: (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )";
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = dfa_80;
            this.eof = dfa_80;
            this.min = dfa_81;
            this.max = dfa_82;
            this.accept = dfa_83;
            this.special = dfa_84;
            this.transition = dfa_85;
        }
        public String getDescription() {
            return "4804:3: (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )";
        }
    }
    static final String dfa_86s = "\1\130\1\4\1\uffff\114\142\2\uffff";
    static final String dfa_87s = "\1\153\1\165\1\uffff\114\155\2\uffff";
    static final String dfa_88s = "\2\uffff\1\2\114\uffff\1\3\1\1";
    static final String[] dfa_89s = {
            "\1\2\22\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\26\uffff\1\120\1\3\4\uffff\3\117",
            "",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "",
            ""
    };
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final char[] dfa_87 = DFA.unpackEncodedStringToUnsignedChars(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_86;
            this.max = dfa_87;
            this.accept = dfa_88;
            this.special = dfa_54;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "5997:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )";
        }
    }
    static final String dfa_90s = "\130\uffff";
    static final String dfa_91s = "\1\4\1\0\126\uffff";
    static final String dfa_92s = "\1\165\1\0\126\uffff";
    static final String dfa_93s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_94s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_95s = {
            "\52\2\2\uffff\27\2\1\1\3\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final char[] dfa_91 = DFA.unpackEncodedStringToUnsignedChars(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[][] dfa_95 = unpackEncodedStringArray(dfa_95s);

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "6620:2: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleNotExpression ) ) ) | this_ComparisonExpression_3= ruleComparisonExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_1 = input.LA(1);

                         
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_InternalCypherParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_96s = "\146\uffff";
    static final String dfa_97s = "\1\4\4\uffff\5\0\1\uffff\112\0\21\uffff";
    static final String dfa_98s = "\1\165\4\uffff\5\0\1\uffff\112\0\21\uffff";
    static final String dfa_99s = "\1\uffff\1\1\10\uffff\1\2\112\uffff\1\22\1\23\1\3\1\6\1\7\1\4\1\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21";
    static final String dfa_100s = "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\21\uffff}>";
    static final String[] dfa_101s = {
            "\1\25\1\56\1\107\1\24\1\43\1\77\1\101\1\120\1\71\1\57\1\34\1\31\1\16\1\67\1\53\1\32\1\44\1\35\1\37\1\30\1\64\1\65\1\47\1\15\1\17\1\66\1\72\1\23\1\116\1\46\1\61\1\14\1\7\1\40\1\76\1\60\1\62\1\73\1\105\1\36\1\33\1\111\2\uffff\1\13\1\100\1\42\1\121\1\117\1\54\1\103\1\50\1\106\1\22\1\5\1\104\1\75\1\124\1\6\1\123\1\52\1\20\1\114\1\21\1\102\1\51\1\122\1\115\1\110\1\63\1\113\6\uffff\1\55\1\74\1\70\1\45\1\41\1\112\1\uffff\1\12\1\uffff\1\26\15\uffff\1\11\2\uffff\1\10\2\uffff\1\27\3\uffff\4\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "7678:2: (this_Literal_0= ruleLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter | this_CaseExpression_3= ruleCaseExpression | ( () otherlv_5= COUNT otherlv_6= LeftParenthesis otherlv_7= Asterisk otherlv_8= RightParenthesis ) | this_ListComprehension_9= ruleListComprehension | this_PatternComprehension_10= rulePatternComprehension | ( () otherlv_12= FILTER otherlv_13= LeftParenthesis ( (lv_filterExpression_14_0= ruleFilterExpression ) ) otherlv_15= RightParenthesis ) | ( () otherlv_17= EXTRACT otherlv_18= LeftParenthesis ( (lv_filterExpression_19_0= ruleFilterExpression ) ) (otherlv_20= VerticalLine ( (lv_expression_21_0= ruleExpression ) ) )? otherlv_22= RightParenthesis ) | this_Reduce_23= ruleReduce | ( () otherlv_25= ALL otherlv_26= LeftParenthesis ( (lv_filterExpression_27_0= ruleFilterExpression ) ) otherlv_28= RightParenthesis ) | ( () otherlv_30= ANY otherlv_31= LeftParenthesis ( (lv_filterExpression_32_0= ruleFilterExpression ) ) otherlv_33= RightParenthesis ) | ( () otherlv_35= NONE otherlv_36= LeftParenthesis ( (lv_filterExpression_37_0= ruleFilterExpression ) ) otherlv_38= RightParenthesis ) | ( () otherlv_40= SINGLE otherlv_41= LeftParenthesis ( (lv_filterExpression_42_0= ruleFilterExpression ) ) otherlv_43= RightParenthesis ) | this_ShortestPathPattern_44= ruleShortestPathPattern | this_RelationshipsPattern_45= ruleRelationshipsPattern | this_ParenthesizedExpression_46= ruleParenthesizedExpression | this_FunctionInvocation_47= ruleFunctionInvocation | ( () ( (lv_variableRef_49_0= ruleVariableDeclaration ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalCypherParser()) ) {s = 1;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalCypherParser()) ) {s = 1;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalCypherParser()) ) {s = 1;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalCypherParser()) ) {s = 1;}

                        else if ( (synpred156_InternalCypherParser()) ) {s = 87;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalCypherParser()) ) {s = 1;}

                        else if ( (synpred159_InternalCypherParser()) ) {s = 88;}

                        else if ( (synpred160_InternalCypherParser()) ) {s = 89;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_11 = input.LA(1);

                         
                        int index121_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_InternalCypherParser()) ) {s = 90;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_12 = input.LA(1);

                         
                        int index121_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred158_InternalCypherParser()) ) {s = 91;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_13 = input.LA(1);

                         
                        int index121_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_InternalCypherParser()) ) {s = 92;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_14 = input.LA(1);

                         
                        int index121_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalCypherParser()) ) {s = 93;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_15 = input.LA(1);

                         
                        int index121_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalCypherParser()) ) {s = 94;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_16 = input.LA(1);

                         
                        int index121_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_InternalCypherParser()) ) {s = 95;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA121_17 = input.LA(1);

                         
                        int index121_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_InternalCypherParser()) ) {s = 96;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_InternalCypherParser()) ) {s = 97;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA121_19 = input.LA(1);

                         
                        int index121_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_InternalCypherParser()) ) {s = 98;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA121_20 = input.LA(1);

                         
                        int index121_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalCypherParser()) ) {s = 99;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA121_21 = input.LA(1);

                         
                        int index121_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalCypherParser()) ) {s = 99;}

                        else if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA121_22 = input.LA(1);

                         
                        int index121_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_InternalCypherParser()) ) {s = 100;}

                        else if ( (synpred171_InternalCypherParser()) ) {s = 101;}

                         
                        input.seek(index121_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA121_23 = input.LA(1);

                         
                        int index121_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA121_24 = input.LA(1);

                         
                        int index121_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA121_25 = input.LA(1);

                         
                        int index121_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA121_26 = input.LA(1);

                         
                        int index121_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA121_27 = input.LA(1);

                         
                        int index121_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA121_28 = input.LA(1);

                         
                        int index121_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA121_29 = input.LA(1);

                         
                        int index121_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_29);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA121_30 = input.LA(1);

                         
                        int index121_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA121_31 = input.LA(1);

                         
                        int index121_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA121_32 = input.LA(1);

                         
                        int index121_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA121_33 = input.LA(1);

                         
                        int index121_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA121_34 = input.LA(1);

                         
                        int index121_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA121_35 = input.LA(1);

                         
                        int index121_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA121_36 = input.LA(1);

                         
                        int index121_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA121_37 = input.LA(1);

                         
                        int index121_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA121_38 = input.LA(1);

                         
                        int index121_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA121_39 = input.LA(1);

                         
                        int index121_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA121_40 = input.LA(1);

                         
                        int index121_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA121_41 = input.LA(1);

                         
                        int index121_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA121_42 = input.LA(1);

                         
                        int index121_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA121_43 = input.LA(1);

                         
                        int index121_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA121_44 = input.LA(1);

                         
                        int index121_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA121_45 = input.LA(1);

                         
                        int index121_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA121_46 = input.LA(1);

                         
                        int index121_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA121_47 = input.LA(1);

                         
                        int index121_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_47);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA121_48 = input.LA(1);

                         
                        int index121_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_48);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA121_49 = input.LA(1);

                         
                        int index121_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA121_50 = input.LA(1);

                         
                        int index121_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_50);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA121_51 = input.LA(1);

                         
                        int index121_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_51);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA121_52 = input.LA(1);

                         
                        int index121_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA121_53 = input.LA(1);

                         
                        int index121_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_53);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA121_54 = input.LA(1);

                         
                        int index121_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA121_55 = input.LA(1);

                         
                        int index121_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_55);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA121_56 = input.LA(1);

                         
                        int index121_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_56);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA121_57 = input.LA(1);

                         
                        int index121_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA121_58 = input.LA(1);

                         
                        int index121_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_58);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA121_59 = input.LA(1);

                         
                        int index121_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_59);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA121_60 = input.LA(1);

                         
                        int index121_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_60);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA121_61 = input.LA(1);

                         
                        int index121_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_61);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA121_62 = input.LA(1);

                         
                        int index121_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_62);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA121_63 = input.LA(1);

                         
                        int index121_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_63);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA121_64 = input.LA(1);

                         
                        int index121_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_64);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA121_65 = input.LA(1);

                         
                        int index121_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_65);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA121_66 = input.LA(1);

                         
                        int index121_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_66);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA121_67 = input.LA(1);

                         
                        int index121_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_67);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA121_68 = input.LA(1);

                         
                        int index121_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_68);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA121_69 = input.LA(1);

                         
                        int index121_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_69);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA121_70 = input.LA(1);

                         
                        int index121_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_70);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA121_71 = input.LA(1);

                         
                        int index121_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_71);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA121_72 = input.LA(1);

                         
                        int index121_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_72);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA121_73 = input.LA(1);

                         
                        int index121_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_73);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA121_74 = input.LA(1);

                         
                        int index121_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_74);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA121_75 = input.LA(1);

                         
                        int index121_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_75);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA121_76 = input.LA(1);

                         
                        int index121_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_76);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA121_77 = input.LA(1);

                         
                        int index121_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_77);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA121_78 = input.LA(1);

                         
                        int index121_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_78);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA121_79 = input.LA(1);

                         
                        int index121_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_79);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA121_80 = input.LA(1);

                         
                        int index121_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_80);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA121_81 = input.LA(1);

                         
                        int index121_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_81);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA121_82 = input.LA(1);

                         
                        int index121_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_82);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA121_83 = input.LA(1);

                         
                        int index121_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_83);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA121_84 = input.LA(1);

                         
                        int index121_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index121_84);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\102\uffff";
    static final String dfa_103s = "\1\1\101\uffff";
    static final String dfa_104s = "\1\11\16\uffff\1\0\2\uffff\1\0\57\uffff";
    static final String dfa_105s = "\1\155\16\uffff\1\0\2\uffff\1\0\57\uffff";
    static final String dfa_106s = "\1\uffff\1\2\77\uffff\1\1";
    static final String dfa_107s = "\17\uffff\1\0\2\uffff\1\1\57\uffff}>";
    static final String[] dfa_108s = {
            "\3\1\1\uffff\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\10\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\6\1\1\uffff\4\1\2\uffff\1\1\1\uffff\4\1\1\17\4\1\1\22\2\1\1\uffff\3\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[][] dfa_108 = unpackEncodedStringArray(dfa_108s);

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = dfa_102;
            this.eof = dfa_103;
            this.min = dfa_104;
            this.max = dfa_105;
            this.accept = dfa_106;
            this.special = dfa_107;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "()+ loopback of 8597:3: ( (lv_chain_1_0= rulePatternElementChain ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_15 = input.LA(1);

                         
                        int index126_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_InternalCypherParser()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_18 = input.LA(1);

                         
                        int index126_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_InternalCypherParser()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_109s = "\115\115\2\uffff";
    static final String[] dfa_110s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\20\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "",
            ""
    };
    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final short[][] dfa_110 = unpackEncodedStringArray(dfa_110s);

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = dfa_56;
            this.eof = dfa_109;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_59;
            this.special = dfa_60;
            this.transition = dfa_110;
        }
        public String getDescription() {
            return "()* loopback of 9109:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )*";
        }
    }
    static final String dfa_111s = "\1\uffff\114\115\2\uffff";
    static final String dfa_112s = "\1\4\114\11\2\uffff";
    static final String dfa_113s = "\1\156\114\155\2\uffff";
    static final String[] dfa_114s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\10\115\1\uffff\1\115\1\uffff\4\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "",
            ""
    };
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final char[] dfa_113 = DFA.unpackEncodedStringToUnsignedChars(dfa_113s);
    static final short[][] dfa_114 = unpackEncodedStringArray(dfa_114s);

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_56;
            this.eof = dfa_111;
            this.min = dfa_112;
            this.max = dfa_113;
            this.accept = dfa_59;
            this.special = dfa_60;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "9332:3: ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0084958463422002L,0x0000000000000201L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0084958463422002L,0x0000000800000201L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000888002L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF2L,0x00384000007E07FFL});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF2L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000002L,0x0038000000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000203L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0080848440002000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0080858423422000L,0x0000000000000200L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0080858463422002L,0x0000000000000200L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0080858423422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900057E07FFL});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000004004000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900A57E07FFL});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000047E07FFL});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000300000000002L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000008000400000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000010023420000L,0x0000000000000200L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000010023420000L,0x0000000008000200L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000807E07FFL});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900B57E07FFL});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x1000024000000002L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x1000004000000002L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0002000000000602L,0x0000000000000010L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000200000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0100000000000040L,0x0000000000000100L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000404000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0004080000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0004000001000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0038000011000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0038000000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000002L,0x0000001080000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004804097E07FFL});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000080409000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000080009000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000011080000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004A84117E07FFL});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x00000A8411000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x00000A0411000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x00000A0011000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x00000A0001000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004004007E07FFL});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0038000000001000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000002L,0x0000007000016000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000002L,0x00000000A0000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000002L,0x0000000212000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0010000100000802L,0x0000010000188000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900A57E17FFL});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4B00A57E07FFL});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000002L,0x0000000500000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000100008000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000000L,0x0000020040000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900AD7E07FFL});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000000048000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000200000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000000L,0x0000008000800000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x8008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00006000007E07FFL});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00384000007E07FFL});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x8000000000000002L});

}
