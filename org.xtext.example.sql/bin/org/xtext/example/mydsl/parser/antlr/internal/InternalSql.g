/*
 * generated by Xtext 2.27.0
 */
grammar InternalSql;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.SqlGrammarAccess;

}

@parser::members {

 	private SqlGrammarAccess grammarAccess;

    public InternalSqlParser(TokenStream input, SqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getQueriesQueryParserRuleCall_0());
			}
			lv_queries_0_0=ruleQuery
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"queries",
					lv_queries_0_0,
					"org.xtext.example.mydsl.Sql.Query");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getSelectClauseSelectSectionParserRuleCall_0_0());
				}
				lv_selectClause_0_0=ruleSelectSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"selectClause",
						lv_selectClause_0_0,
						"org.xtext.example.mydsl.Sql.SelectSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getFromClauseFromSectionParserRuleCall_1_0());
				}
				lv_fromClause_1_0=rulefromSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"fromClause",
						lv_fromClause_1_0,
						"org.xtext.example.mydsl.Sql.fromSection");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getWhereClauseWhereClauseParserRuleCall_2_0());
				}
				lv_whereClause_2_0=ruleWhereClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"whereClause",
						lv_whereClause_2_0,
						"org.xtext.example.mydsl.Sql.WhereClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getGroupClauseGroupClauseParserRuleCall_3_0());
				}
				lv_groupClause_3_0=ruleGroupClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"groupClause",
						lv_groupClause_3_0,
						"org.xtext.example.mydsl.Sql.GroupClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getHavingClauseHavingClauseParserRuleCall_4_0());
				}
				lv_havingClause_4_0=ruleHavingClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"havingClause",
						lv_havingClause_4_0,
						"org.xtext.example.mydsl.Sql.HavingClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getQueryAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleSelectSection
entryRuleSelectSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectSectionRule()); }
	iv_ruleSelectSection=ruleSelectSection
	{ $current=$iv_ruleSelectSection.current; }
	EOF;

// Rule SelectSection
ruleSelectSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SELECT'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectSectionAccess().getSELECTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectSectionAccess().getExpressionsExpressionParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectSectionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_1_0,
						"org.xtext.example.mydsl.Sql.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectSectionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectSectionAccess().getExpressionsExpressionParserRuleCall_2_1_0());
					}
					lv_expressions_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectSectionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"org.xtext.example.mydsl.Sql.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulefromSection
entryRulefromSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromSectionRule()); }
	iv_rulefromSection=rulefromSection
	{ $current=$iv_rulefromSection.current; }
	EOF;

// Rule fromSection
rulefromSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FROM'
		{
			newLeafNode(otherlv_0, grammarAccess.getFromSectionAccess().getFROMKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFromSectionAccess().getFromItemFromItemParserRuleCall_1_0());
				}
				lv_fromItem_1_0=ruleFromItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFromSectionRule());
					}
					set(
						$current,
						"fromItem",
						lv_fromItem_1_0,
						"org.xtext.example.mydsl.Sql.FromItem");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFromItem
entryRuleFromItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromItemRule()); }
	iv_ruleFromItem=ruleFromItem
	{ $current=$iv_ruleFromItem.current; }
	EOF;

// Rule FromItem
ruleFromItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFromItemAccess().getTblTableParserRuleCall_0_0_0());
					}
					lv_tbl_0_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFromItemRule());
						}
						add(
							$current,
							"tbl",
							lv_tbl_0_0,
							"org.xtext.example.mydsl.Sql.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='JOIN'
				{
					newLeafNode(otherlv_1, grammarAccess.getFromItemAccess().getJOINKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFromItemAccess().getTblTableParserRuleCall_0_1_1_0());
						}
						lv_tbl_2_0=ruleTable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFromItemRule());
							}
							add(
								$current,
								"tbl",
								lv_tbl_2_0,
								"org.xtext.example.mydsl.Sql.Table");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3='ON'
				{
					newLeafNode(otherlv_3, grammarAccess.getFromItemAccess().getONKeyword_0_1_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFromItemAccess().getExpressionsExpressionParserRuleCall_0_1_3_0());
						}
						lv_expressions_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFromItemRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_4_0,
								"org.xtext.example.mydsl.Sql.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getFromItemAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFromItemAccess().getSelect_exprSelectSectionParserRuleCall_1_1_0());
					}
					lv_select_expr_6_0=ruleSelectSection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFromItemRule());
						}
						set(
							$current,
							"select_expr",
							lv_select_expr_6_0,
							"org.xtext.example.mydsl.Sql.SelectSection");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getFromItemAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhereClauseRule()); }
	iv_ruleWhereClause=ruleWhereClause
	{ $current=$iv_ruleWhereClause.current; }
	EOF;

// Rule WhereClause
ruleWhereClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WHERE'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhereClauseAccess().getWHEREKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhereClauseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.Sql.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolExpression
entryRuleBoolExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolExpressionRule()); }
	iv_ruleBoolExpression=ruleBoolExpression
	{ $current=$iv_ruleBoolExpression.current; }
	EOF;

// Rule BoolExpression
ruleBoolExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolExpressionAccess().getLhsTermParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.example.mydsl.Sql.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='OR'
			{
				newLeafNode(otherlv_1, grammarAccess.getBoolExpressionAccess().getORKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExpressionAccess().getRhsTermParserRuleCall_1_1_0());
					}
					lv_rhs_2_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_2_0,
							"org.xtext.example.mydsl.Sql.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getLhsFactorParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleFactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.example.mydsl.Sql.Factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='AND'
			{
				newLeafNode(otherlv_1, grammarAccess.getTermAccess().getANDKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRhsFactorParserRuleCall_1_1_0());
					}
					lv_rhs_2_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_2_0,
							"org.xtext.example.mydsl.Sql.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='NOT'
			{
				newLeafNode(otherlv_0, grammarAccess.getFactorAccess().getNOTKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_0_1_0());
					}
					lv_factor_1_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"factor",
							lv_factor_1_0,
							"org.xtext.example.mydsl.Sql.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExprBoolExpressionParserRuleCall_1_1_0());
					}
					lv_expr_3_0=ruleBoolExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"org.xtext.example.mydsl.Sql.BoolExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		otherlv_5='TRUE'
		{
			newLeafNode(otherlv_5, grammarAccess.getFactorAccess().getTRUEKeyword_2());
		}
		    |
		otherlv_6='FALSE'
		{
			newLeafNode(otherlv_6, grammarAccess.getFactorAccess().getFALSEKeyword_3());
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getBinexpBinaryParserRuleCall_4_0());
				}
				lv_binexp_7_0=ruleBinary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"binexp",
						lv_binexp_7_0,
						"org.xtext.example.mydsl.Sql.Binary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinary
entryRuleBinary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryRule()); }
	iv_ruleBinary=ruleBinary
	{ $current=$iv_ruleBinary.current; }
	EOF;

// Rule Binary
ruleBinary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryAccess().getLhsPropertyOrRelationAttributeExpressionParserRuleCall_0_0());
				}
				lv_lhs_0_0=rulePropertyOrRelationAttributeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.example.mydsl.Sql.PropertyOrRelationAttributeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getBinaryAccess().getLessThanSignKeyword_1_0());
			}
			    |
			otherlv_2='>'
			{
				newLeafNode(otherlv_2, grammarAccess.getBinaryAccess().getGreaterThanSignKeyword_1_1());
			}
			    |
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getBinaryAccess().getEqualsSignKeyword_1_2());
			}
			    |
			otherlv_4='>='
			{
				newLeafNode(otherlv_4, grammarAccess.getBinaryAccess().getGreaterThanSignEqualsSignKeyword_1_3());
			}
			    |
			otherlv_5='<='
			{
				newLeafNode(otherlv_5, grammarAccess.getBinaryAccess().getLessThanSignEqualsSignKeyword_1_4());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryAccess().getRhsPropertyOrRelationAttributeExpressionParserRuleCall_2_0());
				}
				lv_rhs_6_0=rulePropertyOrRelationAttributeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_6_0,
						"org.xtext.example.mydsl.Sql.PropertyOrRelationAttributeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGroupClause
entryRuleGroupClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupClauseRule()); }
	iv_ruleGroupClause=ruleGroupClause
	{ $current=$iv_ruleGroupClause.current; }
	EOF;

// Rule GroupClause
ruleGroupClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GROUP'
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupClauseAccess().getGROUPKeyword_0());
		}
		otherlv_1='BY'
		{
			newLeafNode(otherlv_1, grammarAccess.getGroupClauseAccess().getBYKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupClauseAccess().getExpressionsExpressionParserRuleCall_2_0());
				}
				lv_expressions_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupClauseRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_2_0,
						"org.xtext.example.mydsl.Sql.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getGroupClauseAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGroupClauseAccess().getExpressionsExpressionParserRuleCall_3_1_0());
					}
					lv_expressions_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGroupClauseRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_4_0,
							"org.xtext.example.mydsl.Sql.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHavingClause
entryRuleHavingClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHavingClauseRule()); }
	iv_ruleHavingClause=ruleHavingClause
	{ $current=$iv_ruleHavingClause.current; }
	EOF;

// Rule HavingClause
ruleHavingClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='HAVING'
		{
			newLeafNode(otherlv_0, grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHavingClauseAccess().getExprBoolExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHavingClauseRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.example.mydsl.Sql.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0());
		}
		this_XorExpression_0=ruleXorExpression
		{
			$current = $this_XorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='OR'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "OR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='XOR'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXorExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "XOR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0());
		}
		this_NotExpression_0=ruleNotExpression
		{
			$current = $this_NotExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='AND'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "AND");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleNotExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.NotExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	iv_ruleNotExpression=ruleNotExpression
	{ $current=$iv_ruleNotExpression.current; }
	EOF;

// Rule NotExpression
ruleNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_operator_1_0='NOT'
					{
						newLeafNode(lv_operator_1_0, grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNotExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_1_0, "NOT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0());
					}
					lv_left_2_0=ruleNotExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotExpressionRule());
						}
						set(
							$current,
							"left",
							lv_left_2_0,
							"org.xtext.example.mydsl.Sql.NotExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1());
		}
		this_ComparisonExpression_3=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0());
		}
		this_AddOrSubtractExpression_0=ruleAddOrSubtractExpression
		{
			$current = $this_AddOrSubtractExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='='
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='<>'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='<'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4='>'
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
						    |
						lv_operator_2_5='<='
						{
							newLeafNode(lv_operator_2_5, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_5, null);
						}
						    |
						lv_operator_2_6='>='
						{
							newLeafNode(lv_operator_2_6, grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_6, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddOrSubtractExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.AddOrSubtractExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddOrSubtractExpression
entryRuleAddOrSubtractExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddOrSubtractExpressionRule()); }
	iv_ruleAddOrSubtractExpression=ruleAddOrSubtractExpression
	{ $current=$iv_ruleAddOrSubtractExpression.current; }
	EOF;

// Rule AddOrSubtractExpression
ruleAddOrSubtractExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0());
		}
		this_MultiplyDivideModuloExpression_0=ruleMultiplyDivideModuloExpression
		{
			$current = $this_MultiplyDivideModuloExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddOrSubtractExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddOrSubtractExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplyDivideModuloExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddOrSubtractExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.MultiplyDivideModuloExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplyDivideModuloExpression
entryRuleMultiplyDivideModuloExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyDivideModuloExpressionRule()); }
	iv_ruleMultiplyDivideModuloExpression=ruleMultiplyDivideModuloExpression
	{ $current=$iv_ruleMultiplyDivideModuloExpression.current; }
	EOF;

// Rule MultiplyDivideModuloExpression
ruleMultiplyDivideModuloExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0());
		}
		this_PowerOfExpression_0=rulePowerOfExpression
		{
			$current = $this_PowerOfExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplyDivideModuloExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplyDivideModuloExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='%'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplyDivideModuloExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePowerOfExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplyDivideModuloExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.PowerOfExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePowerOfExpression
entryRulePowerOfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerOfExpressionRule()); }
	iv_rulePowerOfExpression=rulePowerOfExpression
	{ $current=$iv_rulePowerOfExpression.current; }
	EOF;

// Rule PowerOfExpression
rulePowerOfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0());
		}
		this_UnaryAddOrSubtractExpression_0=ruleUnaryAddOrSubtractExpression
		{
			$current = $this_UnaryAddOrSubtractExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='^'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPowerOfExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "^");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryAddOrSubtractExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPowerOfExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sql.UnaryAddOrSubtractExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryAddOrSubtractExpression
entryRuleUnaryAddOrSubtractExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryAddOrSubtractExpressionRule()); }
	iv_ruleUnaryAddOrSubtractExpression=ruleUnaryAddOrSubtractExpression
	{ $current=$iv_ruleUnaryAddOrSubtractExpression.current; }
	EOF;

// Rule UnaryAddOrSubtractExpression
ruleUnaryAddOrSubtractExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0());
		}
		this_StringListNullOperatorExpression_0=ruleStringListNullOperatorExpression
		{
			$current = $this_StringListNullOperatorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnaryAddOrSubtractExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnaryAddOrSubtractExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0());
					}
					lv_left_3_0=ruleUnaryAddOrSubtractExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryAddOrSubtractExpressionRule());
						}
						set(
							$current,
							"left",
							lv_left_3_0,
							"org.xtext.example.mydsl.Sql.UnaryAddOrSubtractExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStringListNullOperatorExpression
entryRuleStringListNullOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringListNullOperatorExpressionRule()); }
	iv_ruleStringListNullOperatorExpression=ruleStringListNullOperatorExpression
	{ $current=$iv_ruleStringListNullOperatorExpression.current; }
	EOF;

// Rule StringListNullOperatorExpression
ruleStringListNullOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrRelationAttributeExpressionParserRuleCall_0());
		}
		this_PropertyOrRelationAttributeExpression_0=rulePropertyOrRelationAttributeExpression
		{
			$current = $this_PropertyOrRelationAttributeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0());
						}
						lv_expressions_2_1=ruleStringOperatorExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringListNullOperatorExpressionRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_2_1,
								"org.xtext.example.mydsl.Sql.StringOperatorExpression");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_1());
						}
						lv_expressions_2_2=ruleNullOperatorExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringListNullOperatorExpressionRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_2_2,
								"org.xtext.example.mydsl.Sql.NullOperatorExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleStringOperatorExpression
entryRuleStringOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringOperatorExpressionRule()); }
	iv_ruleStringOperatorExpression=ruleStringOperatorExpression
	{ $current=$iv_ruleStringOperatorExpression.current; }
	EOF;

// Rule StringOperatorExpression
ruleStringOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0(),
							$current);
					}
				)
				otherlv_1='=~'
				{
					newLeafNode(otherlv_1, grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0(),
							$current);
					}
				)
				otherlv_3='IN'
				{
					newLeafNode(otherlv_3, grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0(),
							$current);
					}
				)
				otherlv_5='STARTS'
				{
					newLeafNode(otherlv_5, grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1());
				}
				otherlv_6='WITH'
				{
					newLeafNode(otherlv_6, grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0(),
							$current);
					}
				)
				otherlv_8='ENDS'
				{
					newLeafNode(otherlv_8, grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1());
				}
				otherlv_9='WITH'
				{
					newLeafNode(otherlv_9, grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0(),
							$current);
					}
				)
				otherlv_11='CONTAINS'
				{
					newLeafNode(otherlv_11, grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrRelationAttributeExpressionParserRuleCall_1_0());
				}
				lv_right_12_0=rulePropertyOrRelationAttributeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringOperatorExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_12_0,
						"org.xtext.example.mydsl.Sql.PropertyOrRelationAttributeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNullOperatorExpression
entryRuleNullOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullOperatorExpressionRule()); }
	iv_ruleNullOperatorExpression=ruleNullOperatorExpression
	{ $current=$iv_ruleNullOperatorExpression.current; }
	EOF;

// Rule NullOperatorExpression
ruleNullOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0(),
						$current);
				}
			)
			otherlv_1='IS'
			{
				newLeafNode(otherlv_1, grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1());
			}
			otherlv_2='NULL'
			{
				newLeafNode(otherlv_2, grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0(),
						$current);
				}
			)
			otherlv_4='IS'
			{
				newLeafNode(otherlv_4, grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1());
			}
			otherlv_5='NOT'
			{
				newLeafNode(otherlv_5, grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2());
			}
			otherlv_6='NULL'
			{
				newLeafNode(otherlv_6, grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRulePropertyOrRelationAttributeExpression
entryRulePropertyOrRelationAttributeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyOrRelationAttributeExpressionRule()); }
	iv_rulePropertyOrRelationAttributeExpression=rulePropertyOrRelationAttributeExpression
	{ $current=$iv_rulePropertyOrRelationAttributeExpression.current; }
	EOF;

// Rule PropertyOrRelationAttributeExpression
rulePropertyOrRelationAttributeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAtomParserRuleCall_0());
		}
		this_Atom_0=ruleAtom
		{
			$current = $this_Atom_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAttributeLookupAttributeLookupParserRuleCall_1_0());
				}
				lv_attributeLookup_1_0=ruleAttributeLookup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyOrRelationAttributeExpressionRule());
					}
					set(
						$current,
						"attributeLookup",
						lv_attributeLookup_1_0,
						"org.xtext.example.mydsl.Sql.AttributeLookup");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAttributeLookup
entryRuleAttributeLookup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeLookupRule()); }
	iv_ruleAttributeLookup=ruleAttributeLookup
	{ $current=$iv_ruleAttributeLookup.current; }
	EOF;

// Rule AttributeLookup
ruleAttributeLookup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeLookupAccess().getFullStopKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeLookupAccess().getAttributeKeyNameAttributeKeyNameParserRuleCall_1_0());
				}
				lv_attributeKeyName_1_0=ruleAttributeKeyName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeLookupRule());
					}
					set(
						$current,
						"attributeKeyName",
						lv_attributeKeyName_1_0,
						"org.xtext.example.mydsl.Sql.AttributeKeyName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeKeyName
entryRuleAttributeKeyName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAttributeKeyNameRule()); }
	iv_ruleAttributeKeyName=ruleAttributeKeyName
	{ $current=$iv_ruleAttributeKeyName.current.getText(); }
	EOF;

// Rule AttributeKeyName
ruleAttributeKeyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAttributeKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
	}
	this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X
	{
		$current.merge(this_SYMBOLIC_NAME_X_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomAccess().getCountAction_1_0(),
						$current);
				}
			)
			otherlv_2='COUNT'
			{
				newLeafNode(otherlv_2, grammarAccess.getAtomAccess().getCOUNTKeyword_1_1());
			}
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_2());
			}
			otherlv_4='*'
			{
				newLeafNode(otherlv_4, grammarAccess.getAtomAccess().getAsteriskKeyword_1_3());
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomAccess().getVariableRefAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationParserRuleCall_2_1_0());
					}
					lv_variableRef_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomRule());
						}
						set(
							$current,
							"variableRef",
							lv_variableRef_7_0,
							"org.xtext.example.mydsl.Sql.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_3());
		}
		this_FunctionInvocation_8=ruleFunctionInvocation
		{
			$current = $this_FunctionInvocation_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionInvocation
entryRuleFunctionInvocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionInvocationRule()); }
	iv_ruleFunctionInvocation=ruleFunctionInvocation
	{ $current=$iv_ruleFunctionInvocation.current; }
	EOF;

// Rule FunctionInvocation
ruleFunctionInvocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0());
				}
				lv_functionName_0_0=ruleFunctionName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
					}
					set(
						$current,
						"functionName",
						lv_functionName_0_0,
						"org.xtext.example.mydsl.Sql.FunctionName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_2_0_0());
					}
					lv_parameter_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
						}
						add(
							$current,
							"parameter",
							lv_parameter_2_0,
							"org.xtext.example.mydsl.Sql.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionInvocationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0());
						}
						lv_parameter_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_4_0,
								"org.xtext.example.mydsl.Sql.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current.getText(); }
	EOF;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
	}
	this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X
	{
		$current.merge(this_SYMBOLIC_NAME_X_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_0());
			}
			lv_name_0_0=ruleSYMBOLIC_NAME_X
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"org.xtext.example.mydsl.Sql.SYMBOLIC_NAME_X");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0());
		}
		this_NumberLiteral_0=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1());
		}
		this_StringLiteral_1=ruleStringLiteral
		{
			$current = $this_StringLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2());
		}
		this_BooleanLiteral_2=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_1='TRUE'
					{
						newLeafNode(lv_value_1_1, grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanLiteralRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_1, null);
					}
					    |
					lv_value_1_2='FALSE'
					{
						newLeafNode(lv_value_1_2, grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanLiteralRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_2, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING_LITERAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.Sql.STRING_LITERAL");
			}
		)
	)
;

// Entry rule entryRuleSYMBOLIC_NAME_X
entryRuleSYMBOLIC_NAME_X returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSYMBOLIC_NAME_XRule()); }
	iv_ruleSYMBOLIC_NAME_X=ruleSYMBOLIC_NAME_X
	{ $current=$iv_ruleSYMBOLIC_NAME_X.current.getText(); }
	EOF;

// Rule SYMBOLIC_NAME_X
ruleSYMBOLIC_NAME_X returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0());
			}
			lv_value_0_0=ruleNumber
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.Sql.Number");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_HEX_0=RULE_HEX
		{
			$current.merge(this_HEX_0);
		}
		{
			newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0());
		}
		    |
		(
			(
				this_INT_1=RULE_INT
				{
					$current.merge(this_INT_1);
				}
				{
					newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0());
				}
				    |
				this_DECIMAL_2=RULE_DECIMAL
				{
					$current.merge(this_DECIMAL_2);
				}
				{
					newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1());
				}
			)
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0());
				}
				(
					this_INT_4=RULE_INT
					{
						$current.merge(this_INT_4);
					}
					{
						newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0());
					}
					    |
					this_DECIMAL_5=RULE_DECIMAL
					{
						$current.merge(this_DECIMAL_5);
					}
					{
						newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1());
					}
				)
			)?
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_STRING_LITERAL : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_HEX : ('0x'|'0X') ('0'..'9'|'A'..'F')+;

RULE_INT : '0'..'9' ('0'..'9')*;

RULE_DECIMAL : RULE_INT ('e' ('+'|'-')? RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
