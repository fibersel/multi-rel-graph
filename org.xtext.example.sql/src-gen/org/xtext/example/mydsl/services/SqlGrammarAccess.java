/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SqlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Model");
		private final Assignment cQueriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQueriesQueryParserRuleCall_0 = (RuleCall)cQueriesAssignment.eContents().get(0);
		
		//Model:
		//    (queries+=Query)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(queries+=Query)*
		public Assignment getQueriesAssignment() { return cQueriesAssignment; }
		
		//Query
		public RuleCall getQueriesQueryParserRuleCall_0() { return cQueriesQueryParserRuleCall_0; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectClauseSelectSectionParserRuleCall_0_0 = (RuleCall)cSelectClauseAssignment_0.eContents().get(0);
		private final Assignment cFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromClauseFromSectionParserRuleCall_1_0 = (RuleCall)cFromClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		private final Assignment cGroupClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_3_0 = (RuleCall)cGroupClauseAssignment_3.eContents().get(0);
		private final Assignment cHavingClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_4_0 = (RuleCall)cHavingClauseAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Query:
		//    selectClause=SelectSection
		//    (fromClause=fromSection)?
		//    (whereClause=WhereClause)?
		//    (groupClause=GroupClause)?
		//    (havingClause=HavingClause)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//selectClause=SelectSection
		//(fromClause=fromSection)?
		//(whereClause=WhereClause)?
		//(groupClause=GroupClause)?
		//(havingClause=HavingClause)? ';'
		public Group getGroup() { return cGroup; }
		
		//selectClause=SelectSection
		public Assignment getSelectClauseAssignment_0() { return cSelectClauseAssignment_0; }
		
		//SelectSection
		public RuleCall getSelectClauseSelectSectionParserRuleCall_0_0() { return cSelectClauseSelectSectionParserRuleCall_0_0; }
		
		//(fromClause=fromSection)?
		public Assignment getFromClauseAssignment_1() { return cFromClauseAssignment_1; }
		
		//fromSection
		public RuleCall getFromClauseFromSectionParserRuleCall_1_0() { return cFromClauseFromSectionParserRuleCall_1_0; }
		
		//(whereClause=WhereClause)?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }
		
		//(groupClause=GroupClause)?
		public Assignment getGroupClauseAssignment_3() { return cGroupClauseAssignment_3; }
		
		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_3_0() { return cGroupClauseGroupClauseParserRuleCall_3_0; }
		
		//(havingClause=HavingClause)?
		public Assignment getHavingClauseAssignment_4() { return cHavingClauseAssignment_4; }
		
		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_4_0() { return cHavingClauseHavingClauseParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SelectSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.SelectSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		
		//SelectSection:
		//    'SELECT' expressions+=Expression (',' expressions+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' expressions+=Expression (',' expressions+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_1_0() { return cExpressionsExpressionParserRuleCall_2_1_0; }
	}
	public class FromSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.fromSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromItemFromItemParserRuleCall_1_0 = (RuleCall)cFromItemAssignment_1.eContents().get(0);
		
		//fromSection:
		//    'FROM' fromItem=FromItem;
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' fromItem=FromItem
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//fromItem=FromItem
		public Assignment getFromItemAssignment_1() { return cFromItemAssignment_1; }
		
		//FromItem
		public RuleCall getFromItemFromItemParserRuleCall_1_0() { return cFromItemFromItemParserRuleCall_1_0; }
	}
	public class FromItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.FromItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTblAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTblTableParserRuleCall_0_0_0 = (RuleCall)cTblAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cJOINKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTblAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTblTableParserRuleCall_0_1_1_0 = (RuleCall)cTblAssignment_0_1_1.eContents().get(0);
		private final Keyword cONKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cExpressionsAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_1_3_0 = (RuleCall)cExpressionsAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelect_exprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelect_exprSelectSectionParserRuleCall_1_1_0 = (RuleCall)cSelect_exprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//FromItem:
		//    tbl+=Table ('JOIN' tbl+=Table 'ON' expressions+=Expression)* | '('select_expr=SelectSection')';
		@Override public ParserRule getRule() { return rule; }
		
		//tbl+=Table ('JOIN' tbl+=Table 'ON' expressions+=Expression)* | '('select_expr=SelectSection')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tbl+=Table ('JOIN' tbl+=Table 'ON' expressions+=Expression)*
		public Group getGroup_0() { return cGroup_0; }
		
		//tbl+=Table
		public Assignment getTblAssignment_0_0() { return cTblAssignment_0_0; }
		
		//Table
		public RuleCall getTblTableParserRuleCall_0_0_0() { return cTblTableParserRuleCall_0_0_0; }
		
		//('JOIN' tbl+=Table 'ON' expressions+=Expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'JOIN'
		public Keyword getJOINKeyword_0_1_0() { return cJOINKeyword_0_1_0; }
		
		//tbl+=Table
		public Assignment getTblAssignment_0_1_1() { return cTblAssignment_0_1_1; }
		
		//Table
		public RuleCall getTblTableParserRuleCall_0_1_1_0() { return cTblTableParserRuleCall_0_1_1_0; }
		
		//'ON'
		public Keyword getONKeyword_0_1_2() { return cONKeyword_0_1_2; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_0_1_3() { return cExpressionsAssignment_0_1_3; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_1_3_0() { return cExpressionsExpressionParserRuleCall_0_1_3_0; }
		
		//'('select_expr=SelectSection')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//select_expr=SelectSection
		public Assignment getSelect_exprAssignment_1_1() { return cSelect_exprAssignment_1_1; }
		
		//SelectSection
		public RuleCall getSelect_exprSelectSectionParserRuleCall_1_1_0() { return cSelect_exprSelectSectionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Table");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Table:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//WhereClause:
		//    'WHERE' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.BoolExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsTermParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsTermParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BoolExpression returns Expression:
		//    lhs=Term ('OR' rhs=Term)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=Term ('OR' rhs=Term)?
		public Group getGroup() { return cGroup; }
		
		//lhs=Term
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//Term
		public RuleCall getLhsTermParserRuleCall_0_0() { return cLhsTermParserRuleCall_0_0; }
		
		//('OR' rhs=Term)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//rhs=Term
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Term
		public RuleCall getRhsTermParserRuleCall_1_1_0() { return cRhsTermParserRuleCall_1_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsFactorParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsFactorParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Term returns Expression:
		//    lhs=Factor ('AND' rhs=Factor)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=Factor ('AND' rhs=Factor)?
		public Group getGroup() { return cGroup; }
		
		//lhs=Factor
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//Factor
		public RuleCall getLhsFactorParserRuleCall_0_0() { return cLhsFactorParserRuleCall_0_0; }
		
		//('AND' rhs=Factor)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//rhs=Factor
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Factor
		public RuleCall getRhsFactorParserRuleCall_1_1_0() { return cRhsFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFactorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_0_1_0 = (RuleCall)cFactorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprBoolExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFALSEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Assignment cBinexpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cBinexpBinaryParserRuleCall_4_0 = (RuleCall)cBinexpAssignment_4.eContents().get(0);
		
		//Factor returns Expression:
		//    'NOT' factor=Factor | '('expr=BoolExpression ')' | 'TRUE' | 'FALSE' | binexp=Binary;
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT' factor=Factor | '('expr=BoolExpression ')' | 'TRUE' | 'FALSE' | binexp=Binary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NOT' factor=Factor
		public Group getGroup_0() { return cGroup_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//factor=Factor
		public Assignment getFactorAssignment_0_1() { return cFactorAssignment_0_1; }
		
		//Factor
		public RuleCall getFactorFactorParserRuleCall_0_1_0() { return cFactorFactorParserRuleCall_0_1_0; }
		
		//'('expr=BoolExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expr=BoolExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//BoolExpression
		public RuleCall getExprBoolExpressionParserRuleCall_1_1_0() { return cExprBoolExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_3() { return cFALSEKeyword_3; }
		
		//binexp=Binary
		public Assignment getBinexpAssignment_4() { return cBinexpAssignment_4; }
		
		//Binary
		public RuleCall getBinexpBinaryParserRuleCall_4_0() { return cBinexpBinaryParserRuleCall_4_0; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPropertyOrRelationAttributeExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPropertyOrRelationAttributeExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//Binary returns Expression:
		//    lhs=PropertyOrRelationAttributeExpression ('<' | '>' | '=' | '>=' | '<=') rhs=PropertyOrRelationAttributeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=PropertyOrRelationAttributeExpression ('<' | '>' | '=' | '>=' | '<=') rhs=PropertyOrRelationAttributeExpression
		public Group getGroup() { return cGroup; }
		
		//lhs=PropertyOrRelationAttributeExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//PropertyOrRelationAttributeExpression
		public RuleCall getLhsPropertyOrRelationAttributeExpressionParserRuleCall_0_0() { return cLhsPropertyOrRelationAttributeExpressionParserRuleCall_0_0; }
		
		//('<' | '>' | '=' | '>=' | '<=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_3() { return cGreaterThanSignEqualsSignKeyword_1_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_4() { return cLessThanSignEqualsSignKeyword_1_4; }
		
		//rhs=PropertyOrRelationAttributeExpression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//PropertyOrRelationAttributeExpression
		public RuleCall getRhsPropertyOrRelationAttributeExpressionParserRuleCall_2_0() { return cRhsPropertyOrRelationAttributeExpressionParserRuleCall_2_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Column");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Column:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GroupClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.GroupClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		
		//GroupClause:
		//    'GROUP' 'BY' expressions+=Expression (',' expressions+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'GROUP' 'BY' expressions+=Expression (',' expressions+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }
		
		//'BY'
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }
	}
	public class HavingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.HavingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHAVINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprBoolExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//HavingClause:
		//    'HAVING' expr=BoolExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'HAVING' expr=BoolExpression
		public Group getGroup() { return cGroup; }
		
		//'HAVING'
		public Keyword getHAVINGKeyword_0() { return cHAVINGKeyword_0; }
		
		//expr=BoolExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//BoolExpression
		public RuleCall getExprBoolExpressionParserRuleCall_1_0() { return cExprBoolExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Expression:
		////    '*' | col=Column | 'count()' | 'sum('col=Column')';
		//Expression:
		//    OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorORKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//    XorExpression ({OrExpression.left=current} operator='OR' right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({OrExpression.left=current} operator='OR' right=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} operator='OR' right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//operator='OR'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'OR'
		public Keyword getOperatorORKeyword_1_1_0() { return cOperatorORKeyword_1_1_0; }
		
		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorXORKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression returns Expression:
		//    AndExpression ({XorExpression.left=current} operator='XOR' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({XorExpression.left=current} operator='XOR' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({XorExpression.left=current} operator='XOR' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XorExpression.left=current}
		public Action getXorExpressionLeftAction_1_0() { return cXorExpressionLeftAction_1_0; }
		
		//operator='XOR'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'XOR'
		public Keyword getOperatorXORKeyword_1_1_0() { return cOperatorXORKeyword_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorANDKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//    NotExpression ({AndExpression.left=current} operator='AND' right=NotExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression ({AndExpression.left=current} operator='AND' right=NotExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} operator='AND' right=NotExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//operator='AND'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'AND'
		public Keyword getOperatorANDKeyword_1_1_0() { return cOperatorANDKeyword_1_1_0; }
		
		//right=NotExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NotExpression
		public RuleCall getRightNotExpressionParserRuleCall_1_2_0() { return cRightNotExpressionParserRuleCall_1_2_0; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperatorNOTKeyword_0_1_0 = (Keyword)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftNotExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftAssignment_0_2.eContents().get(0);
		private final RuleCall cComparisonExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NotExpression returns Expression:
		//    ({NotExpression} operator='NOT' left=NotExpression) | ComparisonExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//({NotExpression} operator='NOT' left=NotExpression) | ComparisonExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({NotExpression} operator='NOT' left=NotExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotExpression}
		public Action getNotExpressionAction_0_0() { return cNotExpressionAction_0_0; }
		
		//operator='NOT'
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//'NOT'
		public Keyword getOperatorNOTKeyword_0_1_0() { return cOperatorNOTKeyword_0_1_0; }
		
		//left=NotExpression
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }
		
		//NotExpression
		public RuleCall getLeftNotExpressionParserRuleCall_0_2_0() { return cLeftNotExpressionParserRuleCall_0_2_0; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_1() { return cComparisonExpressionParserRuleCall_1; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddOrSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddOrSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression returns Expression:
		//    AddOrSubtractExpression ({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		//    right=AddOrSubtractExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddOrSubtractExpression ({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		//right=AddOrSubtractExpression)*
		public Group getGroup() { return cGroup; }
		
		//AddOrSubtractExpression
		public RuleCall getAddOrSubtractExpressionParserRuleCall_0() { return cAddOrSubtractExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		//   right=AddOrSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('=' | '<>' | '<' | '>' | '<=' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'<>'
		public Keyword getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_2() { return cOperatorLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignKeyword_1_1_0_3; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_4() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_4; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5; }
		
		//right=AddOrSubtractExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddOrSubtractExpression
		public RuleCall getRightAddOrSubtractExpressionParserRuleCall_1_2_0() { return cRightAddOrSubtractExpressionParserRuleCall_1_2_0; }
	}
	public class AddOrSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.AddOrSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyDivideModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddOrSubtractExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddOrSubtractExpression returns Expression:
		//    MultiplyDivideModuloExpression ({AddOrSubtractExpression.left=current} operator=('+' | '-')
		//    right=MultiplyDivideModuloExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplyDivideModuloExpression ({AddOrSubtractExpression.left=current} operator=('+' | '-')
		//right=MultiplyDivideModuloExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplyDivideModuloExpression
		public RuleCall getMultiplyDivideModuloExpressionParserRuleCall_0() { return cMultiplyDivideModuloExpressionParserRuleCall_0; }
		
		//({AddOrSubtractExpression.left=current} operator=('+' | '-')
		//   right=MultiplyDivideModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AddOrSubtractExpression.left=current}
		public Action getAddOrSubtractExpressionLeftAction_1_0() { return cAddOrSubtractExpressionLeftAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right=MultiplyDivideModuloExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplyDivideModuloExpression
		public RuleCall getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0() { return cRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplyDivideModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.MultiplyDivideModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerOfExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplyDivideModuloExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowerOfExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplyDivideModuloExpression returns Expression:
		///*
		// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
		// */
		//    PowerOfExpression ({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
		// */
		//    PowerOfExpression ({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
		// */
		//    PowerOfExpression
		public RuleCall getPowerOfExpressionParserRuleCall_0() { return cPowerOfExpressionParserRuleCall_0; }
		
		//({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplyDivideModuloExpression.left=current}
		public Action getMultiplyDivideModuloExpressionLeftAction_1_0() { return cMultiplyDivideModuloExpressionLeftAction_1_0; }
		
		//operator=('*' | '/' | '%')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOperatorPercentSignKeyword_1_1_0_2() { return cOperatorPercentSignKeyword_1_1_0_2; }
		
		//right=PowerOfExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PowerOfExpression
		public RuleCall getRightPowerOfExpressionParserRuleCall_1_2_0() { return cRightPowerOfExpressionParserRuleCall_1_2_0; }
	}
	public class PowerOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.PowerOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryAddOrSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerOfExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PowerOfExpression returns Expression:
		///*
		// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
		// */
		//    UnaryAddOrSubtractExpression ({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
		// */
		//    UnaryAddOrSubtractExpression ({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
		// */
		//    UnaryAddOrSubtractExpression
		public RuleCall getUnaryAddOrSubtractExpressionParserRuleCall_0() { return cUnaryAddOrSubtractExpressionParserRuleCall_0; }
		
		//({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PowerOfExpression.left=current}
		public Action getPowerOfExpressionLeftAction_1_0() { return cPowerOfExpressionLeftAction_1_0; }
		
		//operator='^'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'^'
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }
		
		//right=UnaryAddOrSubtractExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryAddOrSubtractExpression
		public RuleCall getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0() { return cRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryAddOrSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.UnaryAddOrSubtractExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringListNullOperatorExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryAddOrSubtractExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		
		//UnaryAddOrSubtractExpression returns Expression:
		///*
		// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
		// */
		//    StringListNullOperatorExpression | {UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
		// */
		//    StringListNullOperatorExpression | {UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
		// */
		//    StringListNullOperatorExpression
		public RuleCall getStringListNullOperatorExpressionParserRuleCall_0() { return cStringListNullOperatorExpressionParserRuleCall_0; }
		
		//{UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryAddOrSubtractExpression}
		public Action getUnaryAddOrSubtractExpressionAction_1_0() { return cUnaryAddOrSubtractExpressionAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//left=UnaryAddOrSubtractExpression
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }
		
		//UnaryAddOrSubtractExpression
		public RuleCall getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0() { return cLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0; }
	}
	public class StringListNullOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.StringListNullOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyOrRelationAttributeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStringListNullOperatorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpressionsAlternatives_1_1_0 = (Alternatives)cExpressionsAssignment_1_1.eContents().get(0);
		private final RuleCall cExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cExpressionsNullOperatorExpressionParserRuleCall_1_1_0_1 = (RuleCall)cExpressionsAlternatives_1_1_0.eContents().get(1);
		
		//StringListNullOperatorExpression returns Expression:
		///*
		// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
		// */
		//    PropertyOrRelationAttributeExpression ( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | NullOperatorExpression) )*;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
		// */
		//    PropertyOrRelationAttributeExpression ( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | NullOperatorExpression) )*
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
		// */
		//    PropertyOrRelationAttributeExpression
		public RuleCall getPropertyOrRelationAttributeExpressionParserRuleCall_0() { return cPropertyOrRelationAttributeExpressionParserRuleCall_0; }
		
		//( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | NullOperatorExpression) )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringListNullOperatorExpression.left=current }
		public Action getStringListNullOperatorExpressionLeftAction_1_0() { return cStringListNullOperatorExpressionLeftAction_1_0; }
		
		//expressions+=( StringOperatorExpression | NullOperatorExpression)
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }
		
		//( StringOperatorExpression | NullOperatorExpression)
		public Alternatives getExpressionsAlternatives_1_1_0() { return cExpressionsAlternatives_1_1_0; }
		
		//StringOperatorExpression
		public RuleCall getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0() { return cExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0; }
		
		//NullOperatorExpression
		public RuleCall getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_1() { return cExpressionsNullOperatorExpressionParserRuleCall_1_1_0_1; }
	}
	public class StringOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.StringOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cRegExpMatchingExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignTildeKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cInCollectionExpressionAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cINKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cStartsWithExpressionAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cSTARTSKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cWITHKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cEndsWithExpressionAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Keyword cENDSKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Keyword cWITHKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Action cContainsExpressionAction_0_4_0 = (Action)cGroup_0_4.eContents().get(0);
		private final Keyword cCONTAINSKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPropertyOrRelationAttributeExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//StringOperatorExpression returns Expression:
		///*
		// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
		// */
		//    ( ( {RegExpMatchingExpression} '=~' ) |
		//      ( {InCollectionExpression} 'IN' ) |
		//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
		//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
		//      ( {ContainsExpression} 'CONTAINS' ) )
		//    right=PropertyOrRelationAttributeExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
		// */
		//    ( ( {RegExpMatchingExpression} '=~' ) |
		//      ( {InCollectionExpression} 'IN' ) |
		//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
		//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
		//      ( {ContainsExpression} 'CONTAINS' ) )
		//    right=PropertyOrRelationAttributeExpression
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
		// */
		//    ( ( {RegExpMatchingExpression} '=~' ) |
		//      ( {InCollectionExpression} 'IN' ) |
		//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
		//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
		//      ( {ContainsExpression} 'CONTAINS' ) )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//( {RegExpMatchingExpression} '=~' )
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{RegExpMatchingExpression}
		public Action getRegExpMatchingExpressionAction_0_0_0() { return cRegExpMatchingExpressionAction_0_0_0; }
		
		//'=~'
		public Keyword getEqualsSignTildeKeyword_0_0_1() { return cEqualsSignTildeKeyword_0_0_1; }
		
		//( {InCollectionExpression} 'IN' )
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{InCollectionExpression}
		public Action getInCollectionExpressionAction_0_1_0() { return cInCollectionExpressionAction_0_1_0; }
		
		//'IN'
		public Keyword getINKeyword_0_1_1() { return cINKeyword_0_1_1; }
		
		//( {StartsWithExpression} 'STARTS' 'WITH' )
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{StartsWithExpression}
		public Action getStartsWithExpressionAction_0_2_0() { return cStartsWithExpressionAction_0_2_0; }
		
		//'STARTS'
		public Keyword getSTARTSKeyword_0_2_1() { return cSTARTSKeyword_0_2_1; }
		
		//'WITH'
		public Keyword getWITHKeyword_0_2_2() { return cWITHKeyword_0_2_2; }
		
		//( {EndsWithExpression} 'ENDS' 'WITH' )
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//{EndsWithExpression}
		public Action getEndsWithExpressionAction_0_3_0() { return cEndsWithExpressionAction_0_3_0; }
		
		//'ENDS'
		public Keyword getENDSKeyword_0_3_1() { return cENDSKeyword_0_3_1; }
		
		//'WITH'
		public Keyword getWITHKeyword_0_3_2() { return cWITHKeyword_0_3_2; }
		
		//( {ContainsExpression} 'CONTAINS' )
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//{ContainsExpression}
		public Action getContainsExpressionAction_0_4_0() { return cContainsExpressionAction_0_4_0; }
		
		//'CONTAINS'
		public Keyword getCONTAINSKeyword_0_4_1() { return cCONTAINSKeyword_0_4_1; }
		
		//right=PropertyOrRelationAttributeExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//PropertyOrRelationAttributeExpression
		public RuleCall getRightPropertyOrRelationAttributeExpressionParserRuleCall_1_0() { return cRightPropertyOrRelationAttributeExpressionParserRuleCall_1_0; }
	}
	public class NullOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.NullOperatorExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIsNullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cISKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cNULLKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIsNotNullExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cISKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cNOTKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cNULLKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NullOperatorExpression returns Expression:
		///*
		// * oC_NullOperatorExpression : ( SP IS SP NULL )
		// *                           | ( SP IS SP NOT SP NULL )
		// *                           ;
		// */
		//    ( {IsNullExpression} 'IS' 'NULL') |
		//    ( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_NullOperatorExpression : ( SP IS SP NULL )
		// *                           | ( SP IS SP NOT SP NULL )
		// *                           ;
		// */
		//    ( {IsNullExpression} 'IS' 'NULL') |
		//    ( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		// * oC_NullOperatorExpression : ( SP IS SP NULL )
		// *                           | ( SP IS SP NOT SP NULL )
		// *                           ;
		// */
		//    ( {IsNullExpression} 'IS' 'NULL')
		public Group getGroup_0() { return cGroup_0; }
		
		//{IsNullExpression}
		public Action getIsNullExpressionAction_0_0() { return cIsNullExpressionAction_0_0; }
		
		//'IS'
		public Keyword getISKeyword_0_1() { return cISKeyword_0_1; }
		
		//'NULL'
		public Keyword getNULLKeyword_0_2() { return cNULLKeyword_0_2; }
		
		//( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
		public Group getGroup_1() { return cGroup_1; }
		
		//{IsNotNullExpression}
		public Action getIsNotNullExpressionAction_1_0() { return cIsNotNullExpressionAction_1_0; }
		
		//'IS'
		public Keyword getISKeyword_1_1() { return cISKeyword_1_1; }
		
		//'NOT'
		public Keyword getNOTKeyword_1_2() { return cNOTKeyword_1_2; }
		
		//'NULL'
		public Keyword getNULLKeyword_1_3() { return cNULLKeyword_1_3; }
	}
	public class PropertyOrRelationAttributeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.PropertyOrRelationAttributeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cAttributeLookupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeLookupAttributeLookupParserRuleCall_1_0 = (RuleCall)cAttributeLookupAssignment_1.eContents().get(0);
		
		//PropertyOrRelationAttributeExpression returns Expression:
		///*
		// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
		// *
		// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
		// * appear in the AST iff property lookups and node label constraints were given, respectively
		// */
		//    Atom (attributeLookup=AttributeLookup)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
		// *
		// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
		// * appear in the AST iff property lookups and node label constraints were given, respectively
		// */
		//    Atom (attributeLookup=AttributeLookup)?
		public Group getGroup() { return cGroup; }
		
		///*
		// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
		// *
		// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
		// * appear in the AST iff property lookups and node label constraints were given, respectively
		// */
		//    Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//(attributeLookup=AttributeLookup)?
		public Assignment getAttributeLookupAssignment_1() { return cAttributeLookupAssignment_1; }
		
		//AttributeLookup
		public RuleCall getAttributeLookupAttributeLookupParserRuleCall_1_0() { return cAttributeLookupAttributeLookupParserRuleCall_1_0; }
	}
	public class AttributeLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.AttributeLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeKeyNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeKeyNameAttributeKeyNameParserRuleCall_1_0 = (RuleCall)cAttributeKeyNameAssignment_1.eContents().get(0);
		
		//AttributeLookup:
		//    '.' attributeKeyName=AttributeKeyName;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' attributeKeyName=AttributeKeyName
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//attributeKeyName=AttributeKeyName
		public Assignment getAttributeKeyNameAssignment_1() { return cAttributeKeyNameAssignment_1; }
		
		//AttributeKeyName
		public RuleCall getAttributeKeyNameAttributeKeyNameParserRuleCall_1_0() { return cAttributeKeyNameAttributeKeyNameParserRuleCall_1_0; }
	}
	public class AttributeKeyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.AttributeKeyName");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AttributeKeyName:
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCountAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCOUNTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVariableRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableRefVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariableRefAssignment_2_1.eContents().get(0);
		private final RuleCall cFunctionInvocationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Atom returns Expression:
		//    Literal | {Count} 'COUNT' '(' '*' ')' | {VariableRef} variableRef=VariableDeclaration |
		//    FunctionInvocation;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | {Count} 'COUNT' '(' '*' ')' | {VariableRef} variableRef=VariableDeclaration |
		//FunctionInvocation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//{Count} 'COUNT' '(' '*' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Count}
		public Action getCountAction_1_0() { return cCountAction_1_0; }
		
		//'COUNT'
		public Keyword getCOUNTKeyword_1_1() { return cCOUNTKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_3() { return cAsteriskKeyword_1_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//{VariableRef} variableRef=VariableDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//{VariableRef}
		public Action getVariableRefAction_2_0() { return cVariableRefAction_2_0; }
		
		//variableRef=VariableDeclaration
		public Assignment getVariableRefAssignment_2_1() { return cVariableRefAssignment_2_1; }
		
		//VariableDeclaration
		public RuleCall getVariableRefVariableDeclarationParserRuleCall_2_1_0() { return cVariableRefVariableDeclarationParserRuleCall_2_1_0; }
		
		//FunctionInvocation
		public RuleCall getFunctionInvocationParserRuleCall_3() { return cFunctionInvocationParserRuleCall_3; }
	}
	public class FunctionInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.FunctionInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_0_0 = (RuleCall)cFunctionNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterExpressionParserRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionInvocation:
		//    functionName=FunctionName '(' (parameter+=Expression (',' parameter+=Expression)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//functionName=FunctionName '(' (parameter+=Expression (',' parameter+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//functionName=FunctionName
		public Assignment getFunctionNameAssignment_0() { return cFunctionNameAssignment_0; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_0_0() { return cFunctionNameFunctionNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameter+=Expression (',' parameter+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_2_0_0() { return cParameterExpressionParserRuleCall_2_0_0; }
		
		//(',' parameter+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_2_1_1_0() { return cParameterExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.FunctionName");
		private final RuleCall cSYMBOLIC_NAME_XParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName:
		//    SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getSYMBOLIC_NAME_XParserRuleCall() { return cSYMBOLIC_NAME_XParserRuleCall; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.VariableDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSYMBOLIC_NAME_XParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableDeclaration:
		//    name=SYMBOLIC_NAME_X;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SYMBOLIC_NAME_X
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SYMBOLIC_NAME_X
		public RuleCall getNameSYMBOLIC_NAME_XParserRuleCall_0() { return cNameSYMBOLIC_NAME_XParserRuleCall_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//    NumberLiteral | StringLiteral | BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral | StringLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BooleanLiteral:
		//    {BooleanLiteral} value=('TRUE' | 'FALSE');
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanLiteral} value=('TRUE' | 'FALSE')
		public Group getGroup() { return cGroup; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }
		
		//value=('TRUE' | 'FALSE')
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_1_0_0() { return cValueTRUEKeyword_1_0_0; }
		
		//'FALSE'
		public Keyword getValueFALSEKeyword_1_0_1() { return cValueFALSEKeyword_1_0_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_0() { return cValueSTRING_LITERALTerminalRuleCall_0; }
	}
	public class SYMBOLIC_NAME_XElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.SYMBOLIC_NAME_X");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SYMBOLIC_NAME_X:
		//    ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//    value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden():
		//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
		@Override public ParserRule getRule() { return rule; }
		
		//HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }
		
		//(INT | DECIMAL) ('.' (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }
		
		//(INT | DECIMAL)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }
		
		//('.' (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//(INT | DECIMAL)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final QueryElements pQuery;
	private final SelectSectionElements pSelectSection;
	private final FromSectionElements pFromSection;
	private final FromItemElements pFromItem;
	private final TableElements pTable;
	private final WhereClauseElements pWhereClause;
	private final BoolExpressionElements pBoolExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final BinaryElements pBinary;
	private final ColumnElements pColumn;
	private final GroupClauseElements pGroupClause;
	private final HavingClauseElements pHavingClause;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final XorExpressionElements pXorExpression;
	private final AndExpressionElements pAndExpression;
	private final NotExpressionElements pNotExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final AddOrSubtractExpressionElements pAddOrSubtractExpression;
	private final MultiplyDivideModuloExpressionElements pMultiplyDivideModuloExpression;
	private final PowerOfExpressionElements pPowerOfExpression;
	private final UnaryAddOrSubtractExpressionElements pUnaryAddOrSubtractExpression;
	private final StringListNullOperatorExpressionElements pStringListNullOperatorExpression;
	private final StringOperatorExpressionElements pStringOperatorExpression;
	private final NullOperatorExpressionElements pNullOperatorExpression;
	private final PropertyOrRelationAttributeExpressionElements pPropertyOrRelationAttributeExpression;
	private final AttributeLookupElements pAttributeLookup;
	private final AttributeKeyNameElements pAttributeKeyName;
	private final AtomElements pAtom;
	private final FunctionInvocationElements pFunctionInvocation;
	private final FunctionNameElements pFunctionName;
	private final VariableDeclarationElements pVariableDeclaration;
	private final LiteralElements pLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final StringLiteralElements pStringLiteral;
	private final SYMBOLIC_NAME_XElements pSYMBOLIC_NAME_X;
	private final TerminalRule tSTRING_LITERAL;
	private final NumberLiteralElements pNumberLiteral;
	private final NumberElements pNumber;
	private final TerminalRule tHEX;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQuery = new QueryElements();
		this.pSelectSection = new SelectSectionElements();
		this.pFromSection = new FromSectionElements();
		this.pFromItem = new FromItemElements();
		this.pTable = new TableElements();
		this.pWhereClause = new WhereClauseElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pBinary = new BinaryElements();
		this.pColumn = new ColumnElements();
		this.pGroupClause = new GroupClauseElements();
		this.pHavingClause = new HavingClauseElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pXorExpression = new XorExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pAddOrSubtractExpression = new AddOrSubtractExpressionElements();
		this.pMultiplyDivideModuloExpression = new MultiplyDivideModuloExpressionElements();
		this.pPowerOfExpression = new PowerOfExpressionElements();
		this.pUnaryAddOrSubtractExpression = new UnaryAddOrSubtractExpressionElements();
		this.pStringListNullOperatorExpression = new StringListNullOperatorExpressionElements();
		this.pStringOperatorExpression = new StringOperatorExpressionElements();
		this.pNullOperatorExpression = new NullOperatorExpressionElements();
		this.pPropertyOrRelationAttributeExpression = new PropertyOrRelationAttributeExpressionElements();
		this.pAttributeLookup = new AttributeLookupElements();
		this.pAttributeKeyName = new AttributeKeyNameElements();
		this.pAtom = new AtomElements();
		this.pFunctionInvocation = new FunctionInvocationElements();
		this.pFunctionName = new FunctionNameElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pLiteral = new LiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pSYMBOLIC_NAME_X = new SYMBOLIC_NAME_XElements();
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.STRING_LITERAL");
		this.pNumberLiteral = new NumberLiteralElements();
		this.pNumber = new NumberElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.HEX");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sql.DECIMAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Sql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (queries+=Query)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Query:
	//    selectClause=SelectSection
	//    (fromClause=fromSection)?
	//    (whereClause=WhereClause)?
	//    (groupClause=GroupClause)?
	//    (havingClause=HavingClause)? ';';
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//SelectSection:
	//    'SELECT' expressions+=Expression (',' expressions+=Expression)*;
	public SelectSectionElements getSelectSectionAccess() {
		return pSelectSection;
	}
	
	public ParserRule getSelectSectionRule() {
		return getSelectSectionAccess().getRule();
	}
	
	//fromSection:
	//    'FROM' fromItem=FromItem;
	public FromSectionElements getFromSectionAccess() {
		return pFromSection;
	}
	
	public ParserRule getFromSectionRule() {
		return getFromSectionAccess().getRule();
	}
	
	//FromItem:
	//    tbl+=Table ('JOIN' tbl+=Table 'ON' expressions+=Expression)* | '('select_expr=SelectSection')';
	public FromItemElements getFromItemAccess() {
		return pFromItem;
	}
	
	public ParserRule getFromItemRule() {
		return getFromItemAccess().getRule();
	}
	
	//Table:
	//    name=ID;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//WhereClause:
	//    'WHERE' expression=Expression;
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//BoolExpression returns Expression:
	//    lhs=Term ('OR' rhs=Term)?;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//Term returns Expression:
	//    lhs=Factor ('AND' rhs=Factor)?;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor returns Expression:
	//    'NOT' factor=Factor | '('expr=BoolExpression ')' | 'TRUE' | 'FALSE' | binexp=Binary;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Binary returns Expression:
	//    lhs=PropertyOrRelationAttributeExpression ('<' | '>' | '=' | '>=' | '<=') rhs=PropertyOrRelationAttributeExpression;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//Column:
	//    name=ID;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//GroupClause:
	//    'GROUP' 'BY' expressions+=Expression (',' expressions+=Expression)*;
	public GroupClauseElements getGroupClauseAccess() {
		return pGroupClause;
	}
	
	public ParserRule getGroupClauseRule() {
		return getGroupClauseAccess().getRule();
	}
	
	//HavingClause:
	//    'HAVING' expr=BoolExpression;
	public HavingClauseElements getHavingClauseAccess() {
		return pHavingClause;
	}
	
	public ParserRule getHavingClauseRule() {
		return getHavingClauseAccess().getRule();
	}
	
	////Expression:
	////    '*' | col=Column | 'count()' | 'sum('col=Column')';
	//Expression:
	//    OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression returns Expression:
	//    XorExpression ({OrExpression.left=current} operator='OR' right=XorExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//XorExpression returns Expression:
	//    AndExpression ({XorExpression.left=current} operator='XOR' right=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	//    NotExpression ({AndExpression.left=current} operator='AND' right=NotExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//NotExpression returns Expression:
	//    ({NotExpression} operator='NOT' left=NotExpression) | ComparisonExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//ComparisonExpression returns Expression:
	//    AddOrSubtractExpression ({ComparisonExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
	//    right=AddOrSubtractExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//AddOrSubtractExpression returns Expression:
	//    MultiplyDivideModuloExpression ({AddOrSubtractExpression.left=current} operator=('+' | '-')
	//    right=MultiplyDivideModuloExpression)*;
	public AddOrSubtractExpressionElements getAddOrSubtractExpressionAccess() {
		return pAddOrSubtractExpression;
	}
	
	public ParserRule getAddOrSubtractExpressionRule() {
		return getAddOrSubtractExpressionAccess().getRule();
	}
	
	//MultiplyDivideModuloExpression returns Expression:
	///*
	// * oC_MultiplyDivideModuloExpression : oC_PowerOfExpression ( ( SP? '*' SP? oC_PowerOfExpression ) | ( SP? '/' SP? oC_PowerOfExpression ) | ( SP? '%' SP? oC_PowerOfExpression ) )* ;
	// */
	//    PowerOfExpression ({MultiplyDivideModuloExpression.left=current} operator=('*' | '/' | '%') right=PowerOfExpression)*;
	public MultiplyDivideModuloExpressionElements getMultiplyDivideModuloExpressionAccess() {
		return pMultiplyDivideModuloExpression;
	}
	
	public ParserRule getMultiplyDivideModuloExpressionRule() {
		return getMultiplyDivideModuloExpressionAccess().getRule();
	}
	
	//PowerOfExpression returns Expression:
	///*
	// * oC_PowerOfExpression : oC_UnaryAddOrSubtractExpression ( SP? '^' SP? oC_UnaryAddOrSubtractExpression )* ;
	// */
	//    UnaryAddOrSubtractExpression ({PowerOfExpression.left=current} operator='^' right=UnaryAddOrSubtractExpression)*;
	public PowerOfExpressionElements getPowerOfExpressionAccess() {
		return pPowerOfExpression;
	}
	
	public ParserRule getPowerOfExpressionRule() {
		return getPowerOfExpressionAccess().getRule();
	}
	
	//UnaryAddOrSubtractExpression returns Expression:
	///*
	// * oC_UnaryAddOrSubtractExpression : ( ( '+' | '-' ) SP? )* oC_StringListNullOperatorExpression ;
	// */
	//    StringListNullOperatorExpression | {UnaryAddOrSubtractExpression} operator=('+' | '-') left=UnaryAddOrSubtractExpression;
	public UnaryAddOrSubtractExpressionElements getUnaryAddOrSubtractExpressionAccess() {
		return pUnaryAddOrSubtractExpression;
	}
	
	public ParserRule getUnaryAddOrSubtractExpressionRule() {
		return getUnaryAddOrSubtractExpressionAccess().getRule();
	}
	
	//StringListNullOperatorExpression returns Expression:
	///*
	// * oC_StringListNullOperatorExpression : oC_PropertyOrLabelsExpression ( oC_StringOperatorExpression | oC_ListOperatorExpression | oC_NullOperatorExpression )* ;
	// */
	//    PropertyOrRelationAttributeExpression ( {StringListNullOperatorExpression.left=current } expressions+=( StringOperatorExpression | NullOperatorExpression) )*;
	public StringListNullOperatorExpressionElements getStringListNullOperatorExpressionAccess() {
		return pStringListNullOperatorExpression;
	}
	
	public ParserRule getStringListNullOperatorExpressionRule() {
		return getStringListNullOperatorExpressionAccess().getRule();
	}
	
	//StringOperatorExpression returns Expression:
	///*
	// * oC_StringOperatorExpression : ( oC_RegularExpression | ( SP IN ) | ( SP STARTS SP WITH ) | ( SP ENDS SP WITH ) | ( SP CONTAINS ) ) SP? oC_PropertyOrLabelsExpression ;
	// */
	//    ( ( {RegExpMatchingExpression} '=~' ) |
	//      ( {InCollectionExpression} 'IN' ) |
	//      ( {StartsWithExpression} 'STARTS' 'WITH' ) |
	//      ( {EndsWithExpression} 'ENDS' 'WITH' ) |
	//      ( {ContainsExpression} 'CONTAINS' ) )
	//    right=PropertyOrRelationAttributeExpression
	//;
	public StringOperatorExpressionElements getStringOperatorExpressionAccess() {
		return pStringOperatorExpression;
	}
	
	public ParserRule getStringOperatorExpressionRule() {
		return getStringOperatorExpressionAccess().getRule();
	}
	
	//NullOperatorExpression returns Expression:
	///*
	// * oC_NullOperatorExpression : ( SP IS SP NULL )
	// *                           | ( SP IS SP NOT SP NULL )
	// *                           ;
	// */
	//    ( {IsNullExpression} 'IS' 'NULL') |
	//    ( {IsNotNullExpression} 'IS' 'NOT' 'NULL')
	//;
	public NullOperatorExpressionElements getNullOperatorExpressionAccess() {
		return pNullOperatorExpression;
	}
	
	public ParserRule getNullOperatorExpressionRule() {
		return getNullOperatorExpressionAccess().getRule();
	}
	
	//PropertyOrRelationAttributeExpression returns Expression:
	///*
	// * oC_PropertyOrLabelsExpression : oC_Atom ( SP? oC_PropertyLookup )* ( SP? oC_NodeLabels )? ;
	// *
	// * Note: we want PropertyLookupExpression and NodeLabelsExpression to
	// * appear in the AST iff property lookups and node label constraints were given, respectively
	// */
	//    Atom (attributeLookup=AttributeLookup)?;
	public PropertyOrRelationAttributeExpressionElements getPropertyOrRelationAttributeExpressionAccess() {
		return pPropertyOrRelationAttributeExpression;
	}
	
	public ParserRule getPropertyOrRelationAttributeExpressionRule() {
		return getPropertyOrRelationAttributeExpressionAccess().getRule();
	}
	
	//AttributeLookup:
	//    '.' attributeKeyName=AttributeKeyName;
	public AttributeLookupElements getAttributeLookupAccess() {
		return pAttributeLookup;
	}
	
	public ParserRule getAttributeLookupRule() {
		return getAttributeLookupAccess().getRule();
	}
	
	//AttributeKeyName:
	//    SYMBOLIC_NAME_X;
	public AttributeKeyNameElements getAttributeKeyNameAccess() {
		return pAttributeKeyName;
	}
	
	public ParserRule getAttributeKeyNameRule() {
		return getAttributeKeyNameAccess().getRule();
	}
	
	//Atom returns Expression:
	//    Literal | {Count} 'COUNT' '(' '*' ')' | {VariableRef} variableRef=VariableDeclaration |
	//    FunctionInvocation;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//FunctionInvocation:
	//    functionName=FunctionName '(' (parameter+=Expression (',' parameter+=Expression)*)? ')'
	//;
	public FunctionInvocationElements getFunctionInvocationAccess() {
		return pFunctionInvocation;
	}
	
	public ParserRule getFunctionInvocationRule() {
		return getFunctionInvocationAccess().getRule();
	}
	
	//FunctionName:
	//    SYMBOLIC_NAME_X;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//VariableDeclaration:
	//    name=SYMBOLIC_NAME_X;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Literal:
	//    NumberLiteral | StringLiteral | BooleanLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    {BooleanLiteral} value=('TRUE' | 'FALSE');
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING_LITERAL;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//SYMBOLIC_NAME_X:
	//    ID;
	public SYMBOLIC_NAME_XElements getSYMBOLIC_NAME_XAccess() {
		return pSYMBOLIC_NAME_X;
	}
	
	public ParserRule getSYMBOLIC_NAME_XRule() {
		return getSYMBOLIC_NAME_XAccess().getRule();
	}
	
	//terminal STRING_LITERAL:
	//    '"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' | "'" ('\\' .
	//    /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//NumberLiteral:
	//    value=Number;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x' | '0X') ('0'..'9' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DECIMAL:
	//    INT (('e') ('+' | '-')? INT)?;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
