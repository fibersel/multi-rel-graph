/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.sql.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.sql.AttributeLookup;
import org.xtext.example.mydsl.sql.Expression;
import org.xtext.example.mydsl.sql.SqlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sql.impl.ExpressionImpl#getLhs <em>Lhs</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sql.impl.ExpressionImpl#getRhs <em>Rhs</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sql.impl.ExpressionImpl#getFactor <em>Factor</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sql.impl.ExpressionImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sql.impl.ExpressionImpl#getBinexp <em>Binexp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sql.impl.ExpressionImpl#getAttributeLookup <em>Attribute Lookup</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getLhs() <em>Lhs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLhs()
   * @generated
   * @ordered
   */
  protected Expression lhs;

  /**
   * The cached value of the '{@link #getRhs() <em>Rhs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRhs()
   * @generated
   * @ordered
   */
  protected Expression rhs;

  /**
   * The cached value of the '{@link #getFactor() <em>Factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFactor()
   * @generated
   * @ordered
   */
  protected Expression factor;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expression expr;

  /**
   * The cached value of the '{@link #getBinexp() <em>Binexp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinexp()
   * @generated
   * @ordered
   */
  protected Expression binexp;

  /**
   * The cached value of the '{@link #getAttributeLookup() <em>Attribute Lookup</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeLookup()
   * @generated
   * @ordered
   */
  protected AttributeLookup attributeLookup;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SqlPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLhs()
  {
    return lhs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLhs(Expression newLhs, NotificationChain msgs)
  {
    Expression oldLhs = lhs;
    lhs = newLhs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__LHS, oldLhs, newLhs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLhs(Expression newLhs)
  {
    if (newLhs != lhs)
    {
      NotificationChain msgs = null;
      if (lhs != null)
        msgs = ((InternalEObject)lhs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__LHS, null, msgs);
      if (newLhs != null)
        msgs = ((InternalEObject)newLhs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__LHS, null, msgs);
      msgs = basicSetLhs(newLhs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__LHS, newLhs, newLhs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getRhs()
  {
    return rhs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRhs(Expression newRhs, NotificationChain msgs)
  {
    Expression oldRhs = rhs;
    rhs = newRhs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__RHS, oldRhs, newRhs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRhs(Expression newRhs)
  {
    if (newRhs != rhs)
    {
      NotificationChain msgs = null;
      if (rhs != null)
        msgs = ((InternalEObject)rhs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__RHS, null, msgs);
      if (newRhs != null)
        msgs = ((InternalEObject)newRhs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__RHS, null, msgs);
      msgs = basicSetRhs(newRhs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__RHS, newRhs, newRhs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getFactor()
  {
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFactor(Expression newFactor, NotificationChain msgs)
  {
    Expression oldFactor = factor;
    factor = newFactor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__FACTOR, oldFactor, newFactor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFactor(Expression newFactor)
  {
    if (newFactor != factor)
    {
      NotificationChain msgs = null;
      if (factor != null)
        msgs = ((InternalEObject)factor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__FACTOR, null, msgs);
      if (newFactor != null)
        msgs = ((InternalEObject)newFactor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__FACTOR, null, msgs);
      msgs = basicSetFactor(newFactor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__FACTOR, newFactor, newFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expression newExpr, NotificationChain msgs)
  {
    Expression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(Expression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getBinexp()
  {
    return binexp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBinexp(Expression newBinexp, NotificationChain msgs)
  {
    Expression oldBinexp = binexp;
    binexp = newBinexp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__BINEXP, oldBinexp, newBinexp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBinexp(Expression newBinexp)
  {
    if (newBinexp != binexp)
    {
      NotificationChain msgs = null;
      if (binexp != null)
        msgs = ((InternalEObject)binexp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__BINEXP, null, msgs);
      if (newBinexp != null)
        msgs = ((InternalEObject)newBinexp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__BINEXP, null, msgs);
      msgs = basicSetBinexp(newBinexp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__BINEXP, newBinexp, newBinexp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeLookup getAttributeLookup()
  {
    return attributeLookup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributeLookup(AttributeLookup newAttributeLookup, NotificationChain msgs)
  {
    AttributeLookup oldAttributeLookup = attributeLookup;
    attributeLookup = newAttributeLookup;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP, oldAttributeLookup, newAttributeLookup);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributeLookup(AttributeLookup newAttributeLookup)
  {
    if (newAttributeLookup != attributeLookup)
    {
      NotificationChain msgs = null;
      if (attributeLookup != null)
        msgs = ((InternalEObject)attributeLookup).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP, null, msgs);
      if (newAttributeLookup != null)
        msgs = ((InternalEObject)newAttributeLookup).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP, null, msgs);
      msgs = basicSetAttributeLookup(newAttributeLookup, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP, newAttributeLookup, newAttributeLookup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SqlPackage.EXPRESSION__LHS:
        return basicSetLhs(null, msgs);
      case SqlPackage.EXPRESSION__RHS:
        return basicSetRhs(null, msgs);
      case SqlPackage.EXPRESSION__FACTOR:
        return basicSetFactor(null, msgs);
      case SqlPackage.EXPRESSION__EXPR:
        return basicSetExpr(null, msgs);
      case SqlPackage.EXPRESSION__BINEXP:
        return basicSetBinexp(null, msgs);
      case SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP:
        return basicSetAttributeLookup(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SqlPackage.EXPRESSION__LHS:
        return getLhs();
      case SqlPackage.EXPRESSION__RHS:
        return getRhs();
      case SqlPackage.EXPRESSION__FACTOR:
        return getFactor();
      case SqlPackage.EXPRESSION__EXPR:
        return getExpr();
      case SqlPackage.EXPRESSION__BINEXP:
        return getBinexp();
      case SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP:
        return getAttributeLookup();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SqlPackage.EXPRESSION__LHS:
        setLhs((Expression)newValue);
        return;
      case SqlPackage.EXPRESSION__RHS:
        setRhs((Expression)newValue);
        return;
      case SqlPackage.EXPRESSION__FACTOR:
        setFactor((Expression)newValue);
        return;
      case SqlPackage.EXPRESSION__EXPR:
        setExpr((Expression)newValue);
        return;
      case SqlPackage.EXPRESSION__BINEXP:
        setBinexp((Expression)newValue);
        return;
      case SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP:
        setAttributeLookup((AttributeLookup)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SqlPackage.EXPRESSION__LHS:
        setLhs((Expression)null);
        return;
      case SqlPackage.EXPRESSION__RHS:
        setRhs((Expression)null);
        return;
      case SqlPackage.EXPRESSION__FACTOR:
        setFactor((Expression)null);
        return;
      case SqlPackage.EXPRESSION__EXPR:
        setExpr((Expression)null);
        return;
      case SqlPackage.EXPRESSION__BINEXP:
        setBinexp((Expression)null);
        return;
      case SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP:
        setAttributeLookup((AttributeLookup)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SqlPackage.EXPRESSION__LHS:
        return lhs != null;
      case SqlPackage.EXPRESSION__RHS:
        return rhs != null;
      case SqlPackage.EXPRESSION__FACTOR:
        return factor != null;
      case SqlPackage.EXPRESSION__EXPR:
        return expr != null;
      case SqlPackage.EXPRESSION__BINEXP:
        return binexp != null;
      case SqlPackage.EXPRESSION__ATTRIBUTE_LOOKUP:
        return attributeLookup != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
