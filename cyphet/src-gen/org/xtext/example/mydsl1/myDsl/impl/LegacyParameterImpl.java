/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl1.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl1.myDsl.Expression;
import org.xtext.example.mydsl1.myDsl.LegacyParameter;
import org.xtext.example.mydsl1.myDsl.MyDslPackage;
import org.xtext.example.mydsl1.myDsl.NodeLabel;
import org.xtext.example.mydsl1.myDsl.NodeLabels;
import org.xtext.example.mydsl1.myDsl.PropertyExpression;
import org.xtext.example.mydsl1.myDsl.PropertyLookup;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Legacy Parameter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.myDsl.impl.LegacyParameterImpl#getNodeLabels <em>Node Labels</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.myDsl.impl.LegacyParameterImpl#getPropertyLookups <em>Property Lookups</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.myDsl.impl.LegacyParameterImpl#getParameter <em>Parameter</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LegacyParameterImpl extends PropertiesImpl implements LegacyParameter
{
  /**
   * The cached value of the '{@link #getNodeLabels() <em>Node Labels</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeLabels()
   * @generated
   * @ordered
   */
  protected EList<NodeLabel> nodeLabels;

  /**
   * The cached value of the '{@link #getPropertyLookups() <em>Property Lookups</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyLookups()
   * @generated
   * @ordered
   */
  protected EList<PropertyLookup> propertyLookups;

  /**
   * The default value of the '{@link #getParameter() <em>Parameter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameter()
   * @generated
   * @ordered
   */
  protected static final String PARAMETER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParameter() <em>Parameter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameter()
   * @generated
   * @ordered
   */
  protected String parameter = PARAMETER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LegacyParameterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.LEGACY_PARAMETER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NodeLabel> getNodeLabels()
  {
    if (nodeLabels == null)
    {
      nodeLabels = new EObjectContainmentEList<NodeLabel>(NodeLabel.class, this, MyDslPackage.LEGACY_PARAMETER__NODE_LABELS);
    }
    return nodeLabels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PropertyLookup> getPropertyLookups()
  {
    if (propertyLookups == null)
    {
      propertyLookups = new EObjectContainmentEList<PropertyLookup>(PropertyLookup.class, this, MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS);
    }
    return propertyLookups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getParameter()
  {
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParameter(String newParameter)
  {
    String oldParameter = parameter;
    parameter = newParameter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LEGACY_PARAMETER__PARAMETER, oldParameter, parameter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.LEGACY_PARAMETER__NODE_LABELS:
        return ((InternalEList<?>)getNodeLabels()).basicRemove(otherEnd, msgs);
      case MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS:
        return ((InternalEList<?>)getPropertyLookups()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.LEGACY_PARAMETER__NODE_LABELS:
        return getNodeLabels();
      case MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS:
        return getPropertyLookups();
      case MyDslPackage.LEGACY_PARAMETER__PARAMETER:
        return getParameter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.LEGACY_PARAMETER__NODE_LABELS:
        getNodeLabels().clear();
        getNodeLabels().addAll((Collection<? extends NodeLabel>)newValue);
        return;
      case MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS:
        getPropertyLookups().clear();
        getPropertyLookups().addAll((Collection<? extends PropertyLookup>)newValue);
        return;
      case MyDslPackage.LEGACY_PARAMETER__PARAMETER:
        setParameter((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LEGACY_PARAMETER__NODE_LABELS:
        getNodeLabels().clear();
        return;
      case MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS:
        getPropertyLookups().clear();
        return;
      case MyDslPackage.LEGACY_PARAMETER__PARAMETER:
        setParameter(PARAMETER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LEGACY_PARAMETER__NODE_LABELS:
        return nodeLabels != null && !nodeLabels.isEmpty();
      case MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS:
        return propertyLookups != null && !propertyLookups.isEmpty();
      case MyDslPackage.LEGACY_PARAMETER__PARAMETER:
        return PARAMETER_EDEFAULT == null ? parameter != null : !PARAMETER_EDEFAULT.equals(parameter);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == NodeLabels.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.LEGACY_PARAMETER__NODE_LABELS: return MyDslPackage.NODE_LABELS__NODE_LABELS;
        default: return -1;
      }
    }
    if (baseClass == PropertyExpression.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Expression.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS: return MyDslPackage.EXPRESSION__PROPERTY_LOOKUPS;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == NodeLabels.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.NODE_LABELS__NODE_LABELS: return MyDslPackage.LEGACY_PARAMETER__NODE_LABELS;
        default: return -1;
      }
    }
    if (baseClass == PropertyExpression.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Expression.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.EXPRESSION__PROPERTY_LOOKUPS: return MyDslPackage.LEGACY_PARAMETER__PROPERTY_LOOKUPS;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (parameter: ");
    result.append(parameter);
    result.append(')');
    return result.toString();
  }

} //LegacyParameterImpl
