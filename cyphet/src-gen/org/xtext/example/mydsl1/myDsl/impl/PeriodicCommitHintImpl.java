/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl1.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl1.myDsl.DecimalInteger;
import org.xtext.example.mydsl1.myDsl.MyDslPackage;
import org.xtext.example.mydsl1.myDsl.PeriodicCommitHint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Periodic Commit Hint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.myDsl.impl.PeriodicCommitHintImpl#getNumberOfRowsPerCommit <em>Number Of Rows Per Commit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PeriodicCommitHintImpl extends MinimalEObjectImpl.Container implements PeriodicCommitHint
{
  /**
   * The cached value of the '{@link #getNumberOfRowsPerCommit() <em>Number Of Rows Per Commit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumberOfRowsPerCommit()
   * @generated
   * @ordered
   */
  protected DecimalInteger numberOfRowsPerCommit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PeriodicCommitHintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.PERIODIC_COMMIT_HINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecimalInteger getNumberOfRowsPerCommit()
  {
    return numberOfRowsPerCommit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNumberOfRowsPerCommit(DecimalInteger newNumberOfRowsPerCommit, NotificationChain msgs)
  {
    DecimalInteger oldNumberOfRowsPerCommit = numberOfRowsPerCommit;
    numberOfRowsPerCommit = newNumberOfRowsPerCommit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT, oldNumberOfRowsPerCommit, newNumberOfRowsPerCommit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumberOfRowsPerCommit(DecimalInteger newNumberOfRowsPerCommit)
  {
    if (newNumberOfRowsPerCommit != numberOfRowsPerCommit)
    {
      NotificationChain msgs = null;
      if (numberOfRowsPerCommit != null)
        msgs = ((InternalEObject)numberOfRowsPerCommit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT, null, msgs);
      if (newNumberOfRowsPerCommit != null)
        msgs = ((InternalEObject)newNumberOfRowsPerCommit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT, null, msgs);
      msgs = basicSetNumberOfRowsPerCommit(newNumberOfRowsPerCommit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT, newNumberOfRowsPerCommit, newNumberOfRowsPerCommit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT:
        return basicSetNumberOfRowsPerCommit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT:
        return getNumberOfRowsPerCommit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT:
        setNumberOfRowsPerCommit((DecimalInteger)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT:
        setNumberOfRowsPerCommit((DecimalInteger)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT:
        return numberOfRowsPerCommit != null;
    }
    return super.eIsSet(featureID);
  }

} //PeriodicCommitHintImpl
