/*
 * generated by Xtext 2.27.0
 */
grammar InternalSql;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.SqlGrammarAccess;

}
@parser::members {
	private SqlGrammarAccess grammarAccess;

	public void setGrammarAccess(SqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getQueriesAssignment()); }
		(rule__Model__QueriesAssignment)*
		{ after(grammarAccess.getModelAccess().getQueriesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectSection
entryRuleSelectSection
:
{ before(grammarAccess.getSelectSectionRule()); }
	 ruleSelectSection
{ after(grammarAccess.getSelectSectionRule()); } 
	 EOF 
;

// Rule SelectSection
ruleSelectSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectSectionAccess().getGroup()); }
		(rule__SelectSection__Group__0)
		{ after(grammarAccess.getSelectSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefromSection
entryRulefromSection
:
{ before(grammarAccess.getFromSectionRule()); }
	 rulefromSection
{ after(grammarAccess.getFromSectionRule()); } 
	 EOF 
;

// Rule fromSection
rulefromSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromSectionAccess().getGroup()); }
		(rule__FromSection__Group__0)
		{ after(grammarAccess.getFromSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFromItem
entryRuleFromItem
:
{ before(grammarAccess.getFromItemRule()); }
	 ruleFromItem
{ after(grammarAccess.getFromItemRule()); } 
	 EOF 
;

// Rule FromItem
ruleFromItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromItemAccess().getAlternatives()); }
		(rule__FromItem__Alternatives)
		{ after(grammarAccess.getFromItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getNameAssignment()); }
		(rule__Table__NameAssignment)
		{ after(grammarAccess.getTableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhereClause
entryRuleWhereClause
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
		(rule__WhereClause__Group__0)
		{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolExpression
entryRuleBoolExpression
:
{ before(grammarAccess.getBoolExpressionRule()); }
	 ruleBoolExpression
{ after(grammarAccess.getBoolExpressionRule()); } 
	 EOF 
;

// Rule BoolExpression
ruleBoolExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getGroup()); }
		(rule__BoolExpression__Group__0)
		{ after(grammarAccess.getBoolExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getGroup()); }
		(rule__Term__Group__0)
		{ after(grammarAccess.getTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getAlternatives()); }
		(rule__Factor__Alternatives)
		{ after(grammarAccess.getFactorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinary
entryRuleBinary
:
{ before(grammarAccess.getBinaryRule()); }
	 ruleBinary
{ after(grammarAccess.getBinaryRule()); } 
	 EOF 
;

// Rule Binary
ruleBinary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryAccess().getGroup()); }
		(rule__Binary__Group__0)
		{ after(grammarAccess.getBinaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGroupClause
entryRuleGroupClause
:
{ before(grammarAccess.getGroupClauseRule()); }
	 ruleGroupClause
{ after(grammarAccess.getGroupClauseRule()); } 
	 EOF 
;

// Rule GroupClause
ruleGroupClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroupClauseAccess().getGroup()); }
		(rule__GroupClause__Group__0)
		{ after(grammarAccess.getGroupClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHavingClause
entryRuleHavingClause
:
{ before(grammarAccess.getHavingClauseRule()); }
	 ruleHavingClause
{ after(grammarAccess.getHavingClauseRule()); } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHavingClauseAccess().getGroup()); }
		(rule__HavingClause__Group__0)
		{ after(grammarAccess.getHavingClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotExpression
entryRuleNotExpression
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
		(rule__NotExpression__Alternatives)
		{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddOrSubtractExpression
entryRuleAddOrSubtractExpression
:
{ before(grammarAccess.getAddOrSubtractExpressionRule()); }
	 ruleAddOrSubtractExpression
{ after(grammarAccess.getAddOrSubtractExpressionRule()); } 
	 EOF 
;

// Rule AddOrSubtractExpression
ruleAddOrSubtractExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getGroup()); }
		(rule__AddOrSubtractExpression__Group__0)
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplyDivideModuloExpression
entryRuleMultiplyDivideModuloExpression
:
{ before(grammarAccess.getMultiplyDivideModuloExpressionRule()); }
	 ruleMultiplyDivideModuloExpression
{ after(grammarAccess.getMultiplyDivideModuloExpressionRule()); } 
	 EOF 
;

// Rule MultiplyDivideModuloExpression
ruleMultiplyDivideModuloExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup()); }
		(rule__MultiplyDivideModuloExpression__Group__0)
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowerOfExpression
entryRulePowerOfExpression
:
{ before(grammarAccess.getPowerOfExpressionRule()); }
	 rulePowerOfExpression
{ after(grammarAccess.getPowerOfExpressionRule()); } 
	 EOF 
;

// Rule PowerOfExpression
rulePowerOfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerOfExpressionAccess().getGroup()); }
		(rule__PowerOfExpression__Group__0)
		{ after(grammarAccess.getPowerOfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryAddOrSubtractExpression
entryRuleUnaryAddOrSubtractExpression
:
{ before(grammarAccess.getUnaryAddOrSubtractExpressionRule()); }
	 ruleUnaryAddOrSubtractExpression
{ after(grammarAccess.getUnaryAddOrSubtractExpressionRule()); } 
	 EOF 
;

// Rule UnaryAddOrSubtractExpression
ruleUnaryAddOrSubtractExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives()); }
		(rule__UnaryAddOrSubtractExpression__Alternatives)
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringListNullOperatorExpression
entryRuleStringListNullOperatorExpression
:
{ before(grammarAccess.getStringListNullOperatorExpressionRule()); }
	 ruleStringListNullOperatorExpression
{ after(grammarAccess.getStringListNullOperatorExpressionRule()); } 
	 EOF 
;

// Rule StringListNullOperatorExpression
ruleStringListNullOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup()); }
		(rule__StringListNullOperatorExpression__Group__0)
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringOperatorExpression
entryRuleStringOperatorExpression
:
{ before(grammarAccess.getStringOperatorExpressionRule()); }
	 ruleStringOperatorExpression
{ after(grammarAccess.getStringOperatorExpressionRule()); } 
	 EOF 
;

// Rule StringOperatorExpression
ruleStringOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup()); }
		(rule__StringOperatorExpression__Group__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullOperatorExpression
entryRuleNullOperatorExpression
:
{ before(grammarAccess.getNullOperatorExpressionRule()); }
	 ruleNullOperatorExpression
{ after(grammarAccess.getNullOperatorExpressionRule()); } 
	 EOF 
;

// Rule NullOperatorExpression
ruleNullOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullOperatorExpressionAccess().getAlternatives()); }
		(rule__NullOperatorExpression__Alternatives)
		{ after(grammarAccess.getNullOperatorExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyOrRelationAttributeExpression
entryRulePropertyOrRelationAttributeExpression
:
{ before(grammarAccess.getPropertyOrRelationAttributeExpressionRule()); }
	 rulePropertyOrRelationAttributeExpression
{ after(grammarAccess.getPropertyOrRelationAttributeExpressionRule()); } 
	 EOF 
;

// Rule PropertyOrRelationAttributeExpression
rulePropertyOrRelationAttributeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getGroup()); }
		(rule__PropertyOrRelationAttributeExpression__Group__0)
		{ after(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeLookup
entryRuleAttributeLookup
:
{ before(grammarAccess.getAttributeLookupRule()); }
	 ruleAttributeLookup
{ after(grammarAccess.getAttributeLookupRule()); } 
	 EOF 
;

// Rule AttributeLookup
ruleAttributeLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeLookupAccess().getGroup()); }
		(rule__AttributeLookup__Group__0)
		{ after(grammarAccess.getAttributeLookupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeKeyName
entryRuleAttributeKeyName
:
{ before(grammarAccess.getAttributeKeyNameRule()); }
	 ruleAttributeKeyName
{ after(grammarAccess.getAttributeKeyNameRule()); } 
	 EOF 
;

// Rule AttributeKeyName
ruleAttributeKeyName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getAttributeKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getAlternatives()); }
		(rule__Atom__Alternatives)
		{ after(grammarAccess.getAtomAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionInvocation
entryRuleFunctionInvocation
:
{ before(grammarAccess.getFunctionInvocationRule()); }
	 ruleFunctionInvocation
{ after(grammarAccess.getFunctionInvocationRule()); } 
	 EOF 
;

// Rule FunctionInvocation
ruleFunctionInvocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getGroup()); }
		(rule__FunctionInvocation__Group__0)
		{ after(grammarAccess.getFunctionInvocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment()); }
		(rule__VariableDeclaration__NameAssignment)
		{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
		(rule__BooleanLiteral__Group__0)
		{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSYMBOLIC_NAME_X
entryRuleSYMBOLIC_NAME_X
:
{ before(grammarAccess.getSYMBOLIC_NAME_XRule()); }
	 ruleSYMBOLIC_NAME_X
{ after(grammarAccess.getSYMBOLIC_NAME_XRule()); } 
	 EOF 
;

// Rule SYMBOLIC_NAME_X
ruleSYMBOLIC_NAME_X 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives()); }
		(rule__Number__Alternatives)
		{ after(grammarAccess.getNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__FromItem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getGroup_0()); }
		(rule__FromItem__Group_0__0)
		{ after(grammarAccess.getFromItemAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFromItemAccess().getGroup_1()); }
		(rule__FromItem__Group_1__0)
		{ after(grammarAccess.getFromItemAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getGroup_0()); }
		(rule__Factor__Group_0__0)
		{ after(grammarAccess.getFactorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getGroup_1()); }
		(rule__Factor__Group_1__0)
		{ after(grammarAccess.getFactorAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getTRUEKeyword_2()); }
		'TRUE'
		{ after(grammarAccess.getFactorAccess().getTRUEKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getFALSEKeyword_3()); }
		'FALSE'
		{ after(grammarAccess.getFactorAccess().getFALSEKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getBinexpAssignment_4()); }
		(rule__Factor__BinexpAssignment_4)
		{ after(grammarAccess.getFactorAccess().getBinexpAssignment_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getLessThanSignKeyword_1_0()); }
		'<'
		{ after(grammarAccess.getBinaryAccess().getLessThanSignKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getGreaterThanSignKeyword_1_1()); }
		'>'
		{ after(grammarAccess.getBinaryAccess().getGreaterThanSignKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getEqualsSignKeyword_1_2()); }
		'='
		{ after(grammarAccess.getBinaryAccess().getEqualsSignKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getGreaterThanSignEqualsSignKeyword_1_3()); }
		'>='
		{ after(grammarAccess.getBinaryAccess().getGreaterThanSignEqualsSignKeyword_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getLessThanSignEqualsSignKeyword_1_4()); }
		'<='
		{ after(grammarAccess.getBinaryAccess().getLessThanSignEqualsSignKeyword_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getGroup_0()); }
		(rule__NotExpression__Group_0__0)
		{ after(grammarAccess.getNotExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1()); }
		ruleComparisonExpression
		{ after(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
		'='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); }
		'<>'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2()); }
		'<'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); }
		'>'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); }
		'<='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); }
		'>='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
		'%'
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0()); }
		ruleStringListNullOperatorExpression
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1()); }
		(rule__UnaryAddOrSubtractExpression__Group_1__0)
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0()); }
		ruleStringOperatorExpression
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_1()); }
		ruleNullOperatorExpression
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0()); }
		(rule__StringOperatorExpression__Group_0_0__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1()); }
		(rule__StringOperatorExpression__Group_0_1__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2()); }
		(rule__StringOperatorExpression__Group_0_2__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3()); }
		(rule__StringOperatorExpression__Group_0_3__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4()); }
		(rule__StringOperatorExpression__Group_0_4__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullOperatorExpressionAccess().getGroup_0()); }
		(rule__NullOperatorExpression__Group_0__0)
		{ after(grammarAccess.getNullOperatorExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNullOperatorExpressionAccess().getGroup_1()); }
		(rule__NullOperatorExpression__Group_1__0)
		{ after(grammarAccess.getNullOperatorExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_1()); }
		(rule__Atom__Group_1__0)
		{ after(grammarAccess.getAtomAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_2()); }
		(rule__Atom__Group_2__0)
		{ after(grammarAccess.getAtomAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_3()); }
		ruleFunctionInvocation
		{ after(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
		ruleNumberLiteral
		{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0()); }
		'TRUE'
		{ after(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1()); }
		'FALSE'
		{ after(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); }
		RULE_HEX
		{ after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getGroup_1()); }
		(rule__Number__Group_1__0)
		{ after(grammarAccess.getNumberAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); }
		RULE_DECIMAL
		{ after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); }
		RULE_DECIMAL
		{ after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getSelectClauseAssignment_0()); }
	(rule__Query__SelectClauseAssignment_0)
	{ after(grammarAccess.getQueryAccess().getSelectClauseAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
	rule__Query__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getFromClauseAssignment_1()); }
	(rule__Query__FromClauseAssignment_1)?
	{ after(grammarAccess.getQueryAccess().getFromClauseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__2__Impl
	rule__Query__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getWhereClauseAssignment_2()); }
	(rule__Query__WhereClauseAssignment_2)?
	{ after(grammarAccess.getQueryAccess().getWhereClauseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__3__Impl
	rule__Query__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getGroupClauseAssignment_3()); }
	(rule__Query__GroupClauseAssignment_3)?
	{ after(grammarAccess.getQueryAccess().getGroupClauseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__4__Impl
	rule__Query__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getHavingClauseAssignment_4()); }
	(rule__Query__HavingClauseAssignment_4)?
	{ after(grammarAccess.getQueryAccess().getHavingClauseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getQueryAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectSection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectSection__Group__0__Impl
	rule__SelectSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectSectionAccess().getSELECTKeyword_0()); }
	'SELECT'
	{ after(grammarAccess.getSelectSectionAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectSection__Group__1__Impl
	rule__SelectSection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectSectionAccess().getExpressionsAssignment_1()); }
	(rule__SelectSection__ExpressionsAssignment_1)
	{ after(grammarAccess.getSelectSectionAccess().getExpressionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectSection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectSectionAccess().getGroup_2()); }
	(rule__SelectSection__Group_2__0)*
	{ after(grammarAccess.getSelectSectionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectSection__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectSection__Group_2__0__Impl
	rule__SelectSection__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectSectionAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSelectSectionAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectSection__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectSectionAccess().getExpressionsAssignment_2_1()); }
	(rule__SelectSection__ExpressionsAssignment_2_1)
	{ after(grammarAccess.getSelectSectionAccess().getExpressionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromSection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromSection__Group__0__Impl
	rule__FromSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromSectionAccess().getFROMKeyword_0()); }
	'FROM'
	{ after(grammarAccess.getFromSectionAccess().getFROMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromSection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromSectionAccess().getFromItemAssignment_1()); }
	(rule__FromSection__FromItemAssignment_1)
	{ after(grammarAccess.getFromSectionAccess().getFromItemAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromItem__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0__0__Impl
	rule__FromItem__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getTblAssignment_0_0()); }
	(rule__FromItem__TblAssignment_0_0)
	{ after(grammarAccess.getFromItemAccess().getTblAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getGroup_0_1()); }
	(rule__FromItem__Group_0_1__0)*
	{ after(grammarAccess.getFromItemAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromItem__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__0__Impl
	rule__FromItem__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getJOINKeyword_0_1_0()); }
	'JOIN'
	{ after(grammarAccess.getFromItemAccess().getJOINKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__1__Impl
	rule__FromItem__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getTblAssignment_0_1_1()); }
	(rule__FromItem__TblAssignment_0_1_1)
	{ after(grammarAccess.getFromItemAccess().getTblAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__2__Impl
	rule__FromItem__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getONKeyword_0_1_2()); }
	'ON'
	{ after(grammarAccess.getFromItemAccess().getONKeyword_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getExpressionsAssignment_0_1_3()); }
	(rule__FromItem__ExpressionsAssignment_0_1_3)
	{ after(grammarAccess.getFromItemAccess().getExpressionsAssignment_0_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromItem__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__0__Impl
	rule__FromItem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getFromItemAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__1__Impl
	rule__FromItem__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getSelect_exprAssignment_1_1()); }
	(rule__FromItem__Select_exprAssignment_1_1)
	{ after(grammarAccess.getFromItemAccess().getSelect_exprAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getFromItemAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
	'WHERE'
	{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
	(rule__WhereClause__ExpressionAssignment_1)
	{ after(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group__0__Impl
	rule__BoolExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getLhsAssignment_0()); }
	(rule__BoolExpression__LhsAssignment_0)
	{ after(grammarAccess.getBoolExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getGroup_1()); }
	(rule__BoolExpression__Group_1__0)?
	{ after(grammarAccess.getBoolExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group_1__0__Impl
	rule__BoolExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getORKeyword_1_0()); }
	'OR'
	{ after(grammarAccess.getBoolExpressionAccess().getORKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getRhsAssignment_1_1()); }
	(rule__BoolExpression__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolExpressionAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getLhsAssignment_0()); }
	(rule__Term__LhsAssignment_0)
	{ after(grammarAccess.getTermAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getGroup_1()); }
	(rule__Term__Group_1__0)?
	{ after(grammarAccess.getTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getANDKeyword_1_0()); }
	'AND'
	{ after(grammarAccess.getTermAccess().getANDKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getRhsAssignment_1_1()); }
	(rule__Term__RhsAssignment_1_1)
	{ after(grammarAccess.getTermAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__0__Impl
	rule__Factor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getNOTKeyword_0_0()); }
	'NOT'
	{ after(grammarAccess.getFactorAccess().getNOTKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getFactorAssignment_0_1()); }
	(rule__Factor__FactorAssignment_0_1)
	{ after(grammarAccess.getFactorAccess().getFactorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getExprAssignment_1_1()); }
	(rule__Factor__ExprAssignment_1_1)
	{ after(grammarAccess.getFactorAccess().getExprAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__0__Impl
	rule__Binary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getLhsAssignment_0()); }
	(rule__Binary__LhsAssignment_0)
	{ after(grammarAccess.getBinaryAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__1__Impl
	rule__Binary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getAlternatives_1()); }
	(rule__Binary__Alternatives_1)
	{ after(grammarAccess.getBinaryAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getRhsAssignment_2()); }
	(rule__Binary__RhsAssignment_2)
	{ after(grammarAccess.getBinaryAccess().getRhsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupClause__Group__0__Impl
	rule__GroupClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupClauseAccess().getGROUPKeyword_0()); }
	'GROUP'
	{ after(grammarAccess.getGroupClauseAccess().getGROUPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupClause__Group__1__Impl
	rule__GroupClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupClauseAccess().getBYKeyword_1()); }
	'BY'
	{ after(grammarAccess.getGroupClauseAccess().getBYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupClause__Group__2__Impl
	rule__GroupClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupClauseAccess().getExpressionsAssignment_2()); }
	(rule__GroupClause__ExpressionsAssignment_2)
	{ after(grammarAccess.getGroupClauseAccess().getExpressionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupClauseAccess().getGroup_3()); }
	(rule__GroupClause__Group_3__0)*
	{ after(grammarAccess.getGroupClauseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupClause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupClause__Group_3__0__Impl
	rule__GroupClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupClauseAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getGroupClauseAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupClauseAccess().getExpressionsAssignment_3_1()); }
	(rule__GroupClause__ExpressionsAssignment_3_1)
	{ after(grammarAccess.getGroupClauseAccess().getExpressionsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HavingClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HavingClause__Group__0__Impl
	rule__HavingClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0()); }
	'HAVING'
	{ after(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HavingClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHavingClauseAccess().getExprAssignment_1()); }
	(rule__HavingClause__ExprAssignment_1)
	{ after(grammarAccess.getHavingClauseAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__OrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
	rule__XorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__XorExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
	(rule__XorExpression__RightAssignment_1_2)
	{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); }
	ruleNotExpression
	{ after(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_0__0__Impl
	rule__NotExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_0__1__Impl
	rule__NotExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
	(rule__NotExpression__OperatorAssignment_0_1)
	{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2()); }
	(rule__NotExpression__LeftAssignment_0_2)
	{ after(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0()); }
	ruleAddOrSubtractExpression
	{ after(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparisonExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddOrSubtractExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group__0__Impl
	rule__AddOrSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0()); }
	ruleMultiplyDivideModuloExpression
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1()); }
	(rule__AddOrSubtractExpression__Group_1__0)*
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddOrSubtractExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group_1__0__Impl
	rule__AddOrSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group_1__1__Impl
	rule__AddOrSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AddOrSubtractExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2()); }
	(rule__AddOrSubtractExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideModuloExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group__0__Impl
	rule__MultiplyDivideModuloExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0()); }
	rulePowerOfExpression
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1()); }
	(rule__MultiplyDivideModuloExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideModuloExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group_1__0__Impl
	rule__MultiplyDivideModuloExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group_1__1__Impl
	rule__MultiplyDivideModuloExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2()); }
	(rule__MultiplyDivideModuloExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group__0__Impl
	rule__PowerOfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0()); }
	ruleUnaryAddOrSubtractExpression
	{ after(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getGroup_1()); }
	(rule__PowerOfExpression__Group_1__0)*
	{ after(grammarAccess.getPowerOfExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOfExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group_1__0__Impl
	rule__PowerOfExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group_1__1__Impl
	rule__PowerOfExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__PowerOfExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2()); }
	(rule__PowerOfExpression__RightAssignment_1_2)
	{ after(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryAddOrSubtractExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryAddOrSubtractExpression__Group_1__0__Impl
	rule__UnaryAddOrSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryAddOrSubtractExpression__Group_1__1__Impl
	rule__UnaryAddOrSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryAddOrSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2()); }
	(rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2)
	{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringListNullOperatorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group__0__Impl
	rule__StringListNullOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrRelationAttributeExpressionParserRuleCall_0()); }
	rulePropertyOrRelationAttributeExpression
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrRelationAttributeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1()); }
	(rule__StringListNullOperatorExpression__Group_1__0)*
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringListNullOperatorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group_1__0__Impl
	rule__StringListNullOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1()); }
	(rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1)
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group__0__Impl
	rule__StringOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0()); }
	(rule__StringOperatorExpression__Alternatives_0)
	{ after(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1()); }
	(rule__StringOperatorExpression__RightAssignment_1)
	{ after(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_0__0__Impl
	rule__StringOperatorExpression__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1()); }
	'=~'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_1__0__Impl
	rule__StringOperatorExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1()); }
	'IN'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_2__0__Impl
	rule__StringOperatorExpression__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_2__1__Impl
	rule__StringOperatorExpression__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1()); }
	'STARTS'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2()); }
	'WITH'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_3__0__Impl
	rule__StringOperatorExpression__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_3__1__Impl
	rule__StringOperatorExpression__Group_0_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1()); }
	'ENDS'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2()); }
	'WITH'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_4__0__Impl
	rule__StringOperatorExpression__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1()); }
	'CONTAINS'
	{ after(grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullOperatorExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_0__0__Impl
	rule__NullOperatorExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_0__1__Impl
	rule__NullOperatorExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1()); }
	'IS'
	{ after(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2()); }
	'NULL'
	{ after(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullOperatorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__0__Impl
	rule__NullOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__1__Impl
	rule__NullOperatorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1()); }
	'IS'
	{ after(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__2__Impl
	rule__NullOperatorExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2()); }
	'NOT'
	{ after(grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3()); }
	'NULL'
	{ after(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyOrRelationAttributeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrRelationAttributeExpression__Group__0__Impl
	rule__PropertyOrRelationAttributeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrRelationAttributeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAtomParserRuleCall_0()); }
	ruleAtom
	{ after(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAtomParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrRelationAttributeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrRelationAttributeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrRelationAttributeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAttributeLookupAssignment_1()); }
	(rule__PropertyOrRelationAttributeExpression__AttributeLookupAssignment_1)?
	{ after(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAttributeLookupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeLookup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeLookup__Group__0__Impl
	rule__AttributeLookup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeLookup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeLookupAccess().getFullStopKeyword_0()); }
	'.'
	{ after(grammarAccess.getAttributeLookupAccess().getFullStopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeLookup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeLookup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeLookup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeLookupAccess().getAttributeKeyNameAssignment_1()); }
	(rule__AttributeLookup__AttributeKeyNameAssignment_1)
	{ after(grammarAccess.getAttributeLookupAccess().getAttributeKeyNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__0__Impl
	rule__Atom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getCountAction_1_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getCountAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__1__Impl
	rule__Atom__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getCOUNTKeyword_1_1()); }
	'COUNT'
	{ after(grammarAccess.getAtomAccess().getCOUNTKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__2__Impl
	rule__Atom__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_2()); }
	'('
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__3__Impl
	rule__Atom__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getAsteriskKeyword_1_3()); }
	'*'
	{ after(grammarAccess.getAtomAccess().getAsteriskKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_4()); }
	')'
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_2__0__Impl
	rule__Atom__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getVariableRefAction_2_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getVariableRefAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getVariableRefAssignment_2_1()); }
	(rule__Atom__VariableRefAssignment_2_1)
	{ after(grammarAccess.getAtomAccess().getVariableRefAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionInvocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__0__Impl
	rule__FunctionInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); }
	(rule__FunctionInvocation__FunctionNameAssignment_0)
	{ after(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__1__Impl
	rule__FunctionInvocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__2__Impl
	rule__FunctionInvocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getGroup_2()); }
	(rule__FunctionInvocation__Group_2__0)?
	{ after(grammarAccess.getFunctionInvocationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionInvocation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_2__0__Impl
	rule__FunctionInvocation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_2_0()); }
	(rule__FunctionInvocation__ParameterAssignment_2_0)
	{ after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getGroup_2_1()); }
	(rule__FunctionInvocation__Group_2_1__0)*
	{ after(grammarAccess.getFunctionInvocationAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionInvocation__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_2_1__0__Impl
	rule__FunctionInvocation__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_2_1_1()); }
	(rule__FunctionInvocation__ParameterAssignment_2_1_1)
	{ after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
	()
	{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); }
	(rule__BooleanLiteral__ValueAssignment_1)
	{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
	(rule__Number__Alternatives_1_0)
	{ after(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_1_1()); }
	(rule__Number__Group_1_1__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1_1__0__Impl
	rule__Number__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); }
	'.'
	{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
	(rule__Number__Alternatives_1_1_1)
	{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__QueriesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getQueriesQueryParserRuleCall_0()); }
		ruleQuery
		{ after(grammarAccess.getModelAccess().getQueriesQueryParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__SelectClauseAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getSelectClauseSelectSectionParserRuleCall_0_0()); }
		ruleSelectSection
		{ after(grammarAccess.getQueryAccess().getSelectClauseSelectSectionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__FromClauseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getFromClauseFromSectionParserRuleCall_1_0()); }
		rulefromSection
		{ after(grammarAccess.getQueryAccess().getFromClauseFromSectionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__WhereClauseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
		ruleWhereClause
		{ after(grammarAccess.getQueryAccess().getWhereClauseWhereClauseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__GroupClauseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getGroupClauseGroupClauseParserRuleCall_3_0()); }
		ruleGroupClause
		{ after(grammarAccess.getQueryAccess().getGroupClauseGroupClauseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__HavingClauseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getHavingClauseHavingClauseParserRuleCall_4_0()); }
		ruleHavingClause
		{ after(grammarAccess.getQueryAccess().getHavingClauseHavingClauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__ExpressionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectSectionAccess().getExpressionsExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectSectionAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSection__ExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectSectionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectSectionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__FromItemAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromSectionAccess().getFromItemFromItemParserRuleCall_1_0()); }
		ruleFromItem
		{ after(grammarAccess.getFromSectionAccess().getFromItemFromItemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__TblAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getTblTableParserRuleCall_0_0_0()); }
		ruleTable
		{ after(grammarAccess.getFromItemAccess().getTblTableParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__TblAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getTblTableParserRuleCall_0_1_1_0()); }
		ruleTable
		{ after(grammarAccess.getFromItemAccess().getTblTableParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__ExpressionsAssignment_0_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getExpressionsExpressionParserRuleCall_0_1_3_0()); }
		ruleExpression
		{ after(grammarAccess.getFromItemAccess().getExpressionsExpressionParserRuleCall_0_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Select_exprAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getSelect_exprSelectSectionParserRuleCall_1_1_0()); }
		ruleSelectSection
		{ after(grammarAccess.getFromItemAccess().getSelect_exprSelectSectionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getLhsTermParserRuleCall_0_0()); }
		ruleTerm
		{ after(grammarAccess.getBoolExpressionAccess().getLhsTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getRhsTermParserRuleCall_1_1_0()); }
		ruleTerm
		{ after(grammarAccess.getBoolExpressionAccess().getRhsTermParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getLhsFactorParserRuleCall_0_0()); }
		ruleFactor
		{ after(grammarAccess.getTermAccess().getLhsFactorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getRhsFactorParserRuleCall_1_1_0()); }
		ruleFactor
		{ after(grammarAccess.getTermAccess().getRhsFactorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__FactorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_0_1_0()); }
		ruleFactor
		{ after(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__ExprAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getExprBoolExpressionParserRuleCall_1_1_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getFactorAccess().getExprBoolExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__BinexpAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getBinexpBinaryParserRuleCall_4_0()); }
		ruleBinary
		{ after(grammarAccess.getFactorAccess().getBinexpBinaryParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getLhsPropertyOrRelationAttributeExpressionParserRuleCall_0_0()); }
		rulePropertyOrRelationAttributeExpression
		{ after(grammarAccess.getBinaryAccess().getLhsPropertyOrRelationAttributeExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__RhsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getRhsPropertyOrRelationAttributeExpressionParserRuleCall_2_0()); }
		rulePropertyOrRelationAttributeExpression
		{ after(grammarAccess.getBinaryAccess().getRhsPropertyOrRelationAttributeExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__ExpressionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupClauseAccess().getExpressionsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getGroupClauseAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupClause__ExpressionsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupClauseAccess().getExpressionsExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getGroupClauseAccess().getExpressionsExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHavingClauseAccess().getExprBoolExpressionParserRuleCall_1_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getHavingClauseAccess().getExprBoolExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
			'OR'
			{ after(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
		ruleXorExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
			'XOR'
			{ after(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
			'AND'
			{ after(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); }
		ruleNotExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
			'NOT'
			{ after(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__LeftAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0()); }
		ruleNotExpression
		{ after(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__ComparisonExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0()); }
		ruleAddOrSubtractExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0()); }
		ruleMultiplyDivideModuloExpression
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0()); }
		rulePowerOfExpression
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
			'^'
			{ after(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
		ruleUnaryAddOrSubtractExpression
		{ after(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
		ruleUnaryAddOrSubtractExpression
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0()); }
		(rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0)
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__RightAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrRelationAttributeExpressionParserRuleCall_1_0()); }
		rulePropertyOrRelationAttributeExpression
		{ after(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrRelationAttributeExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrRelationAttributeExpression__AttributeLookupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAttributeLookupAttributeLookupParserRuleCall_1_0()); }
		ruleAttributeLookup
		{ after(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAttributeLookupAttributeLookupParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeLookup__AttributeKeyNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeLookupAccess().getAttributeKeyNameAttributeKeyNameParserRuleCall_1_0()); }
		ruleAttributeKeyName
		{ after(grammarAccess.getAttributeLookupAccess().getAttributeKeyNameAttributeKeyNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__VariableRefAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationParserRuleCall_2_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__FunctionNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__ParameterAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__ParameterAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); }
		(rule__BooleanLiteral__ValueAlternatives_1_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_STRING_LITERAL : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_HEX : ('0x'|'0X') ('0'..'9'|'A'..'F')+;

RULE_INT : '0'..'9' ('0'..'9')*;

RULE_DECIMAL : RULE_INT ('e' ('+'|'-')? RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
