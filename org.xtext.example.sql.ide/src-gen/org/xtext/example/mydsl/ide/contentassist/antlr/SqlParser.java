/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalSqlParser;
import org.xtext.example.mydsl.services.SqlGrammarAccess;

public class SqlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SqlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SqlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFromItemAccess().getAlternatives(), "rule__FromItem__Alternatives");
			builder.put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
			builder.put(grammarAccess.getBinaryAccess().getAlternatives_1(), "rule__Binary__Alternatives_1");
			builder.put(grammarAccess.getNotExpressionAccess().getAlternatives(), "rule__NotExpression__Alternatives");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__ComparisonExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives(), "rule__UnaryAddOrSubtractExpression__Alternatives");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0(), "rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0(), "rule__StringOperatorExpression__Alternatives_0");
			builder.put(grammarAccess.getNullOperatorExpressionAccess().getAlternatives(), "rule__NullOperatorExpression__Alternatives");
			builder.put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0(), "rule__BooleanLiteral__ValueAlternatives_1_0");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives_1_0(), "rule__Number__Alternatives_1_0");
			builder.put(grammarAccess.getNumberAccess().getAlternatives_1_1_1(), "rule__Number__Alternatives_1_1_1");
			builder.put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
			builder.put(grammarAccess.getSelectSectionAccess().getGroup(), "rule__SelectSection__Group__0");
			builder.put(grammarAccess.getSelectSectionAccess().getGroup_2(), "rule__SelectSection__Group_2__0");
			builder.put(grammarAccess.getFromSectionAccess().getGroup(), "rule__FromSection__Group__0");
			builder.put(grammarAccess.getFromItemAccess().getGroup_0(), "rule__FromItem__Group_0__0");
			builder.put(grammarAccess.getFromItemAccess().getGroup_0_1(), "rule__FromItem__Group_0_1__0");
			builder.put(grammarAccess.getFromItemAccess().getGroup_1(), "rule__FromItem__Group_1__0");
			builder.put(grammarAccess.getWhereClauseAccess().getGroup(), "rule__WhereClause__Group__0");
			builder.put(grammarAccess.getBoolExpressionAccess().getGroup(), "rule__BoolExpression__Group__0");
			builder.put(grammarAccess.getBoolExpressionAccess().getGroup_1(), "rule__BoolExpression__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_0(), "rule__Factor__Group_0__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getBinaryAccess().getGroup(), "rule__Binary__Group__0");
			builder.put(grammarAccess.getGroupClauseAccess().getGroup(), "rule__GroupClause__Group__0");
			builder.put(grammarAccess.getGroupClauseAccess().getGroup_3(), "rule__GroupClause__Group_3__0");
			builder.put(grammarAccess.getHavingClauseAccess().getGroup(), "rule__HavingClause__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getXorExpressionAccess().getGroup(), "rule__XorExpression__Group__0");
			builder.put(grammarAccess.getXorExpressionAccess().getGroup_1(), "rule__XorExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getNotExpressionAccess().getGroup_0(), "rule__NotExpression__Group_0__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getGroup(), "rule__AddOrSubtractExpression__Group__0");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1(), "rule__AddOrSubtractExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup(), "rule__MultiplyDivideModuloExpression__Group__0");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1(), "rule__MultiplyDivideModuloExpression__Group_1__0");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getGroup(), "rule__PowerOfExpression__Group__0");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getGroup_1(), "rule__PowerOfExpression__Group_1__0");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1(), "rule__UnaryAddOrSubtractExpression__Group_1__0");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup(), "rule__StringListNullOperatorExpression__Group__0");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1(), "rule__StringListNullOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup(), "rule__StringOperatorExpression__Group__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0(), "rule__StringOperatorExpression__Group_0_0__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1(), "rule__StringOperatorExpression__Group_0_1__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2(), "rule__StringOperatorExpression__Group_0_2__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3(), "rule__StringOperatorExpression__Group_0_3__0");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4(), "rule__StringOperatorExpression__Group_0_4__0");
			builder.put(grammarAccess.getNullOperatorExpressionAccess().getGroup_0(), "rule__NullOperatorExpression__Group_0__0");
			builder.put(grammarAccess.getNullOperatorExpressionAccess().getGroup_1(), "rule__NullOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getGroup(), "rule__PropertyOrRelationAttributeExpression__Group__0");
			builder.put(grammarAccess.getAttributeLookupAccess().getGroup(), "rule__AttributeLookup__Group__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_2(), "rule__Atom__Group_2__0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getGroup(), "rule__FunctionInvocation__Group__0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getGroup_2(), "rule__FunctionInvocation__Group_2__0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getGroup_2_1(), "rule__FunctionInvocation__Group_2_1__0");
			builder.put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1_1(), "rule__Number__Group_1_1__0");
			builder.put(grammarAccess.getModelAccess().getQueriesAssignment(), "rule__Model__QueriesAssignment");
			builder.put(grammarAccess.getQueryAccess().getSelectClauseAssignment_0(), "rule__Query__SelectClauseAssignment_0");
			builder.put(grammarAccess.getQueryAccess().getFromClauseAssignment_1(), "rule__Query__FromClauseAssignment_1");
			builder.put(grammarAccess.getQueryAccess().getWhereClauseAssignment_2(), "rule__Query__WhereClauseAssignment_2");
			builder.put(grammarAccess.getQueryAccess().getGroupClauseAssignment_3(), "rule__Query__GroupClauseAssignment_3");
			builder.put(grammarAccess.getQueryAccess().getHavingClauseAssignment_4(), "rule__Query__HavingClauseAssignment_4");
			builder.put(grammarAccess.getSelectSectionAccess().getExpressionsAssignment_1(), "rule__SelectSection__ExpressionsAssignment_1");
			builder.put(grammarAccess.getSelectSectionAccess().getExpressionsAssignment_2_1(), "rule__SelectSection__ExpressionsAssignment_2_1");
			builder.put(grammarAccess.getFromSectionAccess().getFromItemAssignment_1(), "rule__FromSection__FromItemAssignment_1");
			builder.put(grammarAccess.getFromItemAccess().getTblAssignment_0_0(), "rule__FromItem__TblAssignment_0_0");
			builder.put(grammarAccess.getFromItemAccess().getTblAssignment_0_1_1(), "rule__FromItem__TblAssignment_0_1_1");
			builder.put(grammarAccess.getFromItemAccess().getExpressionsAssignment_0_1_3(), "rule__FromItem__ExpressionsAssignment_0_1_3");
			builder.put(grammarAccess.getFromItemAccess().getSelect_exprAssignment_1_1(), "rule__FromItem__Select_exprAssignment_1_1");
			builder.put(grammarAccess.getTableAccess().getNameAssignment(), "rule__Table__NameAssignment");
			builder.put(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1(), "rule__WhereClause__ExpressionAssignment_1");
			builder.put(grammarAccess.getBoolExpressionAccess().getLhsAssignment_0(), "rule__BoolExpression__LhsAssignment_0");
			builder.put(grammarAccess.getBoolExpressionAccess().getRhsAssignment_1_1(), "rule__BoolExpression__RhsAssignment_1_1");
			builder.put(grammarAccess.getTermAccess().getLhsAssignment_0(), "rule__Term__LhsAssignment_0");
			builder.put(grammarAccess.getTermAccess().getRhsAssignment_1_1(), "rule__Term__RhsAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getFactorAssignment_0_1(), "rule__Factor__FactorAssignment_0_1");
			builder.put(grammarAccess.getFactorAccess().getExprAssignment_1_1(), "rule__Factor__ExprAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getBinexpAssignment_4(), "rule__Factor__BinexpAssignment_4");
			builder.put(grammarAccess.getBinaryAccess().getLhsAssignment_0(), "rule__Binary__LhsAssignment_0");
			builder.put(grammarAccess.getBinaryAccess().getRhsAssignment_2(), "rule__Binary__RhsAssignment_2");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment(), "rule__Column__NameAssignment");
			builder.put(grammarAccess.getGroupClauseAccess().getExpressionsAssignment_2(), "rule__GroupClause__ExpressionsAssignment_2");
			builder.put(grammarAccess.getGroupClauseAccess().getExpressionsAssignment_3_1(), "rule__GroupClause__ExpressionsAssignment_3_1");
			builder.put(grammarAccess.getHavingClauseAccess().getExprAssignment_1(), "rule__HavingClause__ExprAssignment_1");
			builder.put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1(), "rule__XorExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2(), "rule__XorExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1(), "rule__NotExpression__OperatorAssignment_0_1");
			builder.put(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2(), "rule__NotExpression__LeftAssignment_0_2");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1(), "rule__AddOrSubtractExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2(), "rule__AddOrSubtractExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2(), "rule__MultiplyDivideModuloExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1(), "rule__PowerOfExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2(), "rule__PowerOfExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1(), "rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2(), "rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2");
			builder.put(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1(), "rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1");
			builder.put(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1(), "rule__StringOperatorExpression__RightAssignment_1");
			builder.put(grammarAccess.getPropertyOrRelationAttributeExpressionAccess().getAttributeLookupAssignment_1(), "rule__PropertyOrRelationAttributeExpression__AttributeLookupAssignment_1");
			builder.put(grammarAccess.getAttributeLookupAccess().getAttributeKeyNameAssignment_1(), "rule__AttributeLookup__AttributeKeyNameAssignment_1");
			builder.put(grammarAccess.getAtomAccess().getVariableRefAssignment_2_1(), "rule__Atom__VariableRefAssignment_2_1");
			builder.put(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0(), "rule__FunctionInvocation__FunctionNameAssignment_0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_2_0(), "rule__FunctionInvocation__ParameterAssignment_2_0");
			builder.put(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_2_1_1(), "rule__FunctionInvocation__ParameterAssignment_2_1_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment(), "rule__VariableDeclaration__NameAssignment");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SqlGrammarAccess grammarAccess;

	@Override
	protected InternalSqlParser createParser() {
		InternalSqlParser result = new InternalSqlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SqlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
