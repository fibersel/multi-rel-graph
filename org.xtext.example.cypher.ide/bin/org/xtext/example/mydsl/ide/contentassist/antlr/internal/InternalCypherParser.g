/*
 * generated by Xtext 2.27.0
 */
parser grammar InternalCypherParser;

options {
	tokenVocab=InternalCypherLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.CypherGrammarAccess;

}
@members {
	private CypherGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("DollarSign", "'\\u0024'");
		tokenNameToValue.put("PercentSign", "'\%'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("QuestionMark", "'?'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("PlusSignEqualsSign", "'+='");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("EqualsSignTilde", "'=~'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("AS", "'AS'");
		tokenNameToValue.put("BY", "'BY'");
		tokenNameToValue.put("IN", "'IN'");
		tokenNameToValue.put("IS", "'IS'");
		tokenNameToValue.put("ON", "'ON'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("ALL", "'ALL'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("ANY", "'ANY'");
		tokenNameToValue.put("ASC", "'ASC'");
		tokenNameToValue.put("CSV", "'CSV'");
		tokenNameToValue.put("END", "'END'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("REL", "'REL'");
		tokenNameToValue.put("SET", "'SET'");
		tokenNameToValue.put("XOR", "'XOR'");
		tokenNameToValue.put("CALL", "'CALL'");
		tokenNameToValue.put("CASE", "'CASE'");
		tokenNameToValue.put("DESC", "'DESC'");
		tokenNameToValue.put("DROP", "'DROP'");
		tokenNameToValue.put("ELSE", "'ELSE'");
		tokenNameToValue.put("ENDS", "'ENDS'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("JOIN", "'JOIN'");
		tokenNameToValue.put("LOAD", "'LOAD'");
		tokenNameToValue.put("NODE", "'NODE'");
		tokenNameToValue.put("NONE", "'NONE'");
		tokenNameToValue.put("NULL", "'NULL'");
		tokenNameToValue.put("SCAN", "'SCAN'");
		tokenNameToValue.put("SKIP", "'SKIP'");
		tokenNameToValue.put("THEN", "'THEN'");
		tokenNameToValue.put("TRUE", "'TRUE'");
		tokenNameToValue.put("WHEN", "'WHEN'");
		tokenNameToValue.put("WITH", "'WITH'");
		tokenNameToValue.put("COUNT", "'COUNT'");
		tokenNameToValue.put("FALSE", "'FALSE'");
		tokenNameToValue.put("INDEX", "'INDEX'");
		tokenNameToValue.put("LIMIT", "'LIMIT'");
		tokenNameToValue.put("MATCH", "'MATCH'");
		tokenNameToValue.put("MERGE", "'MERGE'");
		tokenNameToValue.put("ORDER", "'ORDER'");
		tokenNameToValue.put("START", "'START'");
		tokenNameToValue.put("UNION", "'UNION'");
		tokenNameToValue.put("USING", "'USING'");
		tokenNameToValue.put("WHERE", "'WHERE'");
		tokenNameToValue.put("YIELD", "'YIELD'");
		tokenNameToValue.put("ASSERT", "'ASSERT'");
		tokenNameToValue.put("COMMIT", "'COMMIT'");
		tokenNameToValue.put("CREATE", "'CREATE'");
		tokenNameToValue.put("CYPHER", "'CYPHER'");
		tokenNameToValue.put("DELETE", "'DELETE'");
		tokenNameToValue.put("DETACH", "'DETACH'");
		tokenNameToValue.put("EXISTS", "'EXISTS'");
		tokenNameToValue.put("FILTER", "'FILTER'");
		tokenNameToValue.put("REDUCE", "'REDUCE'");
		tokenNameToValue.put("REMOVE", "'REMOVE'");
		tokenNameToValue.put("RETURN", "'RETURN'");
		tokenNameToValue.put("SINGLE", "'SINGLE'");
		tokenNameToValue.put("STARTS", "'STARTS'");
		tokenNameToValue.put("UNIQUE", "'UNIQUE'");
		tokenNameToValue.put("UNWIND", "'UNWIND'");
		tokenNameToValue.put("EXPLAIN", "'EXPLAIN'");
		tokenNameToValue.put("EXTRACT", "'EXTRACT'");
		tokenNameToValue.put("FOREACH", "'FOREACH'");
		tokenNameToValue.put("HEADERS", "'HEADERS'");
		tokenNameToValue.put("PROFILE", "'PROFILE'");
		tokenNameToValue.put("CONTAINS", "'CONTAINS'");
		tokenNameToValue.put("DISTINCT", "'DISTINCT'");
		tokenNameToValue.put("OPTIONAL", "'OPTIONAL'");
		tokenNameToValue.put("PERIODIC", "'PERIODIC'");
		tokenNameToValue.put("ASCENDING", "'ASCENDING'");
		tokenNameToValue.put("CONSTRAINT", "'CONSTRAINT'");
		tokenNameToValue.put("DESCENDING", "'DESCENDING'");
		tokenNameToValue.put("RELATIONSHIP", "'RELATIONSHIP'");
		tokenNameToValue.put("SHORTESTPATH", "'SHORTESTPATH'");
		tokenNameToValue.put("FIELDTERMINATOR", "'FIELDTERMINATOR'");
		tokenNameToValue.put("ALLSHORTESTPATHS", "'ALLSHORTESTPATHS'");
	}

	public void setGrammarAccess(CypherGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleCypher
entryRuleCypher
:
{ before(grammarAccess.getCypherRule()); }
	 ruleCypher
{ after(grammarAccess.getCypherRule()); } 
	 EOF 
;

// Rule Cypher
ruleCypher 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCypherAccess().getGroup()); }
		(rule__Cypher__Group__0)
		{ after(grammarAccess.getCypherAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQueryOptions
entryRuleQueryOptions
:
{ before(grammarAccess.getQueryOptionsRule()); }
	 ruleQueryOptions
{ after(grammarAccess.getQueryOptionsRule()); } 
	 EOF 
;

// Rule QueryOptions
ruleQueryOptions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryOptionsAccess().getGroup()); }
		(rule__QueryOptions__Group__0)
		{ after(grammarAccess.getQueryOptionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCypherOption
entryRuleCypherOption
:
{ before(grammarAccess.getCypherOptionRule()); }
	 ruleCypherOption
{ after(grammarAccess.getCypherOptionRule()); } 
	 EOF 
;

// Rule CypherOption
ruleCypherOption 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCypherOptionAccess().getGroup()); }
		(rule__CypherOption__Group__0)
		{ after(grammarAccess.getCypherOptionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVersionNumber
entryRuleVersionNumber
:
{ before(grammarAccess.getVersionNumberRule()); }
	 ruleVersionNumber
{ after(grammarAccess.getVersionNumberRule()); } 
	 EOF 
;

// Rule VersionNumber
ruleVersionNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment()); }
		(rule__VersionNumber__VersionNumberAssignment)
		{ after(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfigurationOption
entryRuleConfigurationOption
:
{ before(grammarAccess.getConfigurationOptionRule()); }
	 ruleConfigurationOption
{ after(grammarAccess.getConfigurationOptionRule()); } 
	 EOF 
;

// Rule ConfigurationOption
ruleConfigurationOption 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigurationOptionAccess().getGroup()); }
		(rule__ConfigurationOption__Group__0)
		{ after(grammarAccess.getConfigurationOptionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getAlternatives()); }
		(rule__Query__Alternatives)
		{ after(grammarAccess.getQueryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularQuery
entryRuleRegularQuery
:
{ before(grammarAccess.getRegularQueryRule()); }
	 ruleRegularQuery
{ after(grammarAccess.getRegularQueryRule()); } 
	 EOF 
;

// Rule RegularQuery
ruleRegularQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularQueryAccess().getGroup()); }
		(rule__RegularQuery__Group__0)
		{ after(grammarAccess.getRegularQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBulkImportQuery
entryRuleBulkImportQuery
:
{ before(grammarAccess.getBulkImportQueryRule()); }
	 ruleBulkImportQuery
{ after(grammarAccess.getBulkImportQueryRule()); } 
	 EOF 
;

// Rule BulkImportQuery
ruleBulkImportQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBulkImportQueryAccess().getGroup()); }
		(rule__BulkImportQuery__Group__0)
		{ after(grammarAccess.getBulkImportQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePeriodicCommitHint
entryRulePeriodicCommitHint
:
{ before(grammarAccess.getPeriodicCommitHintRule()); }
	 rulePeriodicCommitHint
{ after(grammarAccess.getPeriodicCommitHintRule()); } 
	 EOF 
;

// Rule PeriodicCommitHint
rulePeriodicCommitHint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPeriodicCommitHintAccess().getGroup()); }
		(rule__PeriodicCommitHint__Group__0)
		{ after(grammarAccess.getPeriodicCommitHintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoadCSVQuery
entryRuleLoadCSVQuery
:
{ before(grammarAccess.getLoadCSVQueryRule()); }
	 ruleLoadCSVQuery
{ after(grammarAccess.getLoadCSVQueryRule()); } 
	 EOF 
;

// Rule LoadCSVQuery
ruleLoadCSVQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadCSVQueryAccess().getGroup()); }
		(rule__LoadCSVQuery__Group__0)
		{ after(grammarAccess.getLoadCSVQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnion
entryRuleUnion
:
{ before(grammarAccess.getUnionRule()); }
	 ruleUnion
{ after(grammarAccess.getUnionRule()); } 
	 EOF 
;

// Rule Union
ruleUnion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnionAccess().getGroup()); }
		(rule__Union__Group__0)
		{ after(grammarAccess.getUnionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleQuery
entryRuleSingleQuery
:
{ before(grammarAccess.getSingleQueryRule()); }
	 ruleSingleQuery
{ after(grammarAccess.getSingleQueryRule()); } 
	 EOF 
;

// Rule SingleQuery
ruleSingleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleQueryAccess().getAlternatives()); }
		(rule__SingleQuery__Alternatives)
		{ after(grammarAccess.getSingleQueryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSinglePartQuery
entryRuleSinglePartQuery
:
{ before(grammarAccess.getSinglePartQueryRule()); }
	 ruleSinglePartQuery
{ after(grammarAccess.getSinglePartQueryRule()); } 
	 EOF 
;

// Rule SinglePartQuery
ruleSinglePartQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getAlternatives()); }
		(rule__SinglePartQuery__Alternatives)
		{ after(grammarAccess.getSinglePartQueryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiPartQuery
entryRuleMultiPartQuery
:
{ before(grammarAccess.getMultiPartQueryRule()); }
	 ruleMultiPartQuery
{ after(grammarAccess.getMultiPartQueryRule()); } 
	 EOF 
;

// Rule MultiPartQuery
ruleMultiPartQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiPartQueryAccess().getGroup()); }
		(rule__MultiPartQuery__Group__0)
		{ after(grammarAccess.getMultiPartQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiPartSubQuery
entryRuleMultiPartSubQuery
:
{ before(grammarAccess.getMultiPartSubQueryRule()); }
	 ruleMultiPartSubQuery
{ after(grammarAccess.getMultiPartSubQueryRule()); } 
	 EOF 
;

// Rule MultiPartSubQuery
ruleMultiPartSubQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiPartSubQueryAccess().getGroup()); }
		(rule__MultiPartSubQuery__Group__0)
		{ after(grammarAccess.getMultiPartSubQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdatingClause
entryRuleUpdatingClause
:
{ before(grammarAccess.getUpdatingClauseRule()); }
	 ruleUpdatingClause
{ after(grammarAccess.getUpdatingClauseRule()); } 
	 EOF 
;

// Rule UpdatingClause
ruleUpdatingClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getAlternatives()); }
		(rule__UpdatingClause__Alternatives)
		{ after(grammarAccess.getUpdatingClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReadingClause
entryRuleReadingClause
:
{ before(grammarAccess.getReadingClauseRule()); }
	 ruleReadingClause
{ after(grammarAccess.getReadingClauseRule()); } 
	 EOF 
;

// Rule ReadingClause
ruleReadingClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadingClauseAccess().getAlternatives()); }
		(rule__ReadingClause__Alternatives)
		{ after(grammarAccess.getReadingClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreateUniqueConstraint
entryRuleCreateUniqueConstraint
:
{ before(grammarAccess.getCreateUniqueConstraintRule()); }
	 ruleCreateUniqueConstraint
{ after(grammarAccess.getCreateUniqueConstraintRule()); } 
	 EOF 
;

// Rule CreateUniqueConstraint
ruleCreateUniqueConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateUniqueConstraintAccess().getGroup()); }
		(rule__CreateUniqueConstraint__Group__0)
		{ after(grammarAccess.getCreateUniqueConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreateNodePropertyExistenceConstraint
entryRuleCreateNodePropertyExistenceConstraint
:
{ before(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); }
	 ruleCreateNodePropertyExistenceConstraint
{ after(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); } 
	 EOF 
;

// Rule CreateNodePropertyExistenceConstraint
ruleCreateNodePropertyExistenceConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup()); }
		(rule__CreateNodePropertyExistenceConstraint__Group__0)
		{ after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreateRelationshipPropertyExistenceConstraint
entryRuleCreateRelationshipPropertyExistenceConstraint
:
{ before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); }
	 ruleCreateRelationshipPropertyExistenceConstraint
{ after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); } 
	 EOF 
;

// Rule CreateRelationshipPropertyExistenceConstraint
ruleCreateRelationshipPropertyExistenceConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup()); }
		(rule__CreateRelationshipPropertyExistenceConstraint__Group__0)
		{ after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreateIndex
entryRuleCreateIndex
:
{ before(grammarAccess.getCreateIndexRule()); }
	 ruleCreateIndex
{ after(grammarAccess.getCreateIndexRule()); } 
	 EOF 
;

// Rule CreateIndex
ruleCreateIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateIndexAccess().getGroup()); }
		(rule__CreateIndex__Group__0)
		{ after(grammarAccess.getCreateIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropUniqueConstraint
entryRuleDropUniqueConstraint
:
{ before(grammarAccess.getDropUniqueConstraintRule()); }
	 ruleDropUniqueConstraint
{ after(grammarAccess.getDropUniqueConstraintRule()); } 
	 EOF 
;

// Rule DropUniqueConstraint
ruleDropUniqueConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropUniqueConstraintAccess().getGroup()); }
		(rule__DropUniqueConstraint__Group__0)
		{ after(grammarAccess.getDropUniqueConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropNodePropertyExistenceConstraint
entryRuleDropNodePropertyExistenceConstraint
:
{ before(grammarAccess.getDropNodePropertyExistenceConstraintRule()); }
	 ruleDropNodePropertyExistenceConstraint
{ after(grammarAccess.getDropNodePropertyExistenceConstraintRule()); } 
	 EOF 
;

// Rule DropNodePropertyExistenceConstraint
ruleDropNodePropertyExistenceConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup()); }
		(rule__DropNodePropertyExistenceConstraint__Group__0)
		{ after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropRelationshipPropertyExistenceConstraint
entryRuleDropRelationshipPropertyExistenceConstraint
:
{ before(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); }
	 ruleDropRelationshipPropertyExistenceConstraint
{ after(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); } 
	 EOF 
;

// Rule DropRelationshipPropertyExistenceConstraint
ruleDropRelationshipPropertyExistenceConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup()); }
		(rule__DropRelationshipPropertyExistenceConstraint__Group__0)
		{ after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropIndex
entryRuleDropIndex
:
{ before(grammarAccess.getDropIndexRule()); }
	 ruleDropIndex
{ after(grammarAccess.getDropIndexRule()); } 
	 EOF 
;

// Rule DropIndex
ruleDropIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropIndexAccess().getGroup()); }
		(rule__DropIndex__Group__0)
		{ after(grammarAccess.getDropIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndex
entryRuleIndex
:
{ before(grammarAccess.getIndexRule()); }
	 ruleIndex
{ after(grammarAccess.getIndexRule()); } 
	 EOF 
;

// Rule Index
ruleIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexAccess().getGroup()); }
		(rule__Index__Group__0)
		{ after(grammarAccess.getIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUniqueConstraint
entryRuleUniqueConstraint
:
{ before(grammarAccess.getUniqueConstraintRule()); }
	 ruleUniqueConstraint
{ after(grammarAccess.getUniqueConstraintRule()); } 
	 EOF 
;

// Rule UniqueConstraint
ruleUniqueConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUniqueConstraintAccess().getGroup()); }
		(rule__UniqueConstraint__Group__0)
		{ after(grammarAccess.getUniqueConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodePropertyExistenceConstraint
entryRuleNodePropertyExistenceConstraint
:
{ before(grammarAccess.getNodePropertyExistenceConstraintRule()); }
	 ruleNodePropertyExistenceConstraint
{ after(grammarAccess.getNodePropertyExistenceConstraintRule()); } 
	 EOF 
;

// Rule NodePropertyExistenceConstraint
ruleNodePropertyExistenceConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup()); }
		(rule__NodePropertyExistenceConstraint__Group__0)
		{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationshipPropertyExistenceConstraint
entryRuleRelationshipPropertyExistenceConstraint
:
{ before(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); }
	 ruleRelationshipPropertyExistenceConstraint
{ after(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); } 
	 EOF 
;

// Rule RelationshipPropertyExistenceConstraint
ruleRelationshipPropertyExistenceConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup()); }
		(rule__RelationshipPropertyExistenceConstraint__Group__0)
		{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationshipPatternSyntax
entryRuleRelationshipPatternSyntax
:
{ before(grammarAccess.getRelationshipPatternSyntaxRule()); }
	 ruleRelationshipPatternSyntax
{ after(grammarAccess.getRelationshipPatternSyntaxRule()); } 
	 EOF 
;

// Rule RelationshipPatternSyntax
ruleRelationshipPatternSyntax 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup()); }
		(rule__RelationshipPatternSyntax__Group__0)
		{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoadCSV
entryRuleLoadCSV
:
{ before(grammarAccess.getLoadCSVRule()); }
	 ruleLoadCSV
{ after(grammarAccess.getLoadCSVRule()); } 
	 EOF 
;

// Rule LoadCSV
ruleLoadCSV 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadCSVAccess().getGroup()); }
		(rule__LoadCSV__Group__0)
		{ after(grammarAccess.getLoadCSVAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoadCSVWithHeaders
entryRuleLoadCSVWithHeaders
:
{ before(grammarAccess.getLoadCSVWithHeadersRule()); }
	 ruleLoadCSVWithHeaders
{ after(grammarAccess.getLoadCSVWithHeadersRule()); } 
	 EOF 
;

// Rule LoadCSVWithHeaders
ruleLoadCSVWithHeaders 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadCSVWithHeadersAccess().getGroup()); }
		(rule__LoadCSVWithHeaders__Group__0)
		{ after(grammarAccess.getLoadCSVWithHeadersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMatch
entryRuleMatch
:
{ before(grammarAccess.getMatchRule()); }
	 ruleMatch
{ after(grammarAccess.getMatchRule()); } 
	 EOF 
;

// Rule Match
ruleMatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMatchAccess().getGroup()); }
		(rule__Match__Group__0)
		{ after(grammarAccess.getMatchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnwind
entryRuleUnwind
:
{ before(grammarAccess.getUnwindRule()); }
	 ruleUnwind
{ after(grammarAccess.getUnwindRule()); } 
	 EOF 
;

// Rule Unwind
ruleUnwind 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnwindAccess().getGroup()); }
		(rule__Unwind__Group__0)
		{ after(grammarAccess.getUnwindAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMerge
entryRuleMerge
:
{ before(grammarAccess.getMergeRule()); }
	 ruleMerge
{ after(grammarAccess.getMergeRule()); } 
	 EOF 
;

// Rule Merge
ruleMerge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeAccess().getGroup()); }
		(rule__Merge__Group__0)
		{ after(grammarAccess.getMergeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMergeAction
entryRuleMergeAction
:
{ before(grammarAccess.getMergeActionRule()); }
	 ruleMergeAction
{ after(grammarAccess.getMergeActionRule()); } 
	 EOF 
;

// Rule MergeAction
ruleMergeAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeActionAccess().getGroup()); }
		(rule__MergeAction__Group__0)
		{ after(grammarAccess.getMergeActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreate
entryRuleCreate
:
{ before(grammarAccess.getCreateRule()); }
	 ruleCreate
{ after(grammarAccess.getCreateRule()); } 
	 EOF 
;

// Rule Create
ruleCreate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateAccess().getGroup()); }
		(rule__Create__Group__0)
		{ after(grammarAccess.getCreateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSet
entryRuleSet
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetAccess().getGroup()); }
		(rule__Set__Group__0)
		{ after(grammarAccess.getSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetItem
entryRuleSetItem
:
{ before(grammarAccess.getSetItemRule()); }
	 ruleSetItem
{ after(grammarAccess.getSetItemRule()); } 
	 EOF 
;

// Rule SetItem
ruleSetItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetItemAccess().getAlternatives()); }
		(rule__SetItem__Alternatives)
		{ after(grammarAccess.getSetItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelete
entryRuleDelete
:
{ before(grammarAccess.getDeleteRule()); }
	 ruleDelete
{ after(grammarAccess.getDeleteRule()); } 
	 EOF 
;

// Rule Delete
ruleDelete 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteAccess().getGroup()); }
		(rule__Delete__Group__0)
		{ after(grammarAccess.getDeleteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRemove
entryRuleRemove
:
{ before(grammarAccess.getRemoveRule()); }
	 ruleRemove
{ after(grammarAccess.getRemoveRule()); } 
	 EOF 
;

// Rule Remove
ruleRemove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRemoveAccess().getGroup()); }
		(rule__Remove__Group__0)
		{ after(grammarAccess.getRemoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRemoveItem
entryRuleRemoveItem
:
{ before(grammarAccess.getRemoveItemRule()); }
	 ruleRemoveItem
{ after(grammarAccess.getRemoveItemRule()); } 
	 EOF 
;

// Rule RemoveItem
ruleRemoveItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRemoveItemAccess().getAlternatives()); }
		(rule__RemoveItem__Alternatives)
		{ after(grammarAccess.getRemoveItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeach
entryRuleForeach
:
{ before(grammarAccess.getForeachRule()); }
	 ruleForeach
{ after(grammarAccess.getForeachRule()); } 
	 EOF 
;

// Rule Foreach
ruleForeach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeachAccess().getGroup()); }
		(rule__Foreach__Group__0)
		{ after(grammarAccess.getForeachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInQueryCall
entryRuleInQueryCall
:
{ before(grammarAccess.getInQueryCallRule()); }
	 ruleInQueryCall
{ after(grammarAccess.getInQueryCallRule()); } 
	 EOF 
;

// Rule InQueryCall
ruleInQueryCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInQueryCallAccess().getGroup()); }
		(rule__InQueryCall__Group__0)
		{ after(grammarAccess.getInQueryCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStandaloneCall
entryRuleStandaloneCall
:
{ before(grammarAccess.getStandaloneCallRule()); }
	 ruleStandaloneCall
{ after(grammarAccess.getStandaloneCallRule()); } 
	 EOF 
;

// Rule StandaloneCall
ruleStandaloneCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStandaloneCallAccess().getGroup()); }
		(rule__StandaloneCall__Group__0)
		{ after(grammarAccess.getStandaloneCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleYieldItems
entryRuleYieldItems
:
{ before(grammarAccess.getYieldItemsRule()); }
	 ruleYieldItems
{ after(grammarAccess.getYieldItemsRule()); } 
	 EOF 
;

// Rule YieldItems
ruleYieldItems 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYieldItemsAccess().getGroup()); }
		(rule__YieldItems__Group__0)
		{ after(grammarAccess.getYieldItemsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleYieldItem
entryRuleYieldItem
:
{ before(grammarAccess.getYieldItemRule()); }
	 ruleYieldItem
{ after(grammarAccess.getYieldItemRule()); } 
	 EOF 
;

// Rule YieldItem
ruleYieldItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYieldItemAccess().getGroup()); }
		(rule__YieldItem__Group__0)
		{ after(grammarAccess.getYieldItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWith
entryRuleWith
:
{ before(grammarAccess.getWithRule()); }
	 ruleWith
{ after(grammarAccess.getWithRule()); } 
	 EOF 
;

// Rule With
ruleWith 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWithAccess().getGroup()); }
		(rule__With__Group__0)
		{ after(grammarAccess.getWithAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturn
entryRuleReturn
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnAccess().getGroup()); }
		(rule__Return__Group__0)
		{ after(grammarAccess.getReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnBody
entryRuleReturnBody
:
{ before(grammarAccess.getReturnBodyRule()); }
	 ruleReturnBody
{ after(grammarAccess.getReturnBodyRule()); } 
	 EOF 
;

// Rule ReturnBody
ruleReturnBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnBodyAccess().getGroup()); }
		(rule__ReturnBody__Group__0)
		{ after(grammarAccess.getReturnBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnItems
entryRuleReturnItems
:
{ before(grammarAccess.getReturnItemsRule()); }
	 ruleReturnItems
{ after(grammarAccess.getReturnItemsRule()); } 
	 EOF 
;

// Rule ReturnItems
ruleReturnItems 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnItemsAccess().getAlternatives()); }
		(rule__ReturnItems__Alternatives)
		{ after(grammarAccess.getReturnItemsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnItem
entryRuleReturnItem
:
{ before(grammarAccess.getReturnItemRule()); }
	 ruleReturnItem
{ after(grammarAccess.getReturnItemRule()); } 
	 EOF 
;

// Rule ReturnItem
ruleReturnItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnItemAccess().getGroup()); }
		(rule__ReturnItem__Group__0)
		{ after(grammarAccess.getReturnItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrder
entryRuleOrder
:
{ before(grammarAccess.getOrderRule()); }
	 ruleOrder
{ after(grammarAccess.getOrderRule()); } 
	 EOF 
;

// Rule Order
ruleOrder 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderAccess().getGroup()); }
		(rule__Order__Group__0)
		{ after(grammarAccess.getOrderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSkip
entryRuleSkip
:
{ before(grammarAccess.getSkipRule()); }
	 ruleSkip
{ after(grammarAccess.getSkipRule()); } 
	 EOF 
;

// Rule Skip
ruleSkip 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSkipAccess().getGroup()); }
		(rule__Skip__Group__0)
		{ after(grammarAccess.getSkipAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLimit
entryRuleLimit
:
{ before(grammarAccess.getLimitRule()); }
	 ruleLimit
{ after(grammarAccess.getLimitRule()); } 
	 EOF 
;

// Rule Limit
ruleLimit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLimitAccess().getGroup()); }
		(rule__Limit__Group__0)
		{ after(grammarAccess.getLimitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSortItem
entryRuleSortItem
:
{ before(grammarAccess.getSortItemRule()); }
	 ruleSortItem
{ after(grammarAccess.getSortItemRule()); } 
	 EOF 
;

// Rule SortItem
ruleSortItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSortItemAccess().getGroup()); }
		(rule__SortItem__Group__0)
		{ after(grammarAccess.getSortItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHint
entryRuleHint
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getHintRule()); }
	 ruleHint
{ after(grammarAccess.getHintRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Hint
ruleHint 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHintAccess().getAlternatives()); }
		(rule__Hint__Alternatives)
		{ after(grammarAccess.getHintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleStart
entryRuleStart
:
{ before(grammarAccess.getStartRule()); }
	 ruleStart
{ after(grammarAccess.getStartRule()); } 
	 EOF 
;

// Rule Start
ruleStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartAccess().getGroup()); }
		(rule__Start__Group__0)
		{ after(grammarAccess.getStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartPoint
entryRuleStartPoint
:
{ before(grammarAccess.getStartPointRule()); }
	 ruleStartPoint
{ after(grammarAccess.getStartPointRule()); } 
	 EOF 
;

// Rule StartPoint
ruleStartPoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartPointAccess().getGroup()); }
		(rule__StartPoint__Group__0)
		{ after(grammarAccess.getStartPointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLookup
entryRuleLookup
:
{ before(grammarAccess.getLookupRule()); }
	 ruleLookup
{ after(grammarAccess.getLookupRule()); } 
	 EOF 
;

// Rule Lookup
ruleLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLookupAccess().getAlternatives()); }
		(rule__Lookup__Alternatives)
		{ after(grammarAccess.getLookupAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeLookup
entryRuleNodeLookup
:
{ before(grammarAccess.getNodeLookupRule()); }
	 ruleNodeLookup
{ after(grammarAccess.getNodeLookupRule()); } 
	 EOF 
;

// Rule NodeLookup
ruleNodeLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeLookupAccess().getGroup()); }
		(rule__NodeLookup__Group__0)
		{ after(grammarAccess.getNodeLookupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationshipLookup
entryRuleRelationshipLookup
:
{ before(grammarAccess.getRelationshipLookupRule()); }
	 ruleRelationshipLookup
{ after(grammarAccess.getRelationshipLookupRule()); } 
	 EOF 
;

// Rule RelationshipLookup
ruleRelationshipLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipLookupAccess().getGroup()); }
		(rule__RelationshipLookup__Group__0)
		{ after(grammarAccess.getRelationshipLookupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifiedIndexLookup
entryRuleIdentifiedIndexLookup
:
{ before(grammarAccess.getIdentifiedIndexLookupRule()); }
	 ruleIdentifiedIndexLookup
{ after(grammarAccess.getIdentifiedIndexLookupRule()); } 
	 EOF 
;

// Rule IdentifiedIndexLookup
ruleIdentifiedIndexLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getGroup()); }
		(rule__IdentifiedIndexLookup__Group__0)
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexQuery
entryRuleIndexQuery
:
{ before(grammarAccess.getIndexQueryRule()); }
	 ruleIndexQuery
{ after(grammarAccess.getIndexQueryRule()); } 
	 EOF 
;

// Rule IndexQuery
ruleIndexQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexQueryAccess().getGroup()); }
		(rule__IndexQuery__Group__0)
		{ after(grammarAccess.getIndexQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdLookup
entryRuleIdLookup
:
{ before(grammarAccess.getIdLookupRule()); }
	 ruleIdLookup
{ after(grammarAccess.getIdLookupRule()); } 
	 EOF 
;

// Rule IdLookup
ruleIdLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdLookupAccess().getGroup()); }
		(rule__IdLookup__Group__0)
		{ after(grammarAccess.getIdLookupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralIds
entryRuleLiteralIds
:
{ before(grammarAccess.getLiteralIdsRule()); }
	 ruleLiteralIds
{ after(grammarAccess.getLiteralIdsRule()); } 
	 EOF 
;

// Rule LiteralIds
ruleLiteralIds 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralIdsAccess().getGroup()); }
		(rule__LiteralIds__Group__0)
		{ after(grammarAccess.getLiteralIdsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhere
entryRuleWhere
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereAccess().getGroup()); }
		(rule__Where__Group__0)
		{ after(grammarAccess.getWhereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternPart
entryRulePatternPart
:
{ before(grammarAccess.getPatternPartRule()); }
	 rulePatternPart
{ after(grammarAccess.getPatternPartRule()); } 
	 EOF 
;

// Rule PatternPart
rulePatternPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternPartAccess().getAlternatives()); }
		(rule__PatternPart__Alternatives)
		{ after(grammarAccess.getPatternPartAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnonymousPatternPart
entryRuleAnonymousPatternPart
:
{ before(grammarAccess.getAnonymousPatternPartRule()); }
	 ruleAnonymousPatternPart
{ after(grammarAccess.getAnonymousPatternPartRule()); } 
	 EOF 
;

// Rule AnonymousPatternPart
ruleAnonymousPatternPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnonymousPatternPartAccess().getAlternatives()); }
		(rule__AnonymousPatternPart__Alternatives)
		{ after(grammarAccess.getAnonymousPatternPartAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShortestPathPattern
entryRuleShortestPathPattern
:
{ before(grammarAccess.getShortestPathPatternRule()); }
	 ruleShortestPathPattern
{ after(grammarAccess.getShortestPathPatternRule()); } 
	 EOF 
;

// Rule ShortestPathPattern
ruleShortestPathPattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShortestPathPatternAccess().getAlternatives()); }
		(rule__ShortestPathPattern__Alternatives)
		{ after(grammarAccess.getShortestPathPatternAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternElement
entryRulePatternElement
:
{ before(grammarAccess.getPatternElementRule()); }
	 rulePatternElement
{ after(grammarAccess.getPatternElementRule()); } 
	 EOF 
;

// Rule PatternElement
rulePatternElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternElementAccess().getAlternatives()); }
		(rule__PatternElement__Alternatives)
		{ after(grammarAccess.getPatternElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodePattern
entryRuleNodePattern
:
{ before(grammarAccess.getNodePatternRule()); }
	 ruleNodePattern
{ after(grammarAccess.getNodePatternRule()); } 
	 EOF 
;

// Rule NodePattern
ruleNodePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodePatternAccess().getGroup()); }
		(rule__NodePattern__Group__0)
		{ after(grammarAccess.getNodePatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternElementChain
entryRulePatternElementChain
:
{ before(grammarAccess.getPatternElementChainRule()); }
	 rulePatternElementChain
{ after(grammarAccess.getPatternElementChainRule()); } 
	 EOF 
;

// Rule PatternElementChain
rulePatternElementChain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternElementChainAccess().getGroup()); }
		(rule__PatternElementChain__Group__0)
		{ after(grammarAccess.getPatternElementChainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationshipPattern
entryRuleRelationshipPattern
:
{ before(grammarAccess.getRelationshipPatternRule()); }
	 ruleRelationshipPattern
{ after(grammarAccess.getRelationshipPatternRule()); } 
	 EOF 
;

// Rule RelationshipPattern
ruleRelationshipPattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipPatternAccess().getGroup()); }
		(rule__RelationshipPattern__Group__0)
		{ after(grammarAccess.getRelationshipPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationshipDetail
entryRuleRelationshipDetail
:
{ before(grammarAccess.getRelationshipDetailRule()); }
	 ruleRelationshipDetail
{ after(grammarAccess.getRelationshipDetailRule()); } 
	 EOF 
;

// Rule RelationshipDetail
ruleRelationshipDetail 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipDetailAccess().getGroup()); }
		(rule__RelationshipDetail__Group__0)
		{ after(grammarAccess.getRelationshipDetailAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperties
entryRuleProperties
:
{ before(grammarAccess.getPropertiesRule()); }
	 ruleProperties
{ after(grammarAccess.getPropertiesRule()); } 
	 EOF 
;

// Rule Properties
ruleProperties 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertiesAccess().getAlternatives()); }
		(rule__Properties__Alternatives)
		{ after(grammarAccess.getPropertiesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelType
entryRuleRelType
:
{ before(grammarAccess.getRelTypeRule()); }
	 ruleRelType
{ after(grammarAccess.getRelTypeRule()); } 
	 EOF 
;

// Rule RelType
ruleRelType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelTypeAccess().getGroup()); }
		(rule__RelType__Group__0)
		{ after(grammarAccess.getRelTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule RelationshipTypes
ruleRelationshipTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipTypesAccess().getGroup()); }
		(rule__RelationshipTypes__Group__0)
		{ after(grammarAccess.getRelationshipTypesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule NodeLabels
ruleNodeLabels 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); }
			(rule__NodeLabels__NodeLabelsAssignment)
			{ after(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); }
		)
		(
			{ before(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); }
			(rule__NodeLabels__NodeLabelsAssignment)*
			{ after(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeLabel
entryRuleNodeLabel
:
{ before(grammarAccess.getNodeLabelRule()); }
	 ruleNodeLabel
{ after(grammarAccess.getNodeLabelRule()); } 
	 EOF 
;

// Rule NodeLabel
ruleNodeLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeLabelAccess().getGroup()); }
		(rule__NodeLabel__Group__0)
		{ after(grammarAccess.getNodeLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRangeLiteral
entryRuleRangeLiteral
:
{ before(grammarAccess.getRangeLiteralRule()); }
	 ruleRangeLiteral
{ after(grammarAccess.getRangeLiteralRule()); } 
	 EOF 
;

// Rule RangeLiteral
ruleRangeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeLiteralAccess().getGroup()); }
		(rule__RangeLiteral__Group__0)
		{ after(grammarAccess.getRangeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabelName
entryRuleLabelName
:
{ before(grammarAccess.getLabelNameRule()); }
	 ruleLabelName
{ after(grammarAccess.getLabelNameRule()); } 
	 EOF 
;

// Rule LabelName
ruleLabelName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelTypeName
entryRuleRelTypeName
:
{ before(grammarAccess.getRelTypeNameRule()); }
	 ruleRelTypeName
{ after(grammarAccess.getRelTypeNameRule()); } 
	 EOF 
;

// Rule RelTypeName
ruleRelTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotExpression
entryRuleNotExpression
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
		(rule__NotExpression__Alternatives)
		{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddOrSubtractExpression
entryRuleAddOrSubtractExpression
:
{ before(grammarAccess.getAddOrSubtractExpressionRule()); }
	 ruleAddOrSubtractExpression
{ after(grammarAccess.getAddOrSubtractExpressionRule()); } 
	 EOF 
;

// Rule AddOrSubtractExpression
ruleAddOrSubtractExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getGroup()); }
		(rule__AddOrSubtractExpression__Group__0)
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplyDivideModuloExpression
entryRuleMultiplyDivideModuloExpression
:
{ before(grammarAccess.getMultiplyDivideModuloExpressionRule()); }
	 ruleMultiplyDivideModuloExpression
{ after(grammarAccess.getMultiplyDivideModuloExpressionRule()); } 
	 EOF 
;

// Rule MultiplyDivideModuloExpression
ruleMultiplyDivideModuloExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup()); }
		(rule__MultiplyDivideModuloExpression__Group__0)
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowerOfExpression
entryRulePowerOfExpression
:
{ before(grammarAccess.getPowerOfExpressionRule()); }
	 rulePowerOfExpression
{ after(grammarAccess.getPowerOfExpressionRule()); } 
	 EOF 
;

// Rule PowerOfExpression
rulePowerOfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerOfExpressionAccess().getGroup()); }
		(rule__PowerOfExpression__Group__0)
		{ after(grammarAccess.getPowerOfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryAddOrSubtractExpression
entryRuleUnaryAddOrSubtractExpression
:
{ before(grammarAccess.getUnaryAddOrSubtractExpressionRule()); }
	 ruleUnaryAddOrSubtractExpression
{ after(grammarAccess.getUnaryAddOrSubtractExpressionRule()); } 
	 EOF 
;

// Rule UnaryAddOrSubtractExpression
ruleUnaryAddOrSubtractExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives()); }
		(rule__UnaryAddOrSubtractExpression__Alternatives)
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringListNullOperatorExpression
entryRuleStringListNullOperatorExpression
:
{ before(grammarAccess.getStringListNullOperatorExpressionRule()); }
	 ruleStringListNullOperatorExpression
{ after(grammarAccess.getStringListNullOperatorExpressionRule()); } 
	 EOF 
;

// Rule StringListNullOperatorExpression
ruleStringListNullOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup()); }
		(rule__StringListNullOperatorExpression__Group__0)
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOperatorExpression
entryRuleListOperatorExpression
:
{ before(grammarAccess.getListOperatorExpressionRule()); }
	 ruleListOperatorExpression
{ after(grammarAccess.getListOperatorExpressionRule()); } 
	 EOF 
;

// Rule ListOperatorExpression
ruleListOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOperatorExpressionAccess().getAlternatives()); }
		(rule__ListOperatorExpression__Alternatives)
		{ after(grammarAccess.getListOperatorExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringOperatorExpression
entryRuleStringOperatorExpression
:
{ before(grammarAccess.getStringOperatorExpressionRule()); }
	 ruleStringOperatorExpression
{ after(grammarAccess.getStringOperatorExpressionRule()); } 
	 EOF 
;

// Rule StringOperatorExpression
ruleStringOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup()); }
		(rule__StringOperatorExpression__Group__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullOperatorExpression
entryRuleNullOperatorExpression
:
{ before(grammarAccess.getNullOperatorExpressionRule()); }
	 ruleNullOperatorExpression
{ after(grammarAccess.getNullOperatorExpressionRule()); } 
	 EOF 
;

// Rule NullOperatorExpression
ruleNullOperatorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullOperatorExpressionAccess().getAlternatives()); }
		(rule__NullOperatorExpression__Alternatives)
		{ after(grammarAccess.getNullOperatorExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyOrLabelsExpression
entryRulePropertyOrLabelsExpression
:
{ before(grammarAccess.getPropertyOrLabelsExpressionRule()); }
	 rulePropertyOrLabelsExpression
{ after(grammarAccess.getPropertyOrLabelsExpressionRule()); } 
	 EOF 
;

// Rule PropertyOrLabelsExpression
rulePropertyOrLabelsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup()); }
		(rule__PropertyOrLabelsExpression__Group__0)
		{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getAlternatives()); }
		(rule__Atom__Alternatives)
		{ after(grammarAccess.getAtomAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
		(rule__BooleanLiteral__Group__0)
		{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListLiteral
entryRuleListLiteral
:
{ before(grammarAccess.getListLiteralRule()); }
	 ruleListLiteral
{ after(grammarAccess.getListLiteralRule()); } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListLiteralAccess().getGroup()); }
		(rule__ListLiteral__Group__0)
		{ after(grammarAccess.getListLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReduce
entryRuleReduce
:
{ before(grammarAccess.getReduceRule()); }
	 ruleReduce
{ after(grammarAccess.getReduceRule()); } 
	 EOF 
;

// Rule Reduce
ruleReduce 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReduceAccess().getGroup()); }
		(rule__Reduce__Group__0)
		{ after(grammarAccess.getReduceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
		(rule__ParenthesizedExpression__Group__0)
		{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationshipsPattern
entryRuleRelationshipsPattern
:
{ before(grammarAccess.getRelationshipsPatternRule()); }
	 ruleRelationshipsPattern
{ after(grammarAccess.getRelationshipsPatternRule()); } 
	 EOF 
;

// Rule RelationshipsPattern
ruleRelationshipsPattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipsPatternAccess().getGroup()); }
		(rule__RelationshipsPattern__Group__0)
		{ after(grammarAccess.getRelationshipsPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilterExpression
entryRuleFilterExpression
:
{ before(grammarAccess.getFilterExpressionRule()); }
	 ruleFilterExpression
{ after(grammarAccess.getFilterExpressionRule()); } 
	 EOF 
;

// Rule FilterExpression
ruleFilterExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterExpressionAccess().getGroup()); }
		(rule__FilterExpression__Group__0)
		{ after(grammarAccess.getFilterExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdInColl
entryRuleIdInColl
:
{ before(grammarAccess.getIdInCollRule()); }
	 ruleIdInColl
{ after(grammarAccess.getIdInCollRule()); } 
	 EOF 
;

// Rule IdInColl
ruleIdInColl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdInCollAccess().getGroup()); }
		(rule__IdInColl__Group__0)
		{ after(grammarAccess.getIdInCollAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionInvocation
entryRuleFunctionInvocation
:
{ before(grammarAccess.getFunctionInvocationRule()); }
	 ruleFunctionInvocation
{ after(grammarAccess.getFunctionInvocationRule()); } 
	 EOF 
;

// Rule FunctionInvocation
ruleFunctionInvocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getGroup()); }
		(rule__FunctionInvocation__Group__0)
		{ after(grammarAccess.getFunctionInvocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExplicitProcedureInvocation
entryRuleExplicitProcedureInvocation
:
{ before(grammarAccess.getExplicitProcedureInvocationRule()); }
	 ruleExplicitProcedureInvocation
{ after(grammarAccess.getExplicitProcedureInvocationRule()); } 
	 EOF 
;

// Rule ExplicitProcedureInvocation
ruleExplicitProcedureInvocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup()); }
		(rule__ExplicitProcedureInvocation__Group__0)
		{ after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplicitProcedureInvocation
entryRuleImplicitProcedureInvocation
:
{ before(grammarAccess.getImplicitProcedureInvocationRule()); }
	 ruleImplicitProcedureInvocation
{ after(grammarAccess.getImplicitProcedureInvocationRule()); } 
	 EOF 
;

// Rule ImplicitProcedureInvocation
ruleImplicitProcedureInvocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplicitProcedureInvocationAccess().getGroup()); }
		(rule__ImplicitProcedureInvocation__Group__0)
		{ after(grammarAccess.getImplicitProcedureInvocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedureResultField
entryRuleProcedureResultField
:
{ before(grammarAccess.getProcedureResultFieldRule()); }
	 ruleProcedureResultField
{ after(grammarAccess.getProcedureResultFieldRule()); } 
	 EOF 
;

// Rule ProcedureResultField
ruleProcedureResultField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedureName
entryRuleProcedureName
:
{ before(grammarAccess.getProcedureNameRule()); }
	 ruleProcedureName
{ after(grammarAccess.getProcedureNameRule()); } 
	 EOF 
;

// Rule ProcedureName
ruleProcedureName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureNameAccess().getGroup()); }
		(rule__ProcedureName__Group__0)
		{ after(grammarAccess.getProcedureNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamespace
entryRuleNamespace
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamespaceAccess().getGroup()); }
		(rule__Namespace__Group__0)*
		{ after(grammarAccess.getNamespaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListComprehension
entryRuleListComprehension
:
{ before(grammarAccess.getListComprehensionRule()); }
	 ruleListComprehension
{ after(grammarAccess.getListComprehensionRule()); } 
	 EOF 
;

// Rule ListComprehension
ruleListComprehension 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListComprehensionAccess().getGroup()); }
		(rule__ListComprehension__Group__0)
		{ after(grammarAccess.getListComprehensionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternComprehension
entryRulePatternComprehension
:
{ before(grammarAccess.getPatternComprehensionRule()); }
	 rulePatternComprehension
{ after(grammarAccess.getPatternComprehensionRule()); } 
	 EOF 
;

// Rule PatternComprehension
rulePatternComprehension 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternComprehensionAccess().getGroup()); }
		(rule__PatternComprehension__Group__0)
		{ after(grammarAccess.getPatternComprehensionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyLookup
entryRulePropertyLookup
:
{ before(grammarAccess.getPropertyLookupRule()); }
	 rulePropertyLookup
{ after(grammarAccess.getPropertyLookupRule()); } 
	 EOF 
;

// Rule PropertyLookup
rulePropertyLookup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyLookupAccess().getGroup()); }
		(rule__PropertyLookup__Group__0)
		{ after(grammarAccess.getPropertyLookupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseExpression
entryRuleCaseExpression
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 ruleCaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getGroup()); }
		(rule__CaseExpression__Group__0)
		{ after(grammarAccess.getCaseExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseAlternatives
entryRuleCaseAlternatives
:
{ before(grammarAccess.getCaseAlternativesRule()); }
	 ruleCaseAlternatives
{ after(grammarAccess.getCaseAlternativesRule()); } 
	 EOF 
;

// Rule CaseAlternatives
ruleCaseAlternatives 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseAlternativesAccess().getGroup()); }
		(rule__CaseAlternatives__Group__0)
		{ after(grammarAccess.getCaseAlternativesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapLiteral
entryRuleMapLiteral
:
{ before(grammarAccess.getMapLiteralRule()); }
	 ruleMapLiteral
{ after(grammarAccess.getMapLiteralRule()); } 
	 EOF 
;

// Rule MapLiteral
ruleMapLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapLiteralAccess().getGroup()); }
		(rule__MapLiteral__Group__0)
		{ after(grammarAccess.getMapLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapLiteralEntry
entryRuleMapLiteralEntry
:
{ before(grammarAccess.getMapLiteralEntryRule()); }
	 ruleMapLiteralEntry
{ after(grammarAccess.getMapLiteralEntryRule()); } 
	 EOF 
;

// Rule MapLiteralEntry
ruleMapLiteralEntry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapLiteralEntryAccess().getGroup()); }
		(rule__MapLiteralEntry__Group__0)
		{ after(grammarAccess.getMapLiteralEntryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLegacyParameter
entryRuleLegacyParameter
:
{ before(grammarAccess.getLegacyParameterRule()); }
	 ruleLegacyParameter
{ after(grammarAccess.getLegacyParameterRule()); } 
	 EOF 
;

// Rule LegacyParameter
ruleLegacyParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLegacyParameterAccess().getGroup()); }
		(rule__LegacyParameter__Group__0)
		{ after(grammarAccess.getLegacyParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyExpression
entryRulePropertyExpression
:
{ before(grammarAccess.getPropertyExpressionRule()); }
	 rulePropertyExpression
{ after(grammarAccess.getPropertyExpressionRule()); } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyExpressionAccess().getGroup()); }
		(rule__PropertyExpression__Group__0)
		{ after(grammarAccess.getPropertyExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyKeyName
entryRulePropertyKeyName
:
{ before(grammarAccess.getPropertyKeyNameRule()); }
	 rulePropertyKeyName
{ after(grammarAccess.getPropertyKeyNameRule()); } 
	 EOF 
;

// Rule PropertyKeyName
rulePropertyKeyName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftArrowHead
entryRuleLeftArrowHead
:
{ before(grammarAccess.getLeftArrowHeadRule()); }
	 ruleLeftArrowHead
{ after(grammarAccess.getLeftArrowHeadRule()); } 
	 EOF 
;

// Rule LeftArrowHead
ruleLeftArrowHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword()); }
		LessThanSign
		{ after(grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRightArrowHead
entryRuleRightArrowHead
:
{ before(grammarAccess.getRightArrowHeadRule()); }
	 ruleRightArrowHead
{ after(grammarAccess.getRightArrowHeadRule()); } 
	 EOF 
;

// Rule RightArrowHead
ruleRightArrowHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword()); }
		GreaterThanSign
		{ after(grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDash
entryRuleDash
:
{ before(grammarAccess.getDashRule()); }
	 ruleDash
{ after(grammarAccess.getDashRule()); } 
	 EOF 
;

// Rule Dash
ruleDash 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDashAccess().getHyphenMinusKeyword()); }
		HyphenMinus
		{ after(grammarAccess.getDashAccess().getHyphenMinusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecimalInteger
entryRuleDecimalInteger
:
{ before(grammarAccess.getDecimalIntegerRule()); }
	 ruleDecimalInteger
{ after(grammarAccess.getDecimalIntegerRule()); } 
	 EOF 
;

// Rule DecimalInteger
ruleDecimalInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecimalIntegerAccess().getGroup()); }
		(rule__DecimalInteger__Group__0)
		{ after(grammarAccess.getDecimalIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives()); }
		(rule__Number__Alternatives)
		{ after(grammarAccess.getNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSYMBOLIC_NAME_X
entryRuleSYMBOLIC_NAME_X
:
{ before(grammarAccess.getSYMBOLIC_NAME_XRule()); }
	 ruleSYMBOLIC_NAME_X
{ after(grammarAccess.getSYMBOLIC_NAME_XRule()); } 
	 EOF 
;

// Rule SYMBOLIC_NAME_X
ruleSYMBOLIC_NAME_X 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives()); }
		(rule__SYMBOLIC_NAME_X__Alternatives)
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getQueryParserRuleCall_1()); }
		ruleQuery
		{ after(grammarAccess.getStatementAccess().getQueryParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); }
		ruleRegularQuery
		{ after(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); }
		ruleStandaloneCall
		{ after(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2()); }
		ruleBulkImportQuery
		{ after(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleQuery__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleQueryAccess().getMultiPartQueryParserRuleCall_0()); }
		ruleMultiPartQuery
		{ after(grammarAccess.getSingleQueryAccess().getMultiPartQueryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingleQueryAccess().getSinglePartQueryParserRuleCall_1()); }
		ruleSinglePartQuery
		{ after(grammarAccess.getSingleQueryAccess().getSinglePartQueryParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getGroup_0()); }
		(rule__SinglePartQuery__Group_0__0)
		{ after(grammarAccess.getSinglePartQueryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getGroup_1()); }
		(rule__SinglePartQuery__Group_1__0)
		{ after(grammarAccess.getSinglePartQueryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdatingClause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getCreateParserRuleCall_0()); }
		ruleCreate
		{ after(grammarAccess.getUpdatingClauseAccess().getCreateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getMergeParserRuleCall_1()); }
		ruleMerge
		{ after(grammarAccess.getUpdatingClauseAccess().getMergeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getForeachParserRuleCall_2()); }
		ruleForeach
		{ after(grammarAccess.getUpdatingClauseAccess().getForeachParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getDeleteParserRuleCall_3()); }
		ruleDelete
		{ after(grammarAccess.getUpdatingClauseAccess().getDeleteParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getSetParserRuleCall_4()); }
		ruleSet
		{ after(grammarAccess.getUpdatingClauseAccess().getSetParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getUpdatingClauseAccess().getRemoveParserRuleCall_5()); }
		ruleRemove
		{ after(grammarAccess.getUpdatingClauseAccess().getRemoveParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadingClause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadingClauseAccess().getLoadCSVParserRuleCall_0()); }
		ruleLoadCSV
		{ after(grammarAccess.getReadingClauseAccess().getLoadCSVParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getReadingClauseAccess().getStartParserRuleCall_1()); }
		ruleStart
		{ after(grammarAccess.getReadingClauseAccess().getStartParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getReadingClauseAccess().getMatchParserRuleCall_2()); }
		ruleMatch
		{ after(grammarAccess.getReadingClauseAccess().getMatchParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getReadingClauseAccess().getUnwindParserRuleCall_3()); }
		ruleUnwind
		{ after(grammarAccess.getReadingClauseAccess().getUnwindParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getReadingClauseAccess().getInQueryCallParserRuleCall_4()); }
		ruleInQueryCall
		{ after(grammarAccess.getReadingClauseAccess().getInQueryCallParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); }
		ruleCreateIndex
		{ after(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); }
		ruleDropIndex
		{ after(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); }
		ruleCreateUniqueConstraint
		{ after(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); }
		ruleDropUniqueConstraint
		{ after(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); }
		ruleCreateNodePropertyExistenceConstraint
		{ after(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); }
		ruleDropNodePropertyExistenceConstraint
		{ after(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); }
		ruleCreateRelationshipPropertyExistenceConstraint
		{ after(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7()); }
		ruleDropRelationshipPropertyExistenceConstraint
		{ after(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__ActionAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0()); }
		MATCH
		{ after(grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1()); }
		CREATE
		{ after(grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getGroup_0()); }
		(rule__SetItem__Group_0__0)
		{ after(grammarAccess.getSetItemAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetItemAccess().getGroup_1()); }
		(rule__SetItem__Group_1__0)
		{ after(grammarAccess.getSetItemAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getSetItemAccess().getGroup_2()); }
		(rule__SetItem__Group_2__0)
		{ after(grammarAccess.getSetItemAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getSetItemAccess().getGroup_3()); }
		(rule__SetItem__Group_3__0)
		{ after(grammarAccess.getSetItemAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveItemAccess().getGroup_0()); }
		(rule__RemoveItem__Group_0__0)
		{ after(grammarAccess.getRemoveItemAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRemoveItemAccess().getGroup_1()); }
		(rule__RemoveItem__Group_1__0)
		{ after(grammarAccess.getRemoveItemAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__InvocationAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0()); }
		ruleExplicitProcedureInvocation
		{ after(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1()); }
		ruleImplicitProcedureInvocation
		{ after(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYieldItemsAccess().getGroup_1_0()); }
		(rule__YieldItems__Group_1_0__0)
		{ after(grammarAccess.getYieldItemsAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1()); }
		HyphenMinus
		{ after(grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemsAccess().getGroup_0()); }
		(rule__ReturnItems__Group_0__0)
		{ after(grammarAccess.getReturnItemsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getReturnItemsAccess().getGroup_1()); }
		(rule__ReturnItems__Group_1__0)
		{ after(grammarAccess.getReturnItemsAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SortItem__SortAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0()); }
		DESCENDING
		{ after(grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1()); }
		DESC
		{ after(grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2()); }
		ASCENDING
		{ after(grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3()); }
		ASC
		{ after(grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getGroup_0()); }
		(rule__Hint__Group_0__0)
		{ after(grammarAccess.getHintAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getHintAccess().getGroup_1()); }
		(rule__Hint__Group_1__0)
		{ after(grammarAccess.getHintAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getHintAccess().getGroup_2()); }
		(rule__Hint__Group_2__0)
		{ after(grammarAccess.getHintAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lookup__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0()); }
		ruleNodeLookup
		{ after(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1()); }
		ruleRelationshipLookup
		{ after(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLookup__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); }
		ruleIdentifiedIndexLookup
		{ after(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1()); }
		ruleIndexQuery
		{ after(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2()); }
		ruleIdLookup
		{ after(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipLookup__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0()); }
		RELATIONSHIP
		{ after(grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1()); }
		REL
		{ after(grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipLookup__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); }
		ruleIdentifiedIndexLookup
		{ after(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1()); }
		ruleIndexQuery
		{ after(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2()); }
		ruleIdLookup
		{ after(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0()); }
		(rule__IdentifiedIndexLookup__ValueAssignment_5_0)
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1()); }
		(rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1)
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0()); }
		(rule__IndexQuery__QueryAssignment_3_0)
		{ after(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1()); }
		(rule__IndexQuery__ParameterAssignment_3_1)
		{ after(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0()); }
		(rule__IdLookup__IdsAssignment_1_0)
		{ after(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1()); }
		(rule__IdLookup__LegacyParameterAssignment_1_1)
		{ after(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2()); }
		(rule__IdLookup__WildcardAssignment_1_2)
		{ after(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternPartAccess().getGroup_0()); }
		(rule__PatternPart__Group_0__0)
		{ after(grammarAccess.getPatternPartAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1()); }
		ruleAnonymousPatternPart
		{ after(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousPatternPart__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0()); }
		ruleShortestPathPattern
		{ after(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1()); }
		rulePatternElement
		{ after(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShortestPathPatternAccess().getGroup_0()); }
		(rule__ShortestPathPattern__Group_0__0)
		{ after(grammarAccess.getShortestPathPatternAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getShortestPathPatternAccess().getGroup_1()); }
		(rule__ShortestPathPattern__Group_1__0)
		{ after(grammarAccess.getShortestPathPatternAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternElementAccess().getGroup_0()); }
		(rule__PatternElement__Group_0__0)
		{ after(grammarAccess.getPatternElementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPatternElementAccess().getGroup_1()); }
		(rule__PatternElement__Group_1__0)
		{ after(grammarAccess.getPatternElementAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Properties__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0()); }
		ruleMapLiteral
		{ after(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1()); }
		ruleParameter
		{ after(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2()); }
		ruleLegacyParameter
		{ after(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getGroup_0()); }
		(rule__NotExpression__Group_0__0)
		{ after(grammarAccess.getNotExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1()); }
		ruleComparisonExpression
		{ after(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
		EqualsSign
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2()); }
		LessThanSign
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); }
		GreaterThanSign
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		Solidus
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
		PercentSign
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0()); }
		ruleStringListNullOperatorExpression
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1()); }
		(rule__UnaryAddOrSubtractExpression__Group_1__0)
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0()); }
		ruleStringOperatorExpression
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsListOperatorExpressionParserRuleCall_1_1_0_1()); }
		ruleListOperatorExpression
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsListOperatorExpressionParserRuleCall_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2()); }
		ruleNullOperatorExpression
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperatorExpressionAccess().getGroup_0()); }
		(rule__ListOperatorExpression__Group_0__0)
		{ after(grammarAccess.getListOperatorExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getListOperatorExpressionAccess().getGroup_1()); }
		(rule__ListOperatorExpression__Group_1__0)
		{ after(grammarAccess.getListOperatorExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0()); }
		(rule__StringOperatorExpression__Group_0_0__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1()); }
		(rule__StringOperatorExpression__Group_0_1__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2()); }
		(rule__StringOperatorExpression__Group_0_2__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3()); }
		(rule__StringOperatorExpression__Group_0_3__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4()); }
		(rule__StringOperatorExpression__Group_0_4__0)
		{ after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullOperatorExpressionAccess().getGroup_0()); }
		(rule__NullOperatorExpression__Group_0__0)
		{ after(grammarAccess.getNullOperatorExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNullOperatorExpressionAccess().getGroup_1()); }
		(rule__NullOperatorExpression__Group_1__0)
		{ after(grammarAccess.getNullOperatorExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getParameterParserRuleCall_1()); }
		ruleParameter
		{ after(grammarAccess.getAtomAccess().getParameterParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_2()); }
		ruleLegacyParameter
		{ after(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_3()); }
		ruleCaseExpression
		{ after(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_4()); }
		(rule__Atom__Group_4__0)
		{ after(grammarAccess.getAtomAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_5()); }
		ruleListComprehension
		{ after(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_6()); }
		rulePatternComprehension
		{ after(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_7()); }
		(rule__Atom__Group_7__0)
		{ after(grammarAccess.getAtomAccess().getGroup_7()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_8()); }
		(rule__Atom__Group_8__0)
		{ after(grammarAccess.getAtomAccess().getGroup_8()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getReduceParserRuleCall_9()); }
		ruleReduce
		{ after(grammarAccess.getAtomAccess().getReduceParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_10()); }
		(rule__Atom__Group_10__0)
		{ after(grammarAccess.getAtomAccess().getGroup_10()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_11()); }
		(rule__Atom__Group_11__0)
		{ after(grammarAccess.getAtomAccess().getGroup_11()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_12()); }
		(rule__Atom__Group_12__0)
		{ after(grammarAccess.getAtomAccess().getGroup_12()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_13()); }
		(rule__Atom__Group_13__0)
		{ after(grammarAccess.getAtomAccess().getGroup_13()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_14()); }
		ruleShortestPathPattern
		{ after(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_14()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_15()); }
		ruleRelationshipsPattern
		{ after(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_15()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_16()); }
		ruleParenthesizedExpression
		{ after(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_16()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_17()); }
		ruleFunctionInvocation
		{ after(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_17()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_18()); }
		(rule__Atom__Group_18__0)
		{ after(grammarAccess.getAtomAccess().getGroup_18()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
		ruleNumberLiteral
		{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
		(rule__Literal__Group_2__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_4()); }
		ruleMapLiteral
		{ after(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_5()); }
		ruleListLiteral
		{ after(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0()); }
		TRUE
		{ after(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1()); }
		FALSE
		{ after(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyLookupAccess().getGroup_1_0()); }
		(rule__PropertyLookup__Group_1_0__0)
		{ after(grammarAccess.getPropertyLookupAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1()); }
		(rule__PropertyLookup__PropertyKeyNameAssignment_1_1)
		{ after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0()); }
		QuestionMark
		{ after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1()); }
		ExclamationMark
		{ after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); }
		(rule__CaseExpression__Group_0_0__0)
		{ after(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCaseExpressionAccess().getGroup_0_1()); }
		(rule__CaseExpression__Group_0_1__0)
		{ after(grammarAccess.getCaseExpressionAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__ParameterAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1()); }
		ruleNumber
		{ after(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ParameterAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1()); }
		ruleNumber
		{ after(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); }
		RULE_HEX
		{ after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getGroup_1()); }
		(rule__Number__Group_1__0)
		{ after(grammarAccess.getNumberAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); }
		RULE_DECIMAL
		{ after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); }
		RULE_DECIMAL
		{ after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SYMBOLIC_NAME_X__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1()); }
		CYPHER
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2()); }
		EXPLAIN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3()); }
		PROFILE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4()); }
		USING
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5()); }
		PERIODIC
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6()); }
		COMMIT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7()); }
		UNION
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8()); }
		ALL
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9()); }
		CREATE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10()); }
		INDEX
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11()); }
		ON
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12()); }
		DROP
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13()); }
		CONSTRAINT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14()); }
		ASSERT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15()); }
		IS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16()); }
		UNIQUE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17()); }
		EXISTS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18()); }
		LOAD
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19()); }
		CSV
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20()); }
		WITH
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21()); }
		HEADERS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22()); }
		FROM
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23()); }
		AS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24()); }
		FIELDTERMINATOR
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25()); }
		OPTIONAL
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26()); }
		MATCH
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27()); }
		UNWIND
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28()); }
		MERGE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29()); }
		SET
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30()); }
		DELETE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31()); }
		DETACH
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32()); }
		REMOVE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33()); }
		FOREACH
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34()); }
		IN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35()); }
		DISTINCT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36()); }
		RETURN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37()); }
		ORDER
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38()); }
		BY
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39()); }
		SKIP
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40()); }
		LIMIT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41()); }
		DESCENDING
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42()); }
		DESC
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43()); }
		ASCENDING
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44()); }
		ASC
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45()); }
		JOIN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46()); }
		SCAN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47()); }
		START
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48()); }
		NODE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49()); }
		RELATIONSHIP
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50()); }
		REL
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51()); }
		WHERE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52()); }
		SHORTESTPATH
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53()); }
		ALLSHORTESTPATHS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54()); }
		OR
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55()); }
		XOR
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56()); }
		AND
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57()); }
		NOT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58()); }
		STARTS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59()); }
		ENDS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60()); }
		CONTAINS
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61()); }
		NULL
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62()); }
		TRUE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63()); }
		FALSE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64()); }
		COUNT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65()); }
		FILTER
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66()); }
		EXTRACT
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67()); }
		ANY
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68()); }
		NONE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69()); }
		SINGLE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70()); }
		REDUCE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71()); }
		CASE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72()); }
		ELSE
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73()); }
		END
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74()); }
		WHEN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74()); }
	)
	|
	(
		{ before(grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75()); }
		THEN
		{ after(grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cypher__Group__0__Impl
	rule__Cypher__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherAccess().getCypherAction_0()); }
	()
	{ after(grammarAccess.getCypherAccess().getCypherAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cypher__Group__1__Impl
	rule__Cypher__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1()); }
	(rule__Cypher__QueryOptionsAssignment_1)
	{ after(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cypher__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherAccess().getGroup_2()); }
	(rule__Cypher__Group_2__0)*
	{ after(grammarAccess.getCypherAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cypher__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cypher__Group_2__0__Impl
	rule__Cypher__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherAccess().getStatementsAssignment_2_0()); }
	(rule__Cypher__StatementsAssignment_2_0)
	{ after(grammarAccess.getCypherAccess().getStatementsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cypher__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherAccess().getSemicolonKeyword_2_1()); }
	(Semicolon)?
	{ after(grammarAccess.getCypherAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QueryOptions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QueryOptions__Group__0__Impl
	rule__QueryOptions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0()); }
	()
	{ after(grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QueryOptions__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()); }
	(rule__QueryOptions__UnorderedGroup_1)
	{ after(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CypherOption__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CypherOption__Group__0__Impl
	rule__CypherOption__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherOptionAccess().getCypherOptionAction_0()); }
	()
	{ after(grammarAccess.getCypherOptionAccess().getCypherOptionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CypherOption__Group__1__Impl
	rule__CypherOption__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1()); }
	CYPHER
	{ after(grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CypherOption__Group__2__Impl
	rule__CypherOption__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2()); }
	(rule__CypherOption__VersionNumberAssignment_2)?
	{ after(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CypherOption__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3()); }
	(rule__CypherOption__ConfigurationOptionAssignment_3)*
	{ after(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationOption__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfigurationOption__Group__0__Impl
	rule__ConfigurationOption__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0()); }
	(rule__ConfigurationOption__KeyAssignment_0)
	{ after(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfigurationOption__Group__1__Impl
	rule__ConfigurationOption__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfigurationOption__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2()); }
	(rule__ConfigurationOption__ValueAssignment_2)
	{ after(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularQuery__Group__0__Impl
	rule__RegularQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0()); }
	ruleSingleQuery
	{ after(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularQueryAccess().getGroup_1()); }
	(rule__RegularQuery__Group_1__0)?
	{ after(grammarAccess.getRegularQueryAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularQuery__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularQuery__Group_1__0__Impl
	rule__RegularQuery__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0()); }
	()
	{ after(grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularQuery__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); }
		(rule__RegularQuery__UnionAssignment_1_1)
		{ after(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); }
		(rule__RegularQuery__UnionAssignment_1_1)*
		{ after(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BulkImportQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BulkImportQuery__Group__0__Impl
	rule__BulkImportQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BulkImportQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0()); }
	(rule__BulkImportQuery__PeriodicCommitHintAssignment_0)
	{ after(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BulkImportQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BulkImportQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BulkImportQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1()); }
	(rule__BulkImportQuery__LoadCSVQueryAssignment_1)
	{ after(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PeriodicCommitHint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PeriodicCommitHint__Group__0__Impl
	rule__PeriodicCommitHint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0()); }
	()
	{ after(grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PeriodicCommitHint__Group__1__Impl
	rule__PeriodicCommitHint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1()); }
	USING
	{ after(grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PeriodicCommitHint__Group__2__Impl
	rule__PeriodicCommitHint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2()); }
	PERIODIC
	{ after(grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PeriodicCommitHint__Group__3__Impl
	rule__PeriodicCommitHint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3()); }
	COMMIT
	{ after(grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PeriodicCommitHint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4()); }
	(rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4)?
	{ after(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoadCSVQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSVQuery__Group__0__Impl
	rule__LoadCSVQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0()); }
	(rule__LoadCSVQuery__LoadCSVAssignment_0)
	{ after(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSVQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVQueryAccess().getSingleQueryAssignment_1()); }
	(rule__LoadCSVQuery__SingleQueryAssignment_1)
	{ after(grammarAccess.getLoadCSVQueryAccess().getSingleQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Union__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Union__Group__0__Impl
	rule__Union__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionAccess().getUNIONKeyword_0()); }
	UNION
	{ after(grammarAccess.getUnionAccess().getUNIONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Union__Group__1__Impl
	rule__Union__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionAccess().getAllAssignment_1()); }
	(rule__Union__AllAssignment_1)?
	{ after(grammarAccess.getUnionAccess().getAllAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Union__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionAccess().getSingleQueryAssignment_2()); }
	(rule__Union__SingleQueryAssignment_2)
	{ after(grammarAccess.getUnionAccess().getSingleQueryAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SinglePartQuery__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SinglePartQuery__Group_0__0__Impl
	rule__SinglePartQuery__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_0_0()); }
	(rule__SinglePartQuery__ReadingClausesAssignment_0_0)*
	{ after(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SinglePartQuery__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_0_1()); }
	(rule__SinglePartQuery__ReturnAssignment_0_1)
	{ after(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SinglePartQuery__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SinglePartQuery__Group_1__0__Impl
	rule__SinglePartQuery__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_1_0()); }
	(rule__SinglePartQuery__ReadingClausesAssignment_1_0)*
	{ after(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SinglePartQuery__Group_1__1__Impl
	rule__SinglePartQuery__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); }
		(rule__SinglePartQuery__UpdatingClausesAssignment_1_1)
		{ after(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); }
		(rule__SinglePartQuery__UpdatingClausesAssignment_1_1)*
		{ after(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SinglePartQuery__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_1_2()); }
	(rule__SinglePartQuery__ReturnAssignment_1_2)?
	{ after(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiPartQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiPartQuery__Group__0__Impl
	rule__MultiPartQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); }
		(rule__MultiPartQuery__SubQueriesAssignment_0)
		{ after(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); }
	)
	(
		{ before(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); }
		(rule__MultiPartQuery__SubQueriesAssignment_0)*
		{ after(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiPartQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiPartQueryAccess().getSinglePartQueryAssignment_1()); }
	(rule__MultiPartQuery__SinglePartQueryAssignment_1)
	{ after(grammarAccess.getMultiPartQueryAccess().getSinglePartQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiPartSubQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiPartSubQuery__Group__0__Impl
	rule__MultiPartSubQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesAssignment_0()); }
	(rule__MultiPartSubQuery__ReadingClausesAssignment_0)*
	{ after(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiPartSubQuery__Group__1__Impl
	rule__MultiPartSubQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesAssignment_1()); }
	(rule__MultiPartSubQuery__UpdatingClausesAssignment_1)*
	{ after(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiPartSubQuery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiPartSubQueryAccess().getWithPartAssignment_2()); }
	(rule__MultiPartSubQuery__WithPartAssignment_2)
	{ after(grammarAccess.getMultiPartSubQueryAccess().getWithPartAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateUniqueConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateUniqueConstraint__Group__0__Impl
	rule__CreateUniqueConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateUniqueConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0()); }
	CREATE
	{ after(grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateUniqueConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateUniqueConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateUniqueConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1()); }
	ruleUniqueConstraint
	{ after(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateNodePropertyExistenceConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateNodePropertyExistenceConstraint__Group__0__Impl
	rule__CreateNodePropertyExistenceConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateNodePropertyExistenceConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0()); }
	CREATE
	{ after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateNodePropertyExistenceConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateNodePropertyExistenceConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateNodePropertyExistenceConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1()); }
	ruleNodePropertyExistenceConstraint
	{ after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateRelationshipPropertyExistenceConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl
	rule__CreateRelationshipPropertyExistenceConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0()); }
	CREATE
	{ after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateRelationshipPropertyExistenceConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1()); }
	ruleRelationshipPropertyExistenceConstraint
	{ after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateIndex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateIndex__Group__0__Impl
	rule__CreateIndex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateIndex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateIndexAccess().getCREATEKeyword_0()); }
	CREATE
	{ after(grammarAccess.getCreateIndexAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateIndex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateIndex__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateIndex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateIndexAccess().getIndexAssignment_1()); }
	(rule__CreateIndex__IndexAssignment_1)
	{ after(grammarAccess.getCreateIndexAccess().getIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropUniqueConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropUniqueConstraint__Group__0__Impl
	rule__DropUniqueConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropUniqueConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0()); }
	DROP
	{ after(grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropUniqueConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropUniqueConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropUniqueConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1()); }
	(rule__DropUniqueConstraint__UniqueConstraintAssignment_1)
	{ after(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropNodePropertyExistenceConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropNodePropertyExistenceConstraint__Group__0__Impl
	rule__DropNodePropertyExistenceConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropNodePropertyExistenceConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0()); }
	DROP
	{ after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropNodePropertyExistenceConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropNodePropertyExistenceConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropNodePropertyExistenceConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1()); }
	(rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1)
	{ after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropRelationshipPropertyExistenceConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl
	rule__DropRelationshipPropertyExistenceConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0()); }
	DROP
	{ after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropRelationshipPropertyExistenceConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1()); }
	(rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1)
	{ after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropIndex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropIndex__Group__0__Impl
	rule__DropIndex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropIndex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropIndexAccess().getDROPKeyword_0()); }
	DROP
	{ after(grammarAccess.getDropIndexAccess().getDROPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropIndex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropIndex__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropIndex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropIndexAccess().getIndexAssignment_1()); }
	(rule__DropIndex__IndexAssignment_1)
	{ after(grammarAccess.getDropIndexAccess().getIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Index__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__0__Impl
	rule__Index__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getINDEXKeyword_0()); }
	INDEX
	{ after(grammarAccess.getIndexAccess().getINDEXKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__1__Impl
	rule__Index__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getONKeyword_1()); }
	ON
	{ after(grammarAccess.getIndexAccess().getONKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__2__Impl
	rule__Index__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getNodeLabelAssignment_2()); }
	(rule__Index__NodeLabelAssignment_2)
	{ after(grammarAccess.getIndexAccess().getNodeLabelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__3__Impl
	rule__Index__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3()); }
	LeftParenthesis
	{ after(grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__4__Impl
	rule__Index__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4()); }
	(rule__Index__PropertyKeyNameAssignment_4)
	{ after(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getIndexAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UniqueConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__0__Impl
	rule__UniqueConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0()); }
	CONSTRAINT
	{ after(grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__1__Impl
	rule__UniqueConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getONKeyword_1()); }
	ON
	{ after(grammarAccess.getUniqueConstraintAccess().getONKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__2__Impl
	rule__UniqueConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__3__Impl
	rule__UniqueConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3()); }
	(rule__UniqueConstraint__VariableAssignment_3)
	{ after(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__4__Impl
	rule__UniqueConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4()); }
	(rule__UniqueConstraint__NodeLabelAssignment_4)
	{ after(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__5__Impl
	rule__UniqueConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__6__Impl
	rule__UniqueConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6()); }
	ASSERT
	{ after(grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__7__Impl
	rule__UniqueConstraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7()); }
	(rule__UniqueConstraint__PropertyExpressionAssignment_7)
	{ after(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__8__Impl
	rule__UniqueConstraint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getISKeyword_8()); }
	IS
	{ after(grammarAccess.getUniqueConstraintAccess().getISKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UniqueConstraint__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9()); }
	UNIQUE
	{ after(grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodePropertyExistenceConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__0__Impl
	rule__NodePropertyExistenceConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); }
	CONSTRAINT
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__1__Impl
	rule__NodePropertyExistenceConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1()); }
	ON
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__2__Impl
	rule__NodePropertyExistenceConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__3__Impl
	rule__NodePropertyExistenceConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3()); }
	(rule__NodePropertyExistenceConstraint__VariableAssignment_3)
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__4__Impl
	rule__NodePropertyExistenceConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4()); }
	(rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4)
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__5__Impl
	rule__NodePropertyExistenceConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__6__Impl
	rule__NodePropertyExistenceConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6()); }
	ASSERT
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__7__Impl
	rule__NodePropertyExistenceConstraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7()); }
	EXISTS
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__8__Impl
	rule__NodePropertyExistenceConstraint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8()); }
	LeftParenthesis
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__9__Impl
	rule__NodePropertyExistenceConstraint__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9()); }
	(rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9)
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePropertyExistenceConstraint__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10()); }
	RightParenthesis
	{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipPropertyExistenceConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__0__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); }
	CONSTRAINT
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__1__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1()); }
	ON
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__2__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2()); }
	(rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2)
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__3__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3()); }
	ASSERT
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__4__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4()); }
	EXISTS
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__5__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5()); }
	LeftParenthesis
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__6__Impl
	rule__RelationshipPropertyExistenceConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6()); }
	(rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6)
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPropertyExistenceConstraint__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7()); }
	RightParenthesis
	{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipPatternSyntax__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__0__Impl
	rule__RelationshipPatternSyntax__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__1__Impl
	rule__RelationshipPatternSyntax__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1()); }
	RightParenthesis
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__2__Impl
	rule__RelationshipPatternSyntax__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2()); }
	(rule__RelationshipPatternSyntax__IncomingAssignment_2)?
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__3__Impl
	rule__RelationshipPatternSyntax__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3()); }
	ruleDash
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__4__Impl
	rule__RelationshipPatternSyntax__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4()); }
	LeftSquareBracket
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__5__Impl
	rule__RelationshipPatternSyntax__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5()); }
	(rule__RelationshipPatternSyntax__VariableAssignment_5)
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__6__Impl
	rule__RelationshipPatternSyntax__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6()); }
	(rule__RelationshipPatternSyntax__RelTypeAssignment_6)
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__7__Impl
	rule__RelationshipPatternSyntax__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7()); }
	RightSquareBracket
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__8__Impl
	rule__RelationshipPatternSyntax__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8()); }
	ruleDash
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__9__Impl
	rule__RelationshipPatternSyntax__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9()); }
	(rule__RelationshipPatternSyntax__OutgoingAssignment_9)?
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__10__Impl
	rule__RelationshipPatternSyntax__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10()); }
	LeftParenthesis
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPatternSyntax__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11()); }
	RightParenthesis
	{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoadCSV__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__0__Impl
	rule__LoadCSV__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getLoadCSVAction_0()); }
	()
	{ after(grammarAccess.getLoadCSVAccess().getLoadCSVAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__1__Impl
	rule__LoadCSV__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getLOADKeyword_1()); }
	LOAD
	{ after(grammarAccess.getLoadCSVAccess().getLOADKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__2__Impl
	rule__LoadCSV__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getCSVKeyword_2()); }
	CSV
	{ after(grammarAccess.getLoadCSVAccess().getCSVKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__3__Impl
	rule__LoadCSV__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3()); }
	(rule__LoadCSV__WithHeadersAssignment_3)?
	{ after(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__4__Impl
	rule__LoadCSV__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getFROMKeyword_4()); }
	FROM
	{ after(grammarAccess.getLoadCSVAccess().getFROMKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__5__Impl
	rule__LoadCSV__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5()); }
	(rule__LoadCSV__ExpressionAssignment_5)
	{ after(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__6__Impl
	rule__LoadCSV__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getASKeyword_6()); }
	AS
	{ after(grammarAccess.getLoadCSVAccess().getASKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__7__Impl
	rule__LoadCSV__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getVariableAssignment_7()); }
	(rule__LoadCSV__VariableAssignment_7)
	{ after(grammarAccess.getLoadCSVAccess().getVariableAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getGroup_8()); }
	(rule__LoadCSV__Group_8__0)?
	{ after(grammarAccess.getLoadCSVAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoadCSV__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group_8__0__Impl
	rule__LoadCSV__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0()); }
	FIELDTERMINATOR
	{ after(grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSV__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1()); }
	(rule__LoadCSV__FieldterminatorAssignment_8_1)
	{ after(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoadCSVWithHeaders__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSVWithHeaders__Group__0__Impl
	rule__LoadCSVWithHeaders__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVWithHeaders__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0()); }
	WITH
	{ after(grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVWithHeaders__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadCSVWithHeaders__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVWithHeaders__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1()); }
	HEADERS
	{ after(grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Match__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__0__Impl
	rule__Match__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getOptionalAssignment_0()); }
	(rule__Match__OptionalAssignment_0)?
	{ after(grammarAccess.getMatchAccess().getOptionalAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__1__Impl
	rule__Match__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getMATCHKeyword_1()); }
	MATCH
	{ after(grammarAccess.getMatchAccess().getMATCHKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__2__Impl
	rule__Match__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getPatternAssignment_2()); }
	(rule__Match__PatternAssignment_2)
	{ after(grammarAccess.getMatchAccess().getPatternAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__3__Impl
	rule__Match__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getHintsAssignment_3()); }
	(rule__Match__HintsAssignment_3)*
	{ after(grammarAccess.getMatchAccess().getHintsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getWhereAssignment_4()); }
	(rule__Match__WhereAssignment_4)?
	{ after(grammarAccess.getMatchAccess().getWhereAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unwind__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unwind__Group__0__Impl
	rule__Unwind__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnwindAccess().getUNWINDKeyword_0()); }
	UNWIND
	{ after(grammarAccess.getUnwindAccess().getUNWINDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unwind__Group__1__Impl
	rule__Unwind__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnwindAccess().getExpressionAssignment_1()); }
	(rule__Unwind__ExpressionAssignment_1)
	{ after(grammarAccess.getUnwindAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unwind__Group__2__Impl
	rule__Unwind__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnwindAccess().getASKeyword_2()); }
	AS
	{ after(grammarAccess.getUnwindAccess().getASKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unwind__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnwindAccess().getVariableAssignment_3()); }
	(rule__Unwind__VariableAssignment_3)
	{ after(grammarAccess.getUnwindAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Merge__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Merge__Group__0__Impl
	rule__Merge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeAccess().getMERGEKeyword_0()); }
	MERGE
	{ after(grammarAccess.getMergeAccess().getMERGEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Merge__Group__1__Impl
	rule__Merge__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeAccess().getPatternPartAssignment_1()); }
	(rule__Merge__PatternPartAssignment_1)
	{ after(grammarAccess.getMergeAccess().getPatternPartAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Merge__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeAccess().getMergeActionsAssignment_2()); }
	(rule__Merge__MergeActionsAssignment_2)*
	{ after(grammarAccess.getMergeAccess().getMergeActionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MergeAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeAction__Group__0__Impl
	rule__MergeAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeActionAccess().getONKeyword_0()); }
	ON
	{ after(grammarAccess.getMergeActionAccess().getONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeAction__Group__1__Impl
	rule__MergeAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeActionAccess().getActionAssignment_1()); }
	(rule__MergeAction__ActionAssignment_1)
	{ after(grammarAccess.getMergeActionAccess().getActionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeActionAccess().getSetAssignment_2()); }
	(rule__MergeAction__SetAssignment_2)
	{ after(grammarAccess.getMergeActionAccess().getSetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Create__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__0__Impl
	rule__Create__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getCREATEKeyword_0()); }
	CREATE
	{ after(grammarAccess.getCreateAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__1__Impl
	rule__Create__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getUniqueContraintAssignment_1()); }
	(rule__Create__UniqueContraintAssignment_1)?
	{ after(grammarAccess.getCreateAccess().getUniqueContraintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Create__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAccess().getPatternAssignment_2()); }
	(rule__Create__PatternAssignment_2)
	{ after(grammarAccess.getCreateAccess().getPatternAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getSETKeyword_0()); }
	SET
	{ after(grammarAccess.getSetAccess().getSETKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getSetItemsAssignment_1()); }
	(rule__Set__SetItemsAssignment_1)
	{ after(grammarAccess.getSetAccess().getSetItemsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getGroup_2()); }
	(rule__Set__Group_2__0)*
	{ after(grammarAccess.getSetAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group_2__0__Impl
	rule__Set__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getSetAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getSetItemsAssignment_2_1()); }
	(rule__Set__SetItemsAssignment_2_1)
	{ after(grammarAccess.getSetAccess().getSetItemsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetItem__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_0__0__Impl
	rule__SetItem__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0()); }
	(rule__SetItem__PropertyExpressionAssignment_0_0)
	{ after(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_0__1__Impl
	rule__SetItem__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1()); }
	EqualsSign
	{ after(grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2()); }
	(rule__SetItem__ExpressionAssignment_0_2)
	{ after(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetItem__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_1__0__Impl
	rule__SetItem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getVariableAssignment_1_0()); }
	(rule__SetItem__VariableAssignment_1_0)
	{ after(grammarAccess.getSetItemAccess().getVariableAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_1__1__Impl
	rule__SetItem__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1()); }
	EqualsSign
	{ after(grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2()); }
	(rule__SetItem__ExpressionAssignment_1_2)
	{ after(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetItem__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_2__0__Impl
	rule__SetItem__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getVariableAssignment_2_0()); }
	(rule__SetItem__VariableAssignment_2_0)
	{ after(grammarAccess.getSetItemAccess().getVariableAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_2__1__Impl
	rule__SetItem__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1()); }
	PlusSignEqualsSign
	{ after(grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2()); }
	(rule__SetItem__ExpressionAssignment_2_2)
	{ after(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetItem__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_3__0__Impl
	rule__SetItem__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getVariableAssignment_3_0()); }
	(rule__SetItem__VariableAssignment_3_0)
	{ after(grammarAccess.getSetItemAccess().getVariableAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetItem__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetItemAccess().getNodeLabelsParserRuleCall_3_1()); }
	ruleNodeLabels
	{ after(grammarAccess.getSetItemAccess().getNodeLabelsParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__0__Impl
	rule__Delete__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getDetachAssignment_0()); }
	(rule__Delete__DetachAssignment_0)?
	{ after(grammarAccess.getDeleteAccess().getDetachAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__1__Impl
	rule__Delete__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getDELETEKeyword_1()); }
	DELETE
	{ after(grammarAccess.getDeleteAccess().getDELETEKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__2__Impl
	rule__Delete__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getExpressionsAssignment_2()); }
	(rule__Delete__ExpressionsAssignment_2)
	{ after(grammarAccess.getDeleteAccess().getExpressionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getGroup_3()); }
	(rule__Delete__Group_3__0)*
	{ after(grammarAccess.getDeleteAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_3__0__Impl
	rule__Delete__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getDeleteAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1()); }
	(rule__Delete__ExpressionsAssignment_3_1)
	{ after(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Remove__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group__0__Impl
	rule__Remove__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); }
	REMOVE
	{ after(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group__1__Impl
	rule__Remove__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1()); }
	(rule__Remove__RemoveItemsAssignment_1)
	{ after(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getGroup_2()); }
	(rule__Remove__Group_2__0)*
	{ after(grammarAccess.getRemoveAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Remove__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group_2__0__Impl
	rule__Remove__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getRemoveAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Remove__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1()); }
	(rule__Remove__RemoveItemsAssignment_2_1)
	{ after(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveItem__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveItem__Group_0__0__Impl
	rule__RemoveItem__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0()); }
	()
	{ after(grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveItem__Group_0__1__Impl
	rule__RemoveItem__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1()); }
	(rule__RemoveItem__VariableAssignment_0_1)
	{ after(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveItem__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveItemAccess().getNodeLabelsParserRuleCall_0_2()); }
	ruleNodeLabels
	{ after(grammarAccess.getRemoveItemAccess().getNodeLabelsParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveItem__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveItem__Group_1__0__Impl
	rule__RemoveItem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0()); }
	()
	{ after(grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveItem__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1()); }
	(rule__RemoveItem__PropertyExpressionAssignment_1_1)
	{ after(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__0__Impl
	rule__Foreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getFOREACHKeyword_0()); }
	FOREACH
	{ after(grammarAccess.getForeachAccess().getFOREACHKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__1__Impl
	rule__Foreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__2__Impl
	rule__Foreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getVariableAssignment_2()); }
	(rule__Foreach__VariableAssignment_2)
	{ after(grammarAccess.getForeachAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__3__Impl
	rule__Foreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getINKeyword_3()); }
	IN
	{ after(grammarAccess.getForeachAccess().getINKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__4__Impl
	rule__Foreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getExpressionAssignment_4()); }
	(rule__Foreach__ExpressionAssignment_4)
	{ after(grammarAccess.getForeachAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__5__Impl
	rule__Foreach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getVerticalLineKeyword_5()); }
	VerticalLine
	{ after(grammarAccess.getForeachAccess().getVerticalLineKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__6__Impl
	rule__Foreach__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); }
		(rule__Foreach__UpdatingClausesAssignment_6)
		{ after(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); }
	)
	(
		{ before(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); }
		(rule__Foreach__UpdatingClausesAssignment_6)*
		{ after(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getRightParenthesisKeyword_7()); }
	RightParenthesis
	{ after(grammarAccess.getForeachAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InQueryCall__Group__0__Impl
	rule__InQueryCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInQueryCallAccess().getCALLKeyword_0()); }
	CALL
	{ after(grammarAccess.getInQueryCallAccess().getCALLKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InQueryCall__Group__1__Impl
	rule__InQueryCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1()); }
	(rule__InQueryCall__InvocationAssignment_1)
	{ after(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InQueryCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInQueryCallAccess().getGroup_2()); }
	(rule__InQueryCall__Group_2__0)?
	{ after(grammarAccess.getInQueryCallAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InQueryCall__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InQueryCall__Group_2__0__Impl
	rule__InQueryCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0()); }
	YIELD
	{ after(grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InQueryCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1()); }
	(rule__InQueryCall__YieldItemsAssignment_2_1)
	{ after(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StandaloneCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StandaloneCall__Group__0__Impl
	rule__StandaloneCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStandaloneCallAccess().getCALLKeyword_0()); }
	CALL
	{ after(grammarAccess.getStandaloneCallAccess().getCALLKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StandaloneCall__Group__1__Impl
	rule__StandaloneCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1()); }
	(rule__StandaloneCall__InvocationAssignment_1)
	{ after(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StandaloneCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStandaloneCallAccess().getGroup_2()); }
	(rule__StandaloneCall__Group_2__0)?
	{ after(grammarAccess.getStandaloneCallAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StandaloneCall__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StandaloneCall__Group_2__0__Impl
	rule__StandaloneCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0()); }
	YIELD
	{ after(grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StandaloneCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1()); }
	(rule__StandaloneCall__YieldItemsAssignment_2_1)
	{ after(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YieldItems__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItems__Group__0__Impl
	rule__YieldItems__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemsAccess().getYieldItemsAction_0()); }
	()
	{ after(grammarAccess.getYieldItemsAccess().getYieldItemsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItems__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemsAccess().getAlternatives_1()); }
	(rule__YieldItems__Alternatives_1)
	{ after(grammarAccess.getYieldItemsAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YieldItems__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItems__Group_1_0__0__Impl
	rule__YieldItems__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0()); }
	(rule__YieldItems__ItemsAssignment_1_0_0)
	{ after(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItems__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemsAccess().getGroup_1_0_1()); }
	(rule__YieldItems__Group_1_0_1__0)*
	{ after(grammarAccess.getYieldItemsAccess().getGroup_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YieldItems__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItems__Group_1_0_1__0__Impl
	rule__YieldItems__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0()); }
	Comma
	{ after(grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItems__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1()); }
	(rule__YieldItems__ItemsAssignment_1_0_1_1)
	{ after(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YieldItem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItem__Group__0__Impl
	rule__YieldItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemAccess().getGroup_0()); }
	(rule__YieldItem__Group_0__0)?
	{ after(grammarAccess.getYieldItemAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItem__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemAccess().getVariableAssignment_1()); }
	(rule__YieldItem__VariableAssignment_1)
	{ after(grammarAccess.getYieldItemAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YieldItem__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItem__Group_0__0__Impl
	rule__YieldItem__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0()); }
	(rule__YieldItem__FieldAssignment_0_0)
	{ after(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YieldItem__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldItemAccess().getASKeyword_0_1()); }
	AS
	{ after(grammarAccess.getYieldItemAccess().getASKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__With__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__With__Group__0__Impl
	rule__With__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAccess().getWITHKeyword_0()); }
	WITH
	{ after(grammarAccess.getWithAccess().getWITHKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__With__Group__1__Impl
	rule__With__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAccess().getReturnBodyAssignment_1()); }
	(rule__With__ReturnBodyAssignment_1)
	{ after(grammarAccess.getWithAccess().getReturnBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__With__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAccess().getWhereAssignment_2()); }
	(rule__With__WhereAssignment_2)?
	{ after(grammarAccess.getWithAccess().getWhereAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnAssignment_0()); }
	(rule__Return__ReturnAssignment_0)
	{ after(grammarAccess.getReturnAccess().getReturnAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getBodyAssignment_1()); }
	(rule__Return__BodyAssignment_1)
	{ after(grammarAccess.getReturnAccess().getBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnBody__Group__0__Impl
	rule__ReturnBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnBodyAccess().getDistinctAssignment_0()); }
	(rule__ReturnBody__DistinctAssignment_0)?
	{ after(grammarAccess.getReturnBodyAccess().getDistinctAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnBody__Group__1__Impl
	rule__ReturnBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_1()); }
	(rule__ReturnBody__ReturnItemsAssignment_1)
	{ after(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnBody__Group__2__Impl
	rule__ReturnBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnBodyAccess().getOrderAssignment_2()); }
	(rule__ReturnBody__OrderAssignment_2)?
	{ after(grammarAccess.getReturnBodyAccess().getOrderAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnBody__Group__3__Impl
	rule__ReturnBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnBodyAccess().getSkipAssignment_3()); }
	(rule__ReturnBody__SkipAssignment_3)?
	{ after(grammarAccess.getReturnBodyAccess().getSkipAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnBody__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnBodyAccess().getLimitAssignment_4()); }
	(rule__ReturnBody__LimitAssignment_4)?
	{ after(grammarAccess.getReturnBodyAccess().getLimitAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItems__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_0__0__Impl
	rule__ReturnItems__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0()); }
	()
	{ after(grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getGroup_0_1()); }
	(rule__ReturnItems__Group_0_1__0)
	{ after(grammarAccess.getReturnItemsAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItems__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_0_1__0__Impl
	rule__ReturnItems__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0()); }
	(rule__ReturnItems__AllAssignment_0_1_0)
	{ after(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getGroup_0_1_1()); }
	(rule__ReturnItems__Group_0_1_1__0)*
	{ after(grammarAccess.getReturnItemsAccess().getGroup_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItems__Group_0_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_0_1_1__0__Impl
	rule__ReturnItems__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0()); }
	Comma
	{ after(grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_0_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1()); }
	(rule__ReturnItems__ItemsAssignment_0_1_1_1)
	{ after(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItems__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_1__0__Impl
	rule__ReturnItems__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0()); }
	(rule__ReturnItems__ItemsAssignment_1_0)
	{ after(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getGroup_1_1()); }
	(rule__ReturnItems__Group_1_1__0)*
	{ after(grammarAccess.getReturnItemsAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItems__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_1_1__0__Impl
	rule__ReturnItems__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItems__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1()); }
	(rule__ReturnItems__ItemsAssignment_1_1_1)
	{ after(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItem__Group__0__Impl
	rule__ReturnItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemAccess().getExpressionAssignment_0()); }
	(rule__ReturnItem__ExpressionAssignment_0)
	{ after(grammarAccess.getReturnItemAccess().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItem__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemAccess().getGroup_1()); }
	(rule__ReturnItem__Group_1__0)?
	{ after(grammarAccess.getReturnItemAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnItem__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItem__Group_1__0__Impl
	rule__ReturnItem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemAccess().getASKeyword_1_0()); }
	AS
	{ after(grammarAccess.getReturnItemAccess().getASKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnItem__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1()); }
	(rule__ReturnItem__AliasAssignment_1_1)
	{ after(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Order__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Order__Group__0__Impl
	rule__Order__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderAccess().getORDERKeyword_0()); }
	ORDER
	{ after(grammarAccess.getOrderAccess().getORDERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Order__Group__1__Impl
	rule__Order__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderAccess().getBYKeyword_1()); }
	BY
	{ after(grammarAccess.getOrderAccess().getBYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Order__Group__2__Impl
	rule__Order__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderAccess().getOrderByAssignment_2()); }
	(rule__Order__OrderByAssignment_2)
	{ after(grammarAccess.getOrderAccess().getOrderByAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Order__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderAccess().getGroup_3()); }
	(rule__Order__Group_3__0)*
	{ after(grammarAccess.getOrderAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Order__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Order__Group_3__0__Impl
	rule__Order__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getOrderAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Order__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderAccess().getOrderByAssignment_3_1()); }
	(rule__Order__OrderByAssignment_3_1)
	{ after(grammarAccess.getOrderAccess().getOrderByAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Skip__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Skip__Group__0__Impl
	rule__Skip__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSkipAccess().getSKIPKeyword_0()); }
	SKIP
	{ after(grammarAccess.getSkipAccess().getSKIPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Skip__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSkipAccess().getSkipAssignment_1()); }
	(rule__Skip__SkipAssignment_1)
	{ after(grammarAccess.getSkipAccess().getSkipAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Limit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__0__Impl
	rule__Limit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getLIMITKeyword_0()); }
	LIMIT
	{ after(grammarAccess.getLimitAccess().getLIMITKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getLimitAssignment_1()); }
	(rule__Limit__LimitAssignment_1)
	{ after(grammarAccess.getLimitAccess().getLimitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SortItem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SortItem__Group__0__Impl
	rule__SortItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SortItem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortItemAccess().getExpressionAssignment_0()); }
	(rule__SortItem__ExpressionAssignment_0)
	{ after(grammarAccess.getSortItemAccess().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SortItem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SortItem__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SortItem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortItemAccess().getSortAssignment_1()); }
	(rule__SortItem__SortAssignment_1)?
	{ after(grammarAccess.getSortItemAccess().getSortAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hint__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__0__Impl
	rule__Hint__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getIndexHintAction_0_0()); }
	()
	{ after(grammarAccess.getHintAccess().getIndexHintAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__1__Impl
	rule__Hint__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getUSINGKeyword_0_1()); }
	USING
	{ after(grammarAccess.getHintAccess().getUSINGKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__2__Impl
	rule__Hint__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__3__Impl
	rule__Hint__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getINDEXKeyword_0_3()); }
	INDEX
	{ after(grammarAccess.getHintAccess().getINDEXKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__4__Impl
	rule__Hint__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__5__Impl
	rule__Hint__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getVariableAssignment_0_5()); }
	(rule__Hint__VariableAssignment_0_5)
	{ after(grammarAccess.getHintAccess().getVariableAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__6__Impl
	rule__Hint__Group_0__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6()); }
	(rule__Hint__NodeLabelAssignment_0_6)
	{ after(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__7__Impl
	rule__Hint__Group_0__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__8__Impl
	rule__Hint__Group_0__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8()); }
	LeftParenthesis
	{ after(grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__9__Impl
	rule__Hint__Group_0__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9()); }
	(rule__Hint__PropertyKeyNameAssignment_0_9)
	{ after(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_0__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_0__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10()); }
	RightParenthesis
	{ after(grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1__0__Impl
	rule__Hint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getJoinHintAction_1_0()); }
	()
	{ after(grammarAccess.getHintAccess().getJoinHintAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getGroup_1_1()); }
	(rule__Hint__Group_1_1__0)
	{ after(grammarAccess.getHintAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hint__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__0__Impl
	rule__Hint__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getUSINGKeyword_1_1_0()); }
	USING
	{ after(grammarAccess.getHintAccess().getUSINGKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__1__Impl
	rule__Hint__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__2__Impl
	rule__Hint__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getJOINKeyword_1_1_2()); }
	JOIN
	{ after(grammarAccess.getHintAccess().getJOINKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__3__Impl
	rule__Hint__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__4__Impl
	rule__Hint__Group_1_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getONKeyword_1_1_4()); }
	ON
	{ after(grammarAccess.getHintAccess().getONKeyword_1_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__5__Impl
	rule__Hint__Group_1_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5()); }
	(rule__Hint__VariablesAssignment_1_1_5)
	{ after(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getGroup_1_1_6()); }
	(rule__Hint__Group_1_1_6__0)*
	{ after(grammarAccess.getHintAccess().getGroup_1_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hint__Group_1_1_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1_6__0__Impl
	rule__Hint__Group_1_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0()); }
	Comma
	{ after(grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_1_1_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_1_1_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1()); }
	(rule__Hint__VariablesAssignment_1_1_6_1)
	{ after(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hint__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2__0__Impl
	rule__Hint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getScanHintAction_2_0()); }
	()
	{ after(grammarAccess.getHintAccess().getScanHintAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getGroup_2_1()); }
	(rule__Hint__Group_2_1__0)
	{ after(grammarAccess.getHintAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hint__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2_1__0__Impl
	rule__Hint__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getUSINGKeyword_2_1_0()); }
	USING
	{ after(grammarAccess.getHintAccess().getUSINGKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2_1__1__Impl
	rule__Hint__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2_1__2__Impl
	rule__Hint__Group_2_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getSCANKeyword_2_1_2()); }
	SCAN
	{ after(grammarAccess.getHintAccess().getSCANKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2_1__3__Impl
	rule__Hint__Group_2_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3()); }
	RULE_WS
	{ after(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2_1__4__Impl
	rule__Hint__Group_2_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getVariableAssignment_2_1_4()); }
	(rule__Hint__VariableAssignment_2_1_4)
	{ after(grammarAccess.getHintAccess().getVariableAssignment_2_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hint__Group_2_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__Group_2_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5()); }
	(rule__Hint__NodeLabelAssignment_2_1_5)
	{ after(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Start__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__0__Impl
	rule__Start__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getSTARTKeyword_0()); }
	START
	{ after(grammarAccess.getStartAccess().getSTARTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__1__Impl
	rule__Start__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getStartPointAssignment_1()); }
	(rule__Start__StartPointAssignment_1)
	{ after(grammarAccess.getStartAccess().getStartPointAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__2__Impl
	rule__Start__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getGroup_2()); }
	(rule__Start__Group_2__0)*
	{ after(grammarAccess.getStartAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getWhereAssignment_3()); }
	(rule__Start__WhereAssignment_3)?
	{ after(grammarAccess.getStartAccess().getWhereAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Start__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group_2__0__Impl
	rule__Start__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getStartAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getStartPointAssignment_2_1()); }
	(rule__Start__StartPointAssignment_2_1)
	{ after(grammarAccess.getStartAccess().getStartPointAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StartPoint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartPoint__Group__0__Impl
	rule__StartPoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartPointAccess().getVariableAssignment_0()); }
	(rule__StartPoint__VariableAssignment_0)
	{ after(grammarAccess.getStartPointAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartPoint__Group__1__Impl
	rule__StartPoint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartPointAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getStartPointAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartPoint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartPointAccess().getLookupAssignment_2()); }
	(rule__StartPoint__LookupAssignment_2)
	{ after(grammarAccess.getStartPointAccess().getLookupAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeLookup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeLookup__Group__0__Impl
	rule__NodeLookup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLookup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeLookupAccess().getNODEKeyword_0()); }
	NODE
	{ after(grammarAccess.getNodeLookupAccess().getNODEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLookup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeLookup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLookup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeLookupAccess().getAlternatives_1()); }
	(rule__NodeLookup__Alternatives_1)
	{ after(grammarAccess.getNodeLookupAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipLookup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipLookup__Group__0__Impl
	rule__RelationshipLookup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipLookup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipLookupAccess().getAlternatives_0()); }
	(rule__RelationshipLookup__Alternatives_0)
	{ after(grammarAccess.getRelationshipLookupAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipLookup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipLookup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipLookup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipLookupAccess().getAlternatives_1()); }
	(rule__RelationshipLookup__Alternatives_1)
	{ after(grammarAccess.getRelationshipLookupAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifiedIndexLookup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__0__Impl
	rule__IdentifiedIndexLookup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__1__Impl
	rule__IdentifiedIndexLookup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1()); }
	(rule__IdentifiedIndexLookup__IndexNameAssignment_1)
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__2__Impl
	rule__IdentifiedIndexLookup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__3__Impl
	rule__IdentifiedIndexLookup__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3()); }
	(rule__IdentifiedIndexLookup__KeyAssignment_3)
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__4__Impl
	rule__IdentifiedIndexLookup__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4()); }
	EqualsSign
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__5__Impl
	rule__IdentifiedIndexLookup__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5()); }
	(rule__IdentifiedIndexLookup__Alternatives_5)
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifiedIndexLookup__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6()); }
	RightParenthesis
	{ after(grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexQuery__Group__0__Impl
	rule__IndexQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexQueryAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getIndexQueryAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexQuery__Group__1__Impl
	rule__IndexQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1()); }
	(rule__IndexQuery__IndexNameAssignment_1)
	{ after(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexQuery__Group__2__Impl
	rule__IndexQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexQuery__Group__3__Impl
	rule__IndexQuery__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexQueryAccess().getAlternatives_3()); }
	(rule__IndexQuery__Alternatives_3)
	{ after(grammarAccess.getIndexQueryAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexQuery__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdLookup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdLookup__Group__0__Impl
	rule__IdLookup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdLookup__Group__1__Impl
	rule__IdLookup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdLookupAccess().getAlternatives_1()); }
	(rule__IdLookup__Alternatives_1)
	{ after(grammarAccess.getIdLookupAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdLookup__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralIds__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralIds__Group__0__Impl
	rule__LiteralIds__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0()); }
	(rule__LiteralIds__IdsAssignment_0)
	{ after(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralIds__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralIdsAccess().getGroup_1()); }
	(rule__LiteralIds__Group_1__0)*
	{ after(grammarAccess.getLiteralIdsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralIds__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralIds__Group_1__0__Impl
	rule__LiteralIds__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralIds__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1()); }
	(rule__LiteralIds__IdsAssignment_1_1)
	{ after(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__0__Impl
	rule__Where__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getWHEREKeyword_0()); }
	WHERE
	{ after(grammarAccess.getWhereAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getExpressionAssignment_1()); }
	(rule__Where__ExpressionAssignment_1)
	{ after(grammarAccess.getWhereAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPatternsAssignment_0()); }
	(rule__Pattern__PatternsAssignment_0)
	{ after(grammarAccess.getPatternAccess().getPatternsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_1()); }
	(rule__Pattern__Group_1__0)*
	{ after(grammarAccess.getPatternAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_1__0__Impl
	rule__Pattern__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getPatternAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPatternsAssignment_1_1()); }
	(rule__Pattern__PatternsAssignment_1_1)
	{ after(grammarAccess.getPatternAccess().getPatternsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternPart__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternPart__Group_0__0__Impl
	rule__PatternPart__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternPartAccess().getVarAssignment_0_0()); }
	(rule__PatternPart__VarAssignment_0_0)
	{ after(grammarAccess.getPatternPartAccess().getVarAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternPart__Group_0__1__Impl
	rule__PatternPart__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1()); }
	EqualsSign
	{ after(grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternPart__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternPartAccess().getPartAssignment_0_2()); }
	(rule__PatternPart__PartAssignment_0_2)
	{ after(grammarAccess.getPatternPartAccess().getPartAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShortestPathPattern__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_0__0__Impl
	rule__ShortestPathPattern__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0()); }
	()
	{ after(grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_0__1__Impl
	rule__ShortestPathPattern__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1()); }
	SHORTESTPATH
	{ after(grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_0__2__Impl
	rule__ShortestPathPattern__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2()); }
	LeftParenthesis
	{ after(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_0__3__Impl
	rule__ShortestPathPattern__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3()); }
	(rule__ShortestPathPattern__PatternElementAssignment_0_3)
	{ after(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4()); }
	RightParenthesis
	{ after(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShortestPathPattern__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_1__0__Impl
	rule__ShortestPathPattern__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0()); }
	()
	{ after(grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_1__1__Impl
	rule__ShortestPathPattern__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1()); }
	ALLSHORTESTPATHS
	{ after(grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_1__2__Impl
	rule__ShortestPathPattern__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2()); }
	LeftParenthesis
	{ after(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_1__3__Impl
	rule__ShortestPathPattern__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3()); }
	(rule__ShortestPathPattern__PatternElementAssignment_1_3)
	{ after(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortestPathPattern__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4()); }
	RightParenthesis
	{ after(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternElement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElement__Group_0__0__Impl
	rule__PatternElement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0()); }
	(rule__PatternElement__NodepatternAssignment_0_0)
	{ after(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementAccess().getChainAssignment_0_1()); }
	(rule__PatternElement__ChainAssignment_0_1)*
	{ after(grammarAccess.getPatternElementAccess().getChainAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternElement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElement__Group_1__0__Impl
	rule__PatternElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElement__Group_1__1__Impl
	rule__PatternElement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1()); }
	rulePatternElement
	{ after(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElement__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodePattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePattern__Group__0__Impl
	rule__NodePattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePatternAccess().getNodePatternAction_0()); }
	()
	{ after(grammarAccess.getNodePatternAccess().getNodePatternAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePattern__Group__1__Impl
	rule__NodePattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePattern__Group__2__Impl
	rule__NodePattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePatternAccess().getVariableAssignment_2()); }
	(rule__NodePattern__VariableAssignment_2)?
	{ after(grammarAccess.getNodePatternAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePattern__Group__3__Impl
	rule__NodePattern__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePatternAccess().getNodeLabelsParserRuleCall_3()); }
	(ruleNodeLabels)?
	{ after(grammarAccess.getNodePatternAccess().getNodeLabelsParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePattern__Group__4__Impl
	rule__NodePattern__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4()); }
	(rule__NodePattern__PropertiesAssignment_4)?
	{ after(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodePattern__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternElementChain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElementChain__Group__0__Impl
	rule__PatternElementChain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElementChain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0()); }
	(rule__PatternElementChain__RelationshipPatternAssignment_0)
	{ after(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElementChain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternElementChain__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElementChain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1()); }
	(rule__PatternElementChain__NodePatternAssignment_1)
	{ after(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipPattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group__0__Impl
	rule__RelationshipPattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0()); }
	()
	{ after(grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getGroup_1()); }
	(rule__RelationshipPattern__Group_1__0)
	{ after(grammarAccess.getRelationshipPatternAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipPattern__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group_1__0__Impl
	rule__RelationshipPattern__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0()); }
	(rule__RelationshipPattern__IncomingAssignment_1_0)?
	{ after(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group_1__1__Impl
	rule__RelationshipPattern__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1()); }
	ruleDash
	{ after(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group_1__2__Impl
	rule__RelationshipPattern__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2()); }
	(rule__RelationshipPattern__DetailAssignment_1_2)?
	{ after(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group_1__3__Impl
	rule__RelationshipPattern__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3()); }
	ruleDash
	{ after(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipPattern__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4()); }
	(rule__RelationshipPattern__OutgoingAssignment_1_4)?
	{ after(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipDetail__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__0__Impl
	rule__RelationshipDetail__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0()); }
	()
	{ after(grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__1__Impl
	rule__RelationshipDetail__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__2__Impl
	rule__RelationshipDetail__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2()); }
	(rule__RelationshipDetail__VariableAssignment_2)?
	{ after(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__3__Impl
	rule__RelationshipDetail__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3()); }
	(rule__RelationshipDetail__OptionalAssignment_3)?
	{ after(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__4__Impl
	rule__RelationshipDetail__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getRelationshipTypesParserRuleCall_4()); }
	(ruleRelationshipTypes)?
	{ after(grammarAccess.getRelationshipDetailAccess().getRelationshipTypesParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__5__Impl
	rule__RelationshipDetail__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5()); }
	(rule__RelationshipDetail__RangeAssignment_5)?
	{ after(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__6__Impl
	rule__RelationshipDetail__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6()); }
	(rule__RelationshipDetail__PropertiesAssignment_6)?
	{ after(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipDetail__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7()); }
	RightSquareBracket
	{ after(grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelType__Group__0__Impl
	rule__RelType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelTypeAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getRelTypeAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1()); }
	ruleRelTypeName
	{ after(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipTypes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipTypes__Group__0__Impl
	rule__RelationshipTypes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipTypesAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getRelationshipTypesAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipTypes__Group__1__Impl
	rule__RelationshipTypes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_1()); }
	(rule__RelationshipTypes__RelTypeNamesAssignment_1)
	{ after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipTypes__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipTypesAccess().getGroup_2()); }
	(rule__RelationshipTypes__Group_2__0)*
	{ after(grammarAccess.getRelationshipTypesAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipTypes__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipTypes__Group_2__0__Impl
	rule__RelationshipTypes__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0()); }
	VerticalLine
	{ after(grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipTypes__Group_2__1__Impl
	rule__RelationshipTypes__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1()); }
	(Colon)?
	{ after(grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipTypes__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_2_2()); }
	(rule__RelationshipTypes__RelTypeNamesAssignment_2_2)
	{ after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeLabel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeLabel__Group__0__Impl
	rule__NodeLabel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLabel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeLabelAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getNodeLabelAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLabel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeLabel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLabel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1()); }
	(rule__NodeLabel__LabelNameAssignment_1)
	{ after(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group__0__Impl
	rule__RangeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); }
	()
	{ after(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group__1__Impl
	rule__RangeLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1()); }
	Asterisk
	{ after(grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getGroup_2()); }
	(rule__RangeLiteral__Group_2__0)?
	{ after(grammarAccess.getRangeLiteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group_2__0__Impl
	rule__RangeLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0()); }
	(rule__RangeLiteral__LowerAssignment_2_0)?
	{ after(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); }
	(rule__RangeLiteral__Group_2_1__0)?
	{ after(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group_2_1__0__Impl
	rule__RangeLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getVariableLengthAssignment_2_1_0()); }
	(rule__RangeLiteral__VariableLengthAssignment_2_1_0)
	{ after(grammarAccess.getRangeLiteralAccess().getVariableLengthAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1()); }
	(rule__RangeLiteral__UpperAssignment_2_1_1)?
	{ after(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__OrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
	rule__XorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__XorExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
	(rule__XorExpression__RightAssignment_1_2)
	{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); }
	ruleNotExpression
	{ after(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_0__0__Impl
	rule__NotExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_0__1__Impl
	rule__NotExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
	(rule__NotExpression__OperatorAssignment_0_1)
	{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2()); }
	(rule__NotExpression__LeftAssignment_0_2)
	{ after(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0()); }
	ruleAddOrSubtractExpression
	{ after(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparisonExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddOrSubtractExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group__0__Impl
	rule__AddOrSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0()); }
	ruleMultiplyDivideModuloExpression
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1()); }
	(rule__AddOrSubtractExpression__Group_1__0)*
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddOrSubtractExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group_1__0__Impl
	rule__AddOrSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group_1__1__Impl
	rule__AddOrSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AddOrSubtractExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddOrSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2()); }
	(rule__AddOrSubtractExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideModuloExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group__0__Impl
	rule__MultiplyDivideModuloExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0()); }
	rulePowerOfExpression
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1()); }
	(rule__MultiplyDivideModuloExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideModuloExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group_1__0__Impl
	rule__MultiplyDivideModuloExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group_1__1__Impl
	rule__MultiplyDivideModuloExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivideModuloExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2()); }
	(rule__MultiplyDivideModuloExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group__0__Impl
	rule__PowerOfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0()); }
	ruleUnaryAddOrSubtractExpression
	{ after(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getGroup_1()); }
	(rule__PowerOfExpression__Group_1__0)*
	{ after(grammarAccess.getPowerOfExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOfExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group_1__0__Impl
	rule__PowerOfExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group_1__1__Impl
	rule__PowerOfExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__PowerOfExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerOfExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2()); }
	(rule__PowerOfExpression__RightAssignment_1_2)
	{ after(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryAddOrSubtractExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryAddOrSubtractExpression__Group_1__0__Impl
	rule__UnaryAddOrSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryAddOrSubtractExpression__Group_1__1__Impl
	rule__UnaryAddOrSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryAddOrSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2()); }
	(rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2)
	{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringListNullOperatorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group__0__Impl
	rule__StringListNullOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrLabelsExpressionParserRuleCall_0()); }
	rulePropertyOrLabelsExpression
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrLabelsExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1()); }
	(rule__StringListNullOperatorExpression__Group_1__0)*
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringListNullOperatorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group_1__0__Impl
	rule__StringListNullOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringListNullOperatorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1()); }
	(rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1)
	{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOperatorExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_0__0__Impl
	rule__ListOperatorExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getIndexLookupExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getListOperatorExpressionAccess().getIndexLookupExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_0__1__Impl
	rule__ListOperatorExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_0_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_0__2__Impl
	rule__ListOperatorExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getExpressionAssignment_0_2()); }
	(rule__ListOperatorExpression__ExpressionAssignment_0_2)
	{ after(grammarAccess.getListOperatorExpressionAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_0_3()); }
	RightSquareBracket
	{ after(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOperatorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_1__0__Impl
	rule__ListOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getIndexRangeExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getListOperatorExpressionAccess().getIndexRangeExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_1__1__Impl
	rule__ListOperatorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_1_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_1__2__Impl
	rule__ListOperatorExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getLowerAssignment_1_2()); }
	(rule__ListOperatorExpression__LowerAssignment_1_2)?
	{ after(grammarAccess.getListOperatorExpressionAccess().getLowerAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_1__3__Impl
	rule__ListOperatorExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getFullStopFullStopKeyword_1_3()); }
	FullStopFullStop
	{ after(grammarAccess.getListOperatorExpressionAccess().getFullStopFullStopKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_1__4__Impl
	rule__ListOperatorExpression__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getUpperAssignment_1_4()); }
	(rule__ListOperatorExpression__UpperAssignment_1_4)?
	{ after(grammarAccess.getListOperatorExpressionAccess().getUpperAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOperatorExpression__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_1_5()); }
	RightSquareBracket
	{ after(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group__0__Impl
	rule__StringOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0()); }
	(rule__StringOperatorExpression__Alternatives_0)
	{ after(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1()); }
	(rule__StringOperatorExpression__RightAssignment_1)
	{ after(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_0__0__Impl
	rule__StringOperatorExpression__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1()); }
	EqualsSignTilde
	{ after(grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_1__0__Impl
	rule__StringOperatorExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1()); }
	IN
	{ after(grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_2__0__Impl
	rule__StringOperatorExpression__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_2__1__Impl
	rule__StringOperatorExpression__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1()); }
	STARTS
	{ after(grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2()); }
	WITH
	{ after(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_3__0__Impl
	rule__StringOperatorExpression__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_3__1__Impl
	rule__StringOperatorExpression__Group_0_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1()); }
	ENDS
	{ after(grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2()); }
	WITH
	{ after(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringOperatorExpression__Group_0_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_4__0__Impl
	rule__StringOperatorExpression__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0()); }
	()
	{ after(grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringOperatorExpression__Group_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__Group_0_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1()); }
	CONTAINS
	{ after(grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullOperatorExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_0__0__Impl
	rule__NullOperatorExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_0__1__Impl
	rule__NullOperatorExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1()); }
	IS
	{ after(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2()); }
	NULL
	{ after(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullOperatorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__0__Impl
	rule__NullOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__1__Impl
	rule__NullOperatorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1()); }
	IS
	{ after(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__2__Impl
	rule__NullOperatorExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2()); }
	NOT
	{ after(grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullOperatorExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullOperatorExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3()); }
	NULL
	{ after(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyOrLabelsExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group__0__Impl
	rule__PropertyOrLabelsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getAtomParserRuleCall_0()); }
	ruleAtom
	{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getAtomParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group__1__Impl
	rule__PropertyOrLabelsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_1()); }
	(rule__PropertyOrLabelsExpression__Group_1__0)?
	{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_2()); }
	(rule__PropertyOrLabelsExpression__Group_2__0)?
	{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyOrLabelsExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group_1__0__Impl
	rule__PropertyOrLabelsExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); }
		(rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1)
		{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); }
		(rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1)*
		{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyOrLabelsExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group_2__0__Impl
	rule__PropertyOrLabelsExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsExpressionLeftAction_2_0()); }
	()
	{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsExpressionLeftAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyOrLabelsExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsParserRuleCall_2_1()); }
	ruleNodeLabels
	{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_4__0__Impl
	rule__Atom__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getCountAction_4_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getCountAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_4__1__Impl
	rule__Atom__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getCOUNTKeyword_4_1()); }
	COUNT
	{ after(grammarAccess.getAtomAccess().getCOUNTKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_4__2__Impl
	rule__Atom__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_4__3__Impl
	rule__Atom__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getAsteriskKeyword_4_3()); }
	Asterisk
	{ after(grammarAccess.getAtomAccess().getAsteriskKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_7__0__Impl
	rule__Atom__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterAction_7_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getFilterAction_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_7__1__Impl
	rule__Atom__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFILTERKeyword_7_1()); }
	FILTER
	{ after(grammarAccess.getAtomAccess().getFILTERKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_7__2__Impl
	rule__Atom__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_7__3__Impl
	rule__Atom__Group_7__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_7_3()); }
	(rule__Atom__FilterExpressionAssignment_7_3)
	{ after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_7__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8__0__Impl
	rule__Atom__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getExtractAction_8_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getExtractAction_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8__1__Impl
	rule__Atom__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getEXTRACTKeyword_8_1()); }
	EXTRACT
	{ after(grammarAccess.getAtomAccess().getEXTRACTKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8__2__Impl
	rule__Atom__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_8_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8__3__Impl
	rule__Atom__Group_8__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_8_3()); }
	(rule__Atom__FilterExpressionAssignment_8_3)
	{ after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8__4__Impl
	rule__Atom__Group_8__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getGroup_8_4()); }
	(rule__Atom__Group_8_4__0)?
	{ after(grammarAccess.getAtomAccess().getGroup_8_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_8_5()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_8_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_8_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8_4__0__Impl
	rule__Atom__Group_8_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getVerticalLineKeyword_8_4_0()); }
	VerticalLine
	{ after(grammarAccess.getAtomAccess().getVerticalLineKeyword_8_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_8_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_8_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getExpressionAssignment_8_4_1()); }
	(rule__Atom__ExpressionAssignment_8_4_1)
	{ after(grammarAccess.getAtomAccess().getExpressionAssignment_8_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_10__0__Impl
	rule__Atom__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getAllAction_10_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getAllAction_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_10__1__Impl
	rule__Atom__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getALLKeyword_10_1()); }
	ALL
	{ after(grammarAccess.getAtomAccess().getALLKeyword_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_10__2__Impl
	rule__Atom__Group_10__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_10_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_10_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_10__3__Impl
	rule__Atom__Group_10__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_10_3()); }
	(rule__Atom__FilterExpressionAssignment_10_3)
	{ after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_10_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_10__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_10__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_10_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_10_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_11__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_11__0__Impl
	rule__Atom__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getAnyAction_11_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getAnyAction_11_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_11__1__Impl
	rule__Atom__Group_11__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getANYKeyword_11_1()); }
	ANY
	{ after(grammarAccess.getAtomAccess().getANYKeyword_11_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_11__2__Impl
	rule__Atom__Group_11__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_11_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_11_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_11__3__Impl
	rule__Atom__Group_11__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_11_3()); }
	(rule__Atom__FilterExpressionAssignment_11_3)
	{ after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_11_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_11__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_11__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_11_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_11_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_12__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_12__0__Impl
	rule__Atom__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getNoneAction_12_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getNoneAction_12_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_12__1__Impl
	rule__Atom__Group_12__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getNONEKeyword_12_1()); }
	NONE
	{ after(grammarAccess.getAtomAccess().getNONEKeyword_12_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_12__2__Impl
	rule__Atom__Group_12__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_12__3__Impl
	rule__Atom__Group_12__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3()); }
	(rule__Atom__FilterExpressionAssignment_12_3)
	{ after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_12__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_12__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_13__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_13__0__Impl
	rule__Atom__Group_13__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getSingleAction_13_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getSingleAction_13_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_13__1__Impl
	rule__Atom__Group_13__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getSINGLEKeyword_13_1()); }
	SINGLE
	{ after(grammarAccess.getAtomAccess().getSINGLEKeyword_13_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_13__2__Impl
	rule__Atom__Group_13__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_13_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_13_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_13__3__Impl
	rule__Atom__Group_13__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_13_3()); }
	(rule__Atom__FilterExpressionAssignment_13_3)
	{ after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_13_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_13__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_13__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_13_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_13_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_18__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_18__0__Impl
	rule__Atom__Group_18__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_18__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getVariableRefAction_18_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getVariableRefAction_18_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_18__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_18__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_18__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getVariableRefAssignment_18_1()); }
	(rule__Atom__VariableRefAssignment_18_1)
	{ after(grammarAccess.getAtomAccess().getVariableRefAssignment_18_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getNULLAction_2_0()); }
	()
	{ after(grammarAccess.getLiteralAccess().getNULLAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getNULLKeyword_2_1()); }
	NULL
	{ after(grammarAccess.getLiteralAccess().getNULLKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
	()
	{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); }
	(rule__BooleanLiteral__ValueAssignment_1)
	{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group__0__Impl
	rule__ListLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); }
	()
	{ after(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group__1__Impl
	rule__ListLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group__2__Impl
	rule__ListLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getGroup_2()); }
	(rule__ListLiteral__Group_2__0)?
	{ after(grammarAccess.getListLiteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_3()); }
	RightSquareBracket
	{ after(grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group_2__0__Impl
	rule__ListLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_0()); }
	(rule__ListLiteral__ExpressionsAssignment_2_0)
	{ after(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getGroup_2_1()); }
	(rule__ListLiteral__Group_2_1__0)*
	{ after(grammarAccess.getListLiteralAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group_2_1__0__Impl
	rule__ListLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0()); }
	Comma
	{ after(grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_1_1()); }
	(rule__ListLiteral__ExpressionsAssignment_2_1_1)
	{ after(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reduce__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__0__Impl
	rule__Reduce__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getREDUCEKeyword_0()); }
	REDUCE
	{ after(grammarAccess.getReduceAccess().getREDUCEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__1__Impl
	rule__Reduce__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__2__Impl
	rule__Reduce__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getAccumulatorAssignment_2()); }
	(rule__Reduce__AccumulatorAssignment_2)
	{ after(grammarAccess.getReduceAccess().getAccumulatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__3__Impl
	rule__Reduce__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getEqualsSignKeyword_3()); }
	EqualsSign
	{ after(grammarAccess.getReduceAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__4__Impl
	rule__Reduce__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4()); }
	(rule__Reduce__AccumulatorExpressionAssignment_4)
	{ after(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__5__Impl
	rule__Reduce__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getCommaKeyword_5()); }
	Comma
	{ after(grammarAccess.getReduceAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__6__Impl
	rule__Reduce__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getIdInCollAssignment_6()); }
	(rule__Reduce__IdInCollAssignment_6)
	{ after(grammarAccess.getReduceAccess().getIdInCollAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__7__Impl
	rule__Reduce__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getVerticalLineKeyword_7()); }
	VerticalLine
	{ after(grammarAccess.getReduceAccess().getVerticalLineKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__8__Impl
	rule__Reduce__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getExpressionAssignment_8()); }
	(rule__Reduce__ExpressionAssignment_8)
	{ after(grammarAccess.getReduceAccess().getExpressionAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reduce__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReduceAccess().getRightParenthesisKeyword_9()); }
	RightParenthesis
	{ after(grammarAccess.getReduceAccess().getRightParenthesisKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); }
	(rule__ParenthesizedExpression__ExpressionAssignment_1)
	{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipsPattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipsPattern__Group__0__Impl
	rule__RelationshipsPattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipsPattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0()); }
	(rule__RelationshipsPattern__NodePatternAssignment_0)
	{ after(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipsPattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationshipsPattern__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipsPattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); }
		(rule__RelationshipsPattern__ChainAssignment_1)
		{ after(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); }
	)
	(
		{ before(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); }
		(rule__RelationshipsPattern__ChainAssignment_1)*
		{ after(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FilterExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterExpression__Group__0__Impl
	rule__FilterExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0()); }
	(rule__FilterExpression__IdInCollAssignment_0)
	{ after(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1()); }
	(rule__FilterExpression__WhereAssignment_1)?
	{ after(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdInColl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdInColl__Group__0__Impl
	rule__IdInColl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdInCollAccess().getVariableAssignment_0()); }
	(rule__IdInColl__VariableAssignment_0)
	{ after(grammarAccess.getIdInCollAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdInColl__Group__1__Impl
	rule__IdInColl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdInCollAccess().getINKeyword_1()); }
	IN
	{ after(grammarAccess.getIdInCollAccess().getINKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdInColl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdInCollAccess().getExpressionAssignment_2()); }
	(rule__IdInColl__ExpressionAssignment_2)
	{ after(grammarAccess.getIdInCollAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionInvocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__0__Impl
	rule__FunctionInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); }
	(rule__FunctionInvocation__FunctionNameAssignment_0)
	{ after(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__1__Impl
	rule__FunctionInvocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__2__Impl
	rule__FunctionInvocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2()); }
	(rule__FunctionInvocation__DistinctAssignment_2)?
	{ after(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__3__Impl
	rule__FunctionInvocation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getGroup_3()); }
	(rule__FunctionInvocation__Group_3__0)?
	{ after(grammarAccess.getFunctionInvocationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionInvocation__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_3__0__Impl
	rule__FunctionInvocation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0()); }
	(rule__FunctionInvocation__ParameterAssignment_3_0)
	{ after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getGroup_3_1()); }
	(rule__FunctionInvocation__Group_3_1__0)*
	{ after(grammarAccess.getFunctionInvocationAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionInvocation__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_3_1__0__Impl
	rule__FunctionInvocation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0()); }
	Comma
	{ after(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionInvocation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1()); }
	(rule__FunctionInvocation__ParameterAssignment_3_1_1)
	{ after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitProcedureInvocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group__0__Impl
	rule__ExplicitProcedureInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0()); }
	(rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0)
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group__1__Impl
	rule__ExplicitProcedureInvocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group__2__Impl
	rule__ExplicitProcedureInvocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2()); }
	(rule__ExplicitProcedureInvocation__Group_2__0)?
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitProcedureInvocation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group_2__0__Impl
	rule__ExplicitProcedureInvocation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0()); }
	(rule__ExplicitProcedureInvocation__ParameterAssignment_2_0)
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1()); }
	(rule__ExplicitProcedureInvocation__Group_2_1__0)*
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitProcedureInvocation__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group_2_1__0__Impl
	rule__ExplicitProcedureInvocation__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0()); }
	Comma
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitProcedureInvocation__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1()); }
	(rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1)
	{ after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicitProcedureInvocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicitProcedureInvocation__Group__0__Impl
	rule__ImplicitProcedureInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicitProcedureInvocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicitProcedureInvocationAccess().getImplicitProcedureInvocationAction_0()); }
	()
	{ after(grammarAccess.getImplicitProcedureInvocationAccess().getImplicitProcedureInvocationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicitProcedureInvocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicitProcedureInvocation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicitProcedureInvocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameAssignment_1()); }
	(rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1)
	{ after(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureName__Group__0__Impl
	rule__ProcedureName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0()); }
	(rule__ProcedureName__NamespaceAssignment_0)
	{ after(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureNameAccess().getNameAssignment_1()); }
	(rule__ProcedureName__NameAssignment_1)
	{ after(grammarAccess.getProcedureNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0()); }
	ruleSYMBOLIC_NAME_X
	{ after(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getFullStopKeyword_1()); }
	FullStop
	{ after(grammarAccess.getNamespaceAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListComprehension__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListComprehension__Group__0__Impl
	rule__ListComprehension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListComprehension__Group__1__Impl
	rule__ListComprehension__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1()); }
	(rule__ListComprehension__FilterExpressionAssignment_1)
	{ after(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListComprehension__Group__2__Impl
	rule__ListComprehension__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListComprehensionAccess().getGroup_2()); }
	(rule__ListComprehension__Group_2__0)?
	{ after(grammarAccess.getListComprehensionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListComprehension__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3()); }
	RightSquareBracket
	{ after(grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListComprehension__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListComprehension__Group_2__0__Impl
	rule__ListComprehension__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0()); }
	VerticalLine
	{ after(grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListComprehension__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1()); }
	(rule__ListComprehension__ExpressionAssignment_2_1)
	{ after(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternComprehension__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__0__Impl
	rule__PatternComprehension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__1__Impl
	rule__PatternComprehension__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getGroup_1()); }
	(rule__PatternComprehension__Group_1__0)?
	{ after(grammarAccess.getPatternComprehensionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__2__Impl
	rule__PatternComprehension__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2()); }
	(rule__PatternComprehension__PatternAssignment_2)
	{ after(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__3__Impl
	rule__PatternComprehension__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3()); }
	(rule__PatternComprehension__WhereAssignment_3)?
	{ after(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__4__Impl
	rule__PatternComprehension__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4()); }
	VerticalLine
	{ after(grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__5__Impl
	rule__PatternComprehension__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5()); }
	(rule__PatternComprehension__ExpressionAssignment_5)
	{ after(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6()); }
	RightSquareBracket
	{ after(grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternComprehension__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group_1__0__Impl
	rule__PatternComprehension__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0()); }
	(rule__PatternComprehension__PathVariableAssignment_1_0)
	{ after(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternComprehension__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1()); }
	EqualsSign
	{ after(grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyLookup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyLookup__Group__0__Impl
	rule__PropertyLookup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0()); }
	FullStop
	{ after(grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyLookup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyLookupAccess().getAlternatives_1()); }
	(rule__PropertyLookup__Alternatives_1)
	{ after(grammarAccess.getPropertyLookupAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyLookup__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyLookup__Group_1_0__0__Impl
	rule__PropertyLookup__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0()); }
	(rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0)
	{ after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyLookup__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1()); }
	(rule__PropertyLookup__PropertyOperatorAssignment_1_0_1)
	{ after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__0__Impl
	rule__CaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getAlternatives_0()); }
	(rule__CaseExpression__Alternatives_0)
	{ after(grammarAccess.getCaseExpressionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__1__Impl
	rule__CaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getGroup_1()); }
	(rule__CaseExpression__Group_1__0)?
	{ after(grammarAccess.getCaseExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getENDKeyword_2()); }
	END
	{ after(grammarAccess.getCaseExpressionAccess().getENDKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_0_0__0__Impl
	rule__CaseExpression__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0()); }
	CASE
	{ after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); }
		(rule__CaseExpression__CaseAlternativesAssignment_0_0_1)
		{ after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); }
	)
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); }
		(rule__CaseExpression__CaseAlternativesAssignment_0_0_1)*
		{ after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_0_1__0__Impl
	rule__CaseExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0()); }
	CASE
	{ after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_0_1__1__Impl
	rule__CaseExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1()); }
	(rule__CaseExpression__CaseExpressionAssignment_0_1_1)
	{ after(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); }
		(rule__CaseExpression__CaseAlternativesAssignment_0_1_2)
		{ after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); }
	)
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); }
		(rule__CaseExpression__CaseAlternativesAssignment_0_1_2)*
		{ after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_1__0__Impl
	rule__CaseExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0()); }
	ELSE
	{ after(grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1()); }
	(rule__CaseExpression__ElseExpressionAssignment_1_1)
	{ after(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseAlternatives__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseAlternatives__Group__0__Impl
	rule__CaseAlternatives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0()); }
	WHEN
	{ after(grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseAlternatives__Group__1__Impl
	rule__CaseAlternatives__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1()); }
	(rule__CaseAlternatives__WhenAssignment_1)
	{ after(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseAlternatives__Group__2__Impl
	rule__CaseAlternatives__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseAlternatives__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3()); }
	(rule__CaseAlternatives__ThenAssignment_3)
	{ after(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); }
	()
	{ after(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group__0__Impl
	rule__MapLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); }
	()
	{ after(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group__1__Impl
	rule__MapLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group__2__Impl
	rule__MapLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getGroup_2()); }
	(rule__MapLiteral__Group_2__0)?
	{ after(grammarAccess.getMapLiteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapLiteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group_2__0__Impl
	rule__MapLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0()); }
	(rule__MapLiteral__EntriesAssignment_2_0)
	{ after(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getGroup_2_1()); }
	(rule__MapLiteral__Group_2_1__0)*
	{ after(grammarAccess.getMapLiteralAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapLiteral__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group_2_1__0__Impl
	rule__MapLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0()); }
	Comma
	{ after(grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1()); }
	(rule__MapLiteral__EntriesAssignment_2_1_1)
	{ after(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapLiteralEntry__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteralEntry__Group__0__Impl
	rule__MapLiteralEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0()); }
	(rule__MapLiteralEntry__KeyAssignment_0)
	{ after(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteralEntry__Group__1__Impl
	rule__MapLiteralEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapLiteralEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2()); }
	(rule__MapLiteralEntry__ValueAssignment_2)
	{ after(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LegacyParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyParameter__Group__0__Impl
	rule__LegacyParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyParameter__Group__1__Impl
	rule__LegacyParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1()); }
	(rule__LegacyParameter__ParameterAssignment_1)
	{ after(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2()); }
	RightCurlyBracket
	{ after(grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getDollarSignKeyword_0()); }
	DollarSign
	{ after(grammarAccess.getParameterAccess().getDollarSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAssignment_1()); }
	(rule__Parameter__ParameterAssignment_1)
	{ after(grammarAccess.getParameterAccess().getParameterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyExpression__Group__0__Impl
	rule__PropertyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyExpressionAccess().getAtomParserRuleCall_0()); }
	ruleAtom
	{ after(grammarAccess.getPropertyExpressionAccess().getAtomParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); }
		(rule__PropertyExpression__PropertyLookupsAssignment_1)
		{ after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); }
		(rule__PropertyExpression__PropertyLookupsAssignment_1)*
		{ after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalInteger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalInteger__Group__0__Impl
	rule__DecimalInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalInteger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0()); }
	()
	{ after(grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalInteger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalInteger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalInteger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1()); }
	(rule__DecimalInteger__ValueAssignment_1)
	{ after(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
	(rule__Number__Alternatives_1_0)
	{ after(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_1_1()); }
	(rule__Number__Group_1_1__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1_1__0__Impl
	rule__Number__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); }
	FullStop
	{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
	(rule__Number__Alternatives_1_1_1)
	{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QueryOptions__UnorderedGroup_1
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
	}
:
	rule__QueryOptions__UnorderedGroup_1__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__QueryOptions__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); }
					(rule__QueryOptions__ExplainAssignment_1_0)
					{ after(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); }
					(rule__QueryOptions__ProfileAssignment_1_1)
					{ after(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); }
						(rule__QueryOptions__CypherOptionAssignment_1_2)
						{ after(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); }
					)
					(
						{ before(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); }
						((rule__QueryOptions__CypherOptionAssignment_1_2)=>rule__QueryOptions__CypherOptionAssignment_1_2)*
						{ after(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); }
					)
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__QueryOptions__UnorderedGroup_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QueryOptions__UnorderedGroup_1__Impl
	rule__QueryOptions__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__UnorderedGroup_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QueryOptions__UnorderedGroup_1__Impl
	rule__QueryOptions__UnorderedGroup_1__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__UnorderedGroup_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QueryOptions__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Cypher__QueryOptionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0()); }
		ruleQueryOptions
		{ after(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cypher__StatementsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCypherAccess().getStatementsStatementParserRuleCall_2_0_0()); }
		ruleStatement
		{ after(grammarAccess.getCypherAccess().getStatementsStatementParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__ExplainAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); }
			EXPLAIN
			{ after(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__ProfileAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); }
			PROFILE
			{ after(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOptions__CypherOptionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0()); }
		ruleCypherOption
		{ after(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__VersionNumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0()); }
		ruleVersionNumber
		{ after(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CypherOption__ConfigurationOptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0()); }
		ruleConfigurationOption
		{ after(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionNumber__VersionNumberAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationOption__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularQuery__UnionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0()); }
		ruleUnion
		{ after(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BulkImportQuery__PeriodicCommitHintAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0()); }
		rulePeriodicCommitHint
		{ after(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BulkImportQuery__LoadCSVQueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0()); }
		ruleLoadCSVQuery
		{ after(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0()); }
		ruleDecimalInteger
		{ after(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVQuery__LoadCSVAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0()); }
		ruleLoadCSV
		{ after(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSVQuery__SingleQueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadCSVQueryAccess().getSingleQuerySingleQueryParserRuleCall_1_0()); }
		ruleSingleQuery
		{ after(grammarAccess.getLoadCSVQueryAccess().getSingleQuerySingleQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__AllAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); }
		(
			{ before(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); }
			ALL
			{ after(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); }
		)
		{ after(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Union__SingleQueryAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0()); }
		ruleSingleQuery
		{ after(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__ReadingClausesAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0_0()); }
		ruleReadingClause
		{ after(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__ReturnAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_0_1_0()); }
		ruleReturn
		{ after(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__ReadingClausesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_1_0_0()); }
		ruleReadingClause
		{ after(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__UpdatingClausesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0()); }
		ruleUpdatingClause
		{ after(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinglePartQuery__ReturnAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_1_2_0()); }
		ruleReturn
		{ after(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartQuery__SubQueriesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiPartQueryAccess().getSubQueriesMultiPartSubQueryParserRuleCall_0_0()); }
		ruleMultiPartSubQuery
		{ after(grammarAccess.getMultiPartQueryAccess().getSubQueriesMultiPartSubQueryParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartQuery__SinglePartQueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiPartQueryAccess().getSinglePartQuerySinglePartQueryParserRuleCall_1_0()); }
		ruleSinglePartQuery
		{ after(grammarAccess.getMultiPartQueryAccess().getSinglePartQuerySinglePartQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__ReadingClausesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0()); }
		ruleReadingClause
		{ after(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__UpdatingClausesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_0()); }
		ruleUpdatingClause
		{ after(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiPartSubQuery__WithPartAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiPartSubQueryAccess().getWithPartWithParserRuleCall_2_0()); }
		ruleWith
		{ after(grammarAccess.getMultiPartSubQueryAccess().getWithPartWithParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateIndex__IndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0()); }
		ruleIndex
		{ after(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropUniqueConstraint__UniqueConstraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0()); }
		ruleUniqueConstraint
		{ after(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0()); }
		ruleNodePropertyExistenceConstraint
		{ after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0()); }
		ruleRelationshipPropertyExistenceConstraint
		{ after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropIndex__IndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0()); }
		ruleIndex
		{ after(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__NodeLabelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0()); }
		ruleNodeLabel
		{ after(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__PropertyKeyNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0()); }
		rulePropertyKeyName
		{ after(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__NodeLabelAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); }
		ruleNodeLabel
		{ after(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UniqueConstraint__PropertyExpressionAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0()); }
		rulePropertyExpression
		{ after(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); }
		ruleNodeLabel
		{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0()); }
		rulePropertyExpression
		{ after(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0()); }
		ruleRelationshipPatternSyntax
		{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0()); }
		rulePropertyExpression
		{ after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__IncomingAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0()); }
		ruleLeftArrowHead
		{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__VariableAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__RelTypeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0()); }
		ruleRelType
		{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPatternSyntax__OutgoingAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0()); }
		ruleRightArrowHead
		{ after(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__WithHeadersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0()); }
		ruleLoadCSVWithHeaders
		{ after(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__ExpressionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__VariableAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadCSV__FieldterminatorAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__OptionalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); }
		(
			{ before(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); }
			OPTIONAL
			{ after(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); }
		)
		{ after(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__PatternAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0()); }
		rulePattern
		{ after(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__HintsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0()); }
		ruleHint
		{ after(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__WhereAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0()); }
		ruleWhere
		{ after(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unwind__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__PatternPartAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0()); }
		rulePatternPart
		{ after(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__MergeActionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0()); }
		ruleMergeAction
		{ after(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__ActionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0()); }
		(rule__MergeAction__ActionAlternatives_1_0)
		{ after(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeAction__SetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0()); }
		ruleSet
		{ after(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__UniqueContraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); }
		(
			{ before(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); }
			UNIQUE
			{ after(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); }
		)
		{ after(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__PatternAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0()); }
		rulePattern
		{ after(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__SetItemsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0()); }
		ruleSetItem
		{ after(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__SetItemsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0()); }
		ruleSetItem
		{ after(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__PropertyExpressionAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0()); }
		rulePropertyExpression
		{ after(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__VariableAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__VariableAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__ExpressionAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetItem__VariableAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__DetachAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); }
		(
			{ before(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); }
			DETACH
			{ after(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); }
		)
		{ after(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__ExpressionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__ExpressionsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__RemoveItemsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0()); }
		ruleRemoveItem
		{ after(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remove__RemoveItemsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0()); }
		ruleRemoveItem
		{ after(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__VariableAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveItem__PropertyExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0()); }
		rulePropertyExpression
		{ after(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__UpdatingClausesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeachAccess().getUpdatingClausesUpdatingClauseParserRuleCall_6_0()); }
		ruleUpdatingClause
		{ after(grammarAccess.getForeachAccess().getUpdatingClausesUpdatingClauseParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__InvocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0()); }
		ruleExplicitProcedureInvocation
		{ after(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InQueryCall__YieldItemsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); }
		ruleYieldItems
		{ after(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__InvocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0()); }
		(rule__StandaloneCall__InvocationAlternatives_1_0)
		{ after(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StandaloneCall__YieldItemsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); }
		ruleYieldItems
		{ after(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__ItemsAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0()); }
		ruleYieldItem
		{ after(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItems__ItemsAssignment_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0()); }
		ruleYieldItem
		{ after(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__FieldAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0()); }
		ruleProcedureResultField
		{ after(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YieldItem__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__ReturnBodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_1_0()); }
		ruleReturnBody
		{ after(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__WhereAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_2_0()); }
		ruleWhere
		{ after(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__ReturnAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); }
		(
			{ before(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); }
			RETURN
			{ after(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); }
		)
		{ after(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__BodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_1_0()); }
		ruleReturnBody
		{ after(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__DistinctAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); }
		(
			{ before(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); }
			DISTINCT
			{ after(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); }
		)
		{ after(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__ReturnItemsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_1_0()); }
		ruleReturnItems
		{ after(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__OrderAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_2_0()); }
		ruleOrder
		{ after(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__SkipAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_3_0()); }
		ruleSkip
		{ after(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnBody__LimitAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_4_0()); }
		ruleLimit
		{ after(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__AllAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); }
		(
			{ before(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); }
			Asterisk
			{ after(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); }
		)
		{ after(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__ItemsAssignment_0_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0()); }
		ruleReturnItem
		{ after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__ItemsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0()); }
		ruleReturnItem
		{ after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItems__ItemsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0()); }
		ruleReturnItem
		{ after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnItem__AliasAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__OrderByAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0()); }
		ruleSortItem
		{ after(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Order__OrderByAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0()); }
		ruleSortItem
		{ after(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__SkipAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__LimitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SortItem__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SortItem__SortAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSortItemAccess().getSortAlternatives_1_0()); }
		(rule__SortItem__SortAlternatives_1_0)
		{ after(grammarAccess.getSortItemAccess().getSortAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__VariableAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__NodeLabelAssignment_0_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0()); }
		ruleNodeLabel
		{ after(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__PropertyKeyNameAssignment_0_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0()); }
		rulePropertyKeyName
		{ after(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__VariablesAssignment_1_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__VariablesAssignment_1_1_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__VariableAssignment_2_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hint__NodeLabelAssignment_2_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0()); }
		ruleNodeLabel
		{ after(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__StartPointAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0()); }
		ruleStartPoint
		{ after(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__StartPointAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0()); }
		ruleStartPoint
		{ after(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__WhereAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0()); }
		ruleWhere
		{ after(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartPoint__LookupAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0()); }
		ruleLookup
		{ after(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__IndexNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__KeyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__ValueAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0()); }
		ruleLegacyParameter
		{ after(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__IndexNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__QueryAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexQuery__ParameterAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0()); }
		ruleParameter
		{ after(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__IdsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0()); }
		ruleLiteralIds
		{ after(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__LegacyParameterAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdLookup__WildcardAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); }
		(
			{ before(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); }
			Asterisk
			{ after(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); }
		)
		{ after(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__IdsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0()); }
		ruleDecimalInteger
		{ after(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIds__IdsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0()); }
		ruleDecimalInteger
		{ after(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__PatternsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0()); }
		rulePatternPart
		{ after(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__PatternsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0()); }
		rulePatternPart
		{ after(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__VarAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternPart__PartAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0()); }
		ruleAnonymousPatternPart
		{ after(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__PatternElementAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0()); }
		rulePatternElement
		{ after(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortestPathPattern__PatternElementAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0()); }
		rulePatternElement
		{ after(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__NodepatternAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0()); }
		ruleNodePattern
		{ after(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElement__ChainAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0()); }
		rulePatternElementChain
		{ after(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodePattern__PropertiesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0()); }
		ruleProperties
		{ after(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElementChain__RelationshipPatternAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0()); }
		ruleRelationshipPattern
		{ after(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternElementChain__NodePatternAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0()); }
		ruleNodePattern
		{ after(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__IncomingAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0()); }
		ruleLeftArrowHead
		{ after(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__DetailAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0()); }
		ruleRelationshipDetail
		{ after(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipPattern__OutgoingAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0()); }
		ruleRightArrowHead
		{ after(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__OptionalAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); }
		(
			{ before(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); }
			QuestionMark
			{ after(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); }
		)
		{ after(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__RangeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0()); }
		ruleRangeLiteral
		{ after(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDetail__PropertiesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0()); }
		ruleProperties
		{ after(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__RelTypeNamesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_1_0()); }
		ruleRelTypeName
		{ after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipTypes__RelTypeNamesAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_2_2_0()); }
		ruleRelTypeName
		{ after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLabels__NodeLabelsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0()); }
		ruleNodeLabel
		{ after(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLabel__LabelNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0()); }
		ruleLabelName
		{ after(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__LowerAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0()); }
		ruleNumber
		{ after(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__VariableLengthAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); }
		(
			{ before(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); }
			FullStopFullStop
			{ after(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); }
		)
		{ after(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__UpperAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0()); }
		ruleNumber
		{ after(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
			OR
			{ after(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
		ruleXorExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
			XOR
			{ after(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
			AND
			{ after(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); }
		ruleNotExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
			NOT
			{ after(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__LeftAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0()); }
		ruleNotExpression
		{ after(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__ComparisonExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0()); }
		ruleAddOrSubtractExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOrSubtractExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0()); }
		ruleMultiplyDivideModuloExpression
		{ after(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideModuloExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0()); }
		rulePowerOfExpression
		{ after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
			CircumflexAccent
			{ after(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOfExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
		ruleUnaryAddOrSubtractExpression
		{ after(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
		ruleUnaryAddOrSubtractExpression
		{ after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0()); }
		(rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0)
		{ after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperatorExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0()); }
		ruleExpression
		{ after(grammarAccess.getListOperatorExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__LowerAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperatorExpressionAccess().getLowerExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getListOperatorExpressionAccess().getLowerExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperatorExpression__UpperAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperatorExpressionAccess().getUpperExpressionParserRuleCall_1_4_0()); }
		ruleExpression
		{ after(grammarAccess.getListOperatorExpressionAccess().getUpperExpressionParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperatorExpression__RightAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrLabelsExpressionParserRuleCall_1_0()); }
		rulePropertyOrLabelsExpression
		{ after(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrLabelsExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0()); }
		rulePropertyLookup
		{ after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__FilterExpressionAssignment_7_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_7_3_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_7_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__FilterExpressionAssignment_8_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_8_3_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_8_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ExpressionAssignment_8_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_8_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_8_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__FilterExpressionAssignment_10_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_10_3_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_10_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__FilterExpressionAssignment_11_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__FilterExpressionAssignment_12_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__FilterExpressionAssignment_13_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__VariableRefAssignment_18_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationParserRuleCall_18_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationParserRuleCall_18_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); }
		(rule__BooleanLiteral__ValueAlternatives_1_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__ExpressionsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__ExpressionsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__AccumulatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__AccumulatorExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__IdInCollAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0()); }
		ruleIdInColl
		{ after(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reduce__ExpressionAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0()); }
		ruleExpression
		{ after(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipsPattern__NodePatternAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0()); }
		ruleNodePattern
		{ after(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipsPattern__ChainAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0()); }
		rulePatternElementChain
		{ after(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpression__IdInCollAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0()); }
		ruleIdInColl
		{ after(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpression__WhereAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0()); }
		ruleWhere
		{ after(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdInColl__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__FunctionNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__DistinctAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); }
		(
			{ before(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); }
			DISTINCT
			{ after(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); }
		)
		{ after(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__ParameterAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvocation__ParameterAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0()); }
		ruleProcedureName
		{ after(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__ParameterAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_1_0()); }
		ruleProcedureName
		{ after(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__NamespaceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0()); }
		ruleNamespace
		{ after(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__FilterExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0()); }
		ruleFilterExpression
		{ after(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListComprehension__ExpressionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__PathVariableAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__PatternAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0()); }
		ruleRelationshipsPattern
		{ after(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__WhereAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0()); }
		ruleWhere
		{ after(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternComprehension__ExpressionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0()); }
		rulePropertyKeyName
		{ after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__PropertyOperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0()); }
		(rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0)
		{ after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyLookup__PropertyKeyNameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0()); }
		rulePropertyKeyName
		{ after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__CaseAlternativesAssignment_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0()); }
		ruleCaseAlternatives
		{ after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__CaseExpressionAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__CaseAlternativesAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0()); }
		ruleCaseAlternatives
		{ after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__ElseExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__WhenAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternatives__ThenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
		ruleSYMBOLIC_NAME_X
		{ after(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__EntriesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0()); }
		ruleMapLiteralEntry
		{ after(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__EntriesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0()); }
		ruleMapLiteralEntry
		{ after(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0()); }
		rulePropertyKeyName
		{ after(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteralEntry__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyParameter__ParameterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0()); }
		(rule__LegacyParameter__ParameterAlternatives_1_0)
		{ after(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ParameterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); }
		(rule__Parameter__ParameterAlternatives_1_0)
		{ after(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__PropertyLookupsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0()); }
		rulePropertyLookup
		{ after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalInteger__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0()); }
		ruleNumber
		{ after(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
